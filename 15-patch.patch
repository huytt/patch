Index: .env
===================================================================
--- .env	(revision 55)
+++ .env	(revision 57)
@@ -14,6 +14,8 @@
 DB_USERNAME=root
 DB_PASSWORD=''
 
+SPHINX_HOST=localhost
+SPHINX_PORT=9312
 
 TIME_ZONE=ICT
 CACHE_DRIVER=file
Index: app/Modules/Batdongsansg24h/Composers/loadHeader.php
===================================================================
--- app/Modules/Batdongsansg24h/Composers/loadHeader.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Composers/loadHeader.php	(revision 57)
@@ -29,6 +29,7 @@
     public function compose($view){
         $viewdata= $view->getData();
 
+        $curKw = isset($viewdata['curKw'])?$viewdata['curKw']:null;
         $curDist = isset($viewdata['curDist'])?$viewdata['curDist']:null;
         $curWard = isset($viewdata['curWard'])?$viewdata['curWard']:null;
         $curPt = isset($viewdata['curPt'])?$viewdata['curPt']:null;
@@ -62,6 +63,7 @@
             'curPt' => $curPt,
             'curFromPrice' => $curFromPrice,
             'curToPrice' => $curToPrice,
+            'curKw' => $curKw,
         ]);
 
     }
Index: app/Modules/Batdongsansg24h/Composers/partialProperties.php
===================================================================
--- app/Modules/Batdongsansg24h/Composers/partialProperties.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Composers/partialProperties.php	(revision 57)
@@ -24,13 +24,16 @@
         $perpage = isset($view['perpage'])?$view['perpage']:Constant::BDS_PER_PAGE_DEFAULT;
         $scope = isset($view['scope'])?$view['scope']:null;
         $isEdit = isset($view['isEdit'])?$view['isEdit']:false;
+        $paginator = isset($view['paginator'])?$view['paginator']:null;
 
-        if(!is_null($scope)){
-            $paginator = $this->propRepo->paginateWhereScope($scope, $perpage,['*'],'date_on_market','desc');
-        } else {
-            $condition = isset($view['condition']) && !empty($view['condition'])?$view['condition']:[['district_id','>',0]];
-            $paginator = $this->propRepo->paginateWhere($condition,$perpage,['*'],'date_on_market','desc');
+        if(is_null($paginator)){
+            if(!is_null($scope)){
+                $paginator = $this->propRepo->paginateWhereScope($scope, $perpage,['*'],'date_on_market','desc');
+            } else {
+                $condition = isset($view['condition']) && !empty($view['condition'])?$view['condition']:[['district_id','>',0]];
+                $paginator = $this->propRepo->paginateWhere($condition,$perpage,['*'],'date_on_market','desc');
 
+            }
         }
 
         return $view->with([
Index: app/Modules/Batdongsansg24h/Controllers/FilterController.php
===================================================================
--- app/Modules/Batdongsansg24h/Controllers/FilterController.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Controllers/FilterController.php	(revision 57)
@@ -14,10 +14,13 @@
 use App\Modules\Core\BDS_SG24h\Repositories\PropertyRepository;
 use App\Modules\Core\BDS_SG24h\Repositories\StreetRepository;
 use App\Modules\Core\BDS_SG24h\Repositories\WardRepository;
+use App\Modules\Core\Constant;
 use App\Modules\Core\Utils\UtilHelper;
 use Illuminate\Routing\Controller;
 use Redirect;
 use Session;
+use sngrl\SphinxSearch\SphinxSearch;
+use Sphinx\SphinxClient;
 use Symfony\Component\HttpFoundation\Request;
 
 class FilterController extends Controller
@@ -64,15 +67,14 @@
         return $this->generate_search_filter_view($request, $pt_code, $dis_id, null, $streetId);
     }
 
-    public function generate_search_filter_view(Request $request, $pt_code, $distId = null, $wardId = null, $streetId = null){
+    public function generate_search_filter_view(Request $request, $pt_code, $distId = null, $wardId = null, $streetId = null, $kw = null){
 //                dd($pt_alias, $dis_alias, $distId, $ward_alias, $pt_code, $distId, $wardId);
         $condition = [];
+        $paginator = null;
         $from_price = $request->input('from_price');
         $to_price = $request->input('to_price');
         $title = $request->input('t');
 
-        empty($from_price)?:array_push($condition,['requested_price_value','>=',$from_price]);
-        empty($to_price)?:array_push($condition,['requested_price_value','<=',$to_price]);
         empty($pt_code)?:$curPt = $condition['property_type_code'] = $pt_code;
         empty($distId)?:$curDist = $condition['district_id'] = $distId;
         empty($wardId)?:$curWard = $condition['ward_id'] = $wardId;
@@ -81,7 +83,37 @@
         $curFromPrice = $from_price;
         $curToPrice = $to_price;
 //        dd($condition);
-        return view('Batdongsansg24h::home.search-filter', compact('condition', 'curDist', 'curWard', 'curPt', 'curStreet', 'curFromPrice', 'curToPrice','title'));
+
+        if(!is_null($kw)) {
+            $range = [0, 99999999999];
+            empty($from_price)?:($range[0]= $from_price);
+            empty($to_price)?:($range[1] = $to_price);
+            $condition['requested_price_value'] = $range;
+
+            $page = $request->input('page', 1);
+            $sphinx = new SphinxSearch();
+//        $results = $sphinx->search('pham huu lau','bds_sg24h')->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED)->limit(20)->filter('district_id',7)->get();
+//            $results = $sphinx->search($kw, 'bds_sg24h')->setMatchMode(SphinxClient::SPH_MATCH_ANY)->limit(Constant::BDS_PER_PAGE_DEFAULT, $page - 1)->get();
+            $sphinx = $sphinx->search($kw, 'bds_sg24h')->setMatchMode(SphinxClient::SPH_MATCH_ANY);
+            foreach ($condition as $field => $value) {
+                if (is_array($value)) {
+                    list($min, $max) = $value;
+                    $sphinx = $sphinx->range($field,$min,$max);
+                } else {
+                    $sphinx = $sphinx->filter($field,$value);
+                }
+            }
+            $results = $sphinx->limit(Constant::BDS_PER_PAGE_DEFAULT, $page - 1)->get();
+            if(empty($results)) return view('Batdongsansg24h::error.search-not-found', compact('kw','curDist', 'curWard', 'curPt', 'curStreet', 'curFromPrice', 'curToPrice'));
+//            dd($results, $results['total_found']);
+            $props = $this->propRepo->findWhereInOrder('id', array_keys($results['matches']));
+            $paginator = $this->propRepo->makePaginateByCollection($props, $results['total_found'],Constant::BDS_PER_PAGE_DEFAULT);
+        }
+
+        empty($from_price)?:array_push($condition,['requested_price_value','>=',$from_price]);
+        empty($to_price)?:array_push($condition,['requested_price_value','<=',$to_price]);
+
+        return view('Batdongsansg24h::home.search-filter', compact('condition', 'kw','curDist', 'curWard', 'curPt', 'curStreet', 'curFromPrice', 'curToPrice','title', 'paginator'));
     }
 
     public function search(Request $request){
@@ -95,7 +127,7 @@
         $from_price = $request->input('from_price');
         $to_price = $request->input('to_price');
 
-//        if(empty($kw)){
+        if(empty($kw)){
             $dis = $this->disRepo->findByField('id', $district_id)->first();
             $ward = $this->wardRepo->findByField('id', $ward_id)->first();
             $street = $this->streetRepo->findByField('id', $street_id)->first();
@@ -148,7 +180,9 @@
                     't' => sprintf(Enum::$PROPERTY_TYPES[$property_type_code])
                 ]);
             }
-//        }
+        } else {
+            return $this->generate_search_filter_view($request, $property_type_code, $district_id, $ward_id, $street_id, $kw);
+        }
 
         $title = '';
         return view('Batdongsansg24h::home.search-filter', compact('title'));
Index: app/Modules/Batdongsansg24h/Controllers/HomeController.php
===================================================================
--- app/Modules/Batdongsansg24h/Controllers/HomeController.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Controllers/HomeController.php	(revision 57)
@@ -10,9 +10,11 @@
 use App\Modules\Core\Utils\UtilHelper;
 use Illuminate\Http\Request;
 use Illuminate\Routing\Controller;
+use sngrl\SphinxSearch\SphinxSearch;
 use Solarium\Client;
 use Goutte\Client as GoutteClient;
 use GuzzleHttp\Client as GuzzleClient;
+use Sphinx\SphinxClient;
 
 class HomeController extends Controller
 {
@@ -365,4 +367,15 @@
 //		}
         var_dump($data);
     }
+
+    public function test3(){
+        $sphinx = new SphinxSearch();
+//        $results = $sphinx->search('pham huu lau','bds_sg24h')->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED)->limit(20)->filter('district_id',7)->get();
+        $results = $sphinx->search('quan 1','bds_sg24h')->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED2)->limit(20)->get();
+        dd($results);
+//        dd(array_keys($results['matches']));
+        $props = $this->propRepo->findWhereInOrder('id',array_keys($results['matches']));
+        dd($props);
+
+    }
 }
Index: app/Modules/Batdongsansg24h/Views/error/search-not-found.blade.php
===================================================================
--- app/Modules/Batdongsansg24h/Views/error/search-not-found.blade.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Views/error/search-not-found.blade.php	(revision 57)
@@ -1,22 +1,19 @@
-@extends('PCView::layouts.layout-master-2')
+@extends('Batdongsansg24h::layouts.page-content-master')
 
 @section('page-name-section','HomeScreen')
 
 @section('role-section','homeIndex')
 
 @section('left-menu-section')
-    <?php echo View::make('PCView::layouts.home-left-3',[
-            'isHome' => true
-    ])->render(); ?>
 @endsection
 
-@section('content-section')
+@section('main-content-section')
     <div class="page-content home-page">
         <div class="notFound">
             <div class="notFound__wrap">
                 <div class="notFound__info">
                     <h1 class="notFound__info__heading">
-                        Rất tiếc, chúng tôi không tìm thấy kết quả cho từ khóa "{{$keyword}}"
+                        Rất tiếc, chúng tôi không tìm thấy kết quả cho từ khóa "{{$kw}}"
                     </h1>
                     <h2 class="notFound__info__subHeading">
                         Vui lòng kiểm tra chính tả, sử dụng các từ tổng quát hơn và thử lại!
Index: app/Modules/Batdongsansg24h/Views/home/search-filter.blade.php
===================================================================
--- app/Modules/Batdongsansg24h/Views/home/search-filter.blade.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Views/home/search-filter.blade.php	(revision 57)
@@ -4,7 +4,7 @@
 
 @section('role-section','homeSearchFilter')
 
-@section('title-section', empty($title)?:$title.' |')
+@section('title-section', empty($title)?'':$title.' |')
 
 @section('meta-SEO')
     <meta name="abstract" content="Thông tin nhà đất Hồ Chí Minh">
@@ -15,18 +15,19 @@
     <meta name="copyright" content="©2007 Batdongsansg24h.com">
     <meta name="owner" content="Batdongsansg24.com">
     <meta name="generator" content="huytt_khtn">
-    <meta name="description" content="{{empty($title)?:$title.' |'}} Kênh thông tin số 1 về bất động sản tại Việt Nam: mua bán nhà đất, cho thuê nhà đất, văn phòng, căn hộ, biệt thự, chung cư. Các lĩnh vực liên quan đến bất động sản: xây dựng, nội thất, kiến trúc, ngoại thất, phong thuỷ, luật pháp, tư vấn.">
-    <meta name="keywords" content="{{empty($title)?:$title.','}} Kênh, thông, tin, số, 1, về, bất, động, sản">
+    <meta name="description" content="{{empty($title)?'':$title.' |'}} Kênh thông tin số 1 về bất động sản tại Việt Nam: mua bán nhà đất, cho thuê nhà đất, văn phòng, căn hộ, biệt thự, chung cư. Các lĩnh vực liên quan đến bất động sản: xây dựng, nội thất, kiến trúc, ngoại thất, phong thuỷ, luật pháp, tư vấn.">
+    <meta name="keywords" content="{{empty($title)?'':$title.','}} Kênh, thông, tin, số, 1, về, bất, động, sản">
     <meta property="og:locale" content="vi_VN">
     <meta property="og:type" content="website">
-    <meta property="og:title" content="{{empty($title)?:$title.' |'}} Nhà đất | Mua bán nhà đất | Cho thuê nhà đất | batdongsansg24h.com">
-    <meta property="og:description" content="{{empty($title)?:$title.' |'}} Kênh thông tin số 1 về bất động sản tại Việt Nam: mua bán nhà đất, cho thuê nhà đất, văn phòng, căn hộ, biệt thự, chung cư. Các lĩnh vực liên quan đến bất động sản: xây dựng, nội thất, kiến trúc, ngoại thất, phong thuỷ, luật pháp, tư vấn.">
+    <meta property="og:title" content="{{empty($title)?'':$title.' |'}} Nhà đất | Mua bán nhà đất | Cho thuê nhà đất | batdongsansg24h.com">
+    <meta property="og:description" content="{{empty($title)?'':$title.' |'}} Kênh thông tin số 1 về bất động sản tại Việt Nam: mua bán nhà đất, cho thuê nhà đất, văn phòng, căn hộ, biệt thự, chung cư. Các lĩnh vực liên quan đến bất động sản: xây dựng, nội thất, kiến trúc, ngoại thất, phong thuỷ, luật pháp, tư vấn.">
     <meta property="og:url" content="http://batdongsansg24h.com/">
-    <meta property="og:site_name" content="{{empty($title)?:$title.' |'}} Nhà đất | Mua bán nhà đất | Cho thuê nhà đất | batdongsansg24h.com">
+    <meta property="og:site_name" content="{{empty($title)?'':$title.' |'}} Nhà đất | Mua bán nhà đất | Cho thuê nhà đất | batdongsansg24h.com">
 @endsection
 
 @section('main-content-section')
     {!! view('Batdongsansg24h::partials.partialProperties',[
         'condition' => isset($condition)?$condition:[],
+        'paginator' => isset($paginator)?$paginator:null
     ])->render() !!}
 @endsection
Index: app/Modules/Batdongsansg24h/Views/layouts/header.blade.php
===================================================================
--- app/Modules/Batdongsansg24h/Views/layouts/header.blade.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Views/layouts/header.blade.php	(revision 57)
@@ -15,7 +15,7 @@
             <div class="row">
                 <div class="col-sm-12 col-xs-12">
                     <div class="input-group">
-                        <input class="form-control input-mask-date" type="text" id="form-field-mask-1" name="keyword" placeholder="Từ khóa, Mã tin, Số điện thoại...">
+                        <input class="form-control input-mask-date" type="text" id="form-field-mask-1" name="keyword" placeholder="Từ khóa, Mã tin, Số điện thoại..." value="{{$curKw}}">
                         <span class="input-group-btn">
                             <button class="btn btn-sm btn-default" type="submit">
                                 <i class="ace-icon fa fa-search bigger-110"></i>
Index: app/Modules/Batdongsansg24h/Views/layouts/page-content-master.blade.php
===================================================================
--- app/Modules/Batdongsansg24h/Views/layouts/page-content-master.blade.php	(revision 55)
+++ app/Modules/Batdongsansg24h/Views/layouts/page-content-master.blade.php	(revision 57)
@@ -17,6 +17,7 @@
     {{--Page content--}}
     <div class="page-content">
         {!! view('Batdongsansg24h::layouts.header',[
+            'curKw' => isset($kw)?$kw:null,
             'curDist' => isset($curDist)?$curDist:0,
             'curWard' => isset($curWard)?$curWard:0,
             'curPt' => isset($curPt)?$curPt:0,
Index: app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustom.php
===================================================================
--- app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustom.php	(revision 55)
+++ app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustom.php	(revision 57)
@@ -17,12 +17,16 @@
 
     public function makePaginate(Builder $builderTakeObj = null, $primaryKey, $perPage = null, $path = null,$page = null, $pageName = 'page');
 
+    public function makePaginateByCollection($collections, $total, $perPage = null, $path = null,$page = null, $pageName = 'page');
+
     public function paginateWhere(array $where, $perPage = null, $columns = ['*'], $sortbyField = null, $direction = 'asc', $path = null,$page = null, $pageName = 'page');
 
     public function paginateWhereScope(\Closure $scope, $perPage = null, $columns = ['*'], $sortbyField = null, $direction = 'asc', $path = null,$page = null, $pageName = 'page');
 
     public function findWhereLimit(array $where, $take, $skip = 0, $columns = ['*']);
 
+    public function findWhereInOrder($field, array $values, $columns = ['*']);
+
     public function getLimit($take, $skip = 0);
 
     public function getSql($sql, $bindings);
Index: app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustomEloquent.php
===================================================================
--- app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustomEloquent.php	(revision 55)
+++ app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustomEloquent.php	(revision 57)
@@ -93,6 +93,17 @@
 
     }
 
+    public function findWhereInOrder($field, array $values, $columns = ['*'])
+    {
+        $this->applyCriteria();
+        $this->applyScope();
+        $field_ordered = implode(',', $values);
+        $model = $this->model->whereIn($field, $values)->orderByRaw(\DB::raw("FIELD($field, $field_ordered)"))->get($columns);
+        $this->resetModel();
+
+        return $this->parserResult($model);
+    }
+
     public function makePaginate(Builder $builderTakeObj = null, $primaryKey, $perPage = null, $path = null,$page = null, $pageName = 'page'){
         $this->applyCriteria();
         $this->applyScope();
@@ -122,6 +133,21 @@
 
         return $paginator;
     }
+
+    public function makePaginateByCollection($collections, $total, $perPage = null, $path = null,$page = null, $pageName = 'page'){
+        $perPage = is_null($perPage) ? config('repository.pagination.limit', 15) : $perPage;
+
+        $path == null ? Paginator::resolveCurrentPath():$path;
+
+        $paginator = new LengthAwarePaginator(null, $total, $perPage, $page, [
+            'path' => $path,
+            'pageName' => $pageName,
+        ]);
+
+        $paginator->setCollection($collections);
+
+        return $paginator;
+    }
 
     public function paginateWhere(array $where, $perPage = null, $columns = ['*'], $sortbyField = null, $direction = 'asc', $path = null, $page = null, $pageName = 'page')
     {
Index: bootstrap/cache/services.php
===================================================================
--- bootstrap/cache/services.php	(revision 55)
+++ bootstrap/cache/services.php	(revision 57)
@@ -39,6 +39,7 @@
     35 => 'App\\Modules\\Core\\BDS_SG24h\\Providers\\RepositoryServiceProvider',
     36 => 'App\\Modules\\Core\\InfServiceProvider',
     37 => 'Intervention\\Image\\ImageServiceProvider',
+    38 => 'sngrl\\SphinxSearch\\SphinxSearchServiceProvider',
   ),
   'eager' => 
   array (
@@ -66,6 +67,7 @@
     21 => 'App\\Modules\\Core\\BDS_SG24h\\Providers\\RepositoryServiceProvider',
     22 => 'App\\Modules\\Core\\InfServiceProvider',
     23 => 'Intervention\\Image\\ImageServiceProvider',
+    24 => 'sngrl\\SphinxSearch\\SphinxSearchServiceProvider',
   ),
   'deferred' => 
   array (
Index: composer.json
===================================================================
--- composer.json	(revision 55)
+++ composer.json	(revision 57)
@@ -15,7 +15,8 @@
         "solarium/solarium": "^3.6",
         "fabpot/goutte": "^3.2",
         "ignasbernotas/laravel-model-generator": "1.2.3",
-        "intervention/image": "^2.3"
+        "intervention/image": "^2.3",
+        "sngrl/sphinxsearch": "dev-master"
     },
     "require-dev": {
         "fzaninotto/faker": "~1.4",
Index: composer.lock
===================================================================
--- composer.lock	(revision 55)
+++ composer.lock	(revision 57)
@@ -4,7 +4,7 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
         "This file is @generated automatically"
     ],
-    "content-hash": "2a3c9eb78015911729120eb3b5b69e5f",
+    "content-hash": "ae7be8aa933864aa0fd3cabf9e1e545f",
     "packages": [
         {
             "name": "barryvdh/laravel-ide-helper",
@@ -273,17 +273,68 @@
             "time": "2017-01-03T13:21:43+00:00"
         },
         {
+            "name": "gigablah/sphinxphp",
+            "version": "2.0.8",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/gigablah/sphinxphp.git",
+                "reference": "6d5e97fdd33c1129ca372203d1330827c1cbc46c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/gigablah/sphinxphp/zipball/6d5e97fdd33c1129ca372203d1330827c1cbc46c",
+                "reference": "6d5e97fdd33c1129ca372203d1330827c1cbc46c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "3.7.*",
+                "satooshi/php-coveralls": "dev-master"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Sphinx": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "GPL-2.0"
+            ],
+            "authors": [
+                {
+                    "name": "Andrew Aksyonoff",
+                    "homepage": "http://sphinxsearch.com/"
+                }
+            ],
+            "description": "Sphinx Search PHP API",
+            "homepage": "http://sphinxsearch.com/",
+            "keywords": [
+                "api",
+                "search",
+                "sphinx"
+            ],
+            "time": "2013-08-22T08:05:44+00:00"
+        },
+        {
             "name": "guzzlehttp/guzzle",
-            "version": "6.2.3",
+            "version": "6.3.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/guzzle/guzzle.git",
-                "reference": "8d6c6cc55186db87b7dc5009827429ba4e9dc006"
+                "reference": "f4db5a78a5ea468d4831de7f0bf9d9415e348699"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/8d6c6cc55186db87b7dc5009827429ba4e9dc006",
-                "reference": "8d6c6cc55186db87b7dc5009827429ba4e9dc006",
+                "url": "https://api.github.com/repos/guzzle/guzzle/zipball/f4db5a78a5ea468d4831de7f0bf9d9415e348699",
+                "reference": "f4db5a78a5ea468d4831de7f0bf9d9415e348699",
                 "shasum": ""
             },
             "require": {
@@ -293,9 +344,12 @@
             },
             "require-dev": {
                 "ext-curl": "*",
-                "phpunit/phpunit": "^4.0",
+                "phpunit/phpunit": "^4.0 || ^5.0",
                 "psr/log": "^1.0"
             },
+            "suggest": {
+                "psr/log": "Required for using the Log middleware"
+            },
             "type": "library",
             "extra": {
                 "branch-alias": {
@@ -332,7 +386,7 @@
                 "rest",
                 "web service"
             ],
-            "time": "2017-02-28T22:50:30+00:00"
+            "time": "2017-06-22T18:50:49+00:00"
         },
         {
             "name": "guzzlehttp/promises",
@@ -491,20 +545,21 @@
                 "model",
                 "schema"
             ],
+            "abandoned": "reliese/laravel",
             "time": "2017-04-06T09:29:06+00:00"
         },
         {
             "name": "intervention/image",
-            "version": "2.3.13",
+            "version": "2.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/Intervention/image.git",
-                "reference": "15a517f052ee15d373ffa145c9642d5fec7ddf5c"
+                "reference": "322a4ade249467179c50a3e50eda8760ff3af2a3"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/Intervention/image/zipball/15a517f052ee15d373ffa145c9642d5fec7ddf5c",
-                "reference": "15a517f052ee15d373ffa145c9642d5fec7ddf5c",
+                "url": "https://api.github.com/repos/Intervention/image/zipball/322a4ade249467179c50a3e50eda8760ff3af2a3",
+                "reference": "322a4ade249467179c50a3e50eda8760ff3af2a3",
                 "shasum": ""
             },
             "require": {
@@ -514,7 +569,7 @@
             },
             "require-dev": {
                 "mockery/mockery": "~0.9.2",
-                "phpunit/phpunit": "3.*"
+                "phpunit/phpunit": "^4.8 || ^5.7"
             },
             "suggest": {
                 "ext-gd": "to use GD library based image processing.",
@@ -525,6 +580,14 @@
             "extra": {
                 "branch-alias": {
                     "dev-master": "2.3-dev"
+                },
+                "laravel": {
+                    "providers": [
+                        "Intervention\\Image\\ImageServiceProvider"
+                    ],
+                    "aliases": {
+                        "Image": "Intervention\\Image\\Facades\\Image"
+                    }
                 }
             },
             "autoload": {
@@ -539,8 +602,8 @@
             "authors": [
                 {
                     "name": "Oliver Vogel",
-                    "email": "oliver@olivervogel.net",
-                    "homepage": "http://olivervogel.net/"
+                    "email": "oliver@olivervogel.com",
+                    "homepage": "http://olivervogel.com/"
                 }
             ],
             "description": "Image handling and manipulation library with support for Laravel integration",
@@ -553,7 +616,7 @@
                 "thumbnail",
                 "watermark"
             ],
-            "time": "2017-04-23T18:45:36+00:00"
+            "time": "2017-07-03T15:50:40+00:00"
         },
         {
             "name": "jakub-onderka/php-console-color",
@@ -1090,16 +1153,16 @@
         },
         {
             "name": "monolog/monolog",
-            "version": "1.22.1",
+            "version": "1.23.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/Seldaek/monolog.git",
-                "reference": "1e044bc4b34e91743943479f1be7a1d5eb93add0"
+                "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/1e044bc4b34e91743943479f1be7a1d5eb93add0",
-                "reference": "1e044bc4b34e91743943479f1be7a1d5eb93add0",
+                "url": "https://api.github.com/repos/Seldaek/monolog/zipball/fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
+                "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
                 "shasum": ""
             },
             "require": {
@@ -1120,7 +1183,7 @@
                 "phpunit/phpunit-mock-objects": "2.3.0",
                 "ruflin/elastica": ">=0.90 <3.0",
                 "sentry/sentry": "^0.13",
-                "swiftmailer/swiftmailer": "~5.3"
+                "swiftmailer/swiftmailer": "^5.3|^6.0"
             },
             "suggest": {
                 "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
@@ -1164,7 +1227,7 @@
                 "logging",
                 "psr-3"
             ],
-            "time": "2017-03-13T07:08:03+00:00"
+            "time": "2017-06-19T01:22:40+00:00"
         },
         {
             "name": "mtdowling/cron-expression",
@@ -1364,16 +1427,16 @@
         },
         {
             "name": "phpdocumentor/reflection-docblock",
-            "version": "2.0.4",
+            "version": "2.0.5",
             "source": {
                 "type": "git",
                 "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
-                "reference": "d68dbdc53dc358a816f00b300704702b2eaff7b8"
+                "reference": "e6a969a640b00d8daa3c66518b0405fb41ae0c4b"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/d68dbdc53dc358a816f00b300704702b2eaff7b8",
-                "reference": "d68dbdc53dc358a816f00b300704702b2eaff7b8",
+                "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/e6a969a640b00d8daa3c66518b0405fb41ae0c4b",
+                "reference": "e6a969a640b00d8daa3c66518b0405fb41ae0c4b",
                 "shasum": ""
             },
             "require": {
@@ -1409,7 +1472,7 @@
                     "email": "mike.vanriel@naenius.com"
                 }
             ],
-            "time": "2015-02-03T12:10:50+00:00"
+            "time": "2016-01-25T08:17:30+00:00"
         },
         {
             "name": "phpoffice/phpexcel",
@@ -1738,6 +1801,51 @@
             "time": "2016-03-09T05:03:14+00:00"
         },
         {
+            "name": "sngrl/sphinxsearch",
+            "version": "dev-master",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sngrl/sphinxsearch.git",
+                "reference": "1e0f891d06eeb7aa59c0d12db76f38afb062fda4"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sngrl/sphinxsearch/zipball/1e0f891d06eeb7aa59c0d12db76f38afb062fda4",
+                "reference": "1e0f891d06eeb7aa59c0d12db76f38afb062fda4",
+                "shasum": ""
+            },
+            "require": {
+                "gigablah/sphinxphp": "2.0.8",
+                "illuminate/support": "~5.0",
+                "php": ">=5.3.0"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-0": {
+                    "sngrl\\SphinxSearch": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "Apache-2.0"
+            ],
+            "authors": [
+                {
+                    "name": "sngrl",
+                    "email": "reserved@mail.ru"
+                }
+            ],
+            "description": "Laravel package to query Sphinxsearch in Laravel 5",
+            "homepage": "http://github.com/sngrl/sphinxsearch",
+            "keywords": [
+                "laravel",
+                "laravel 5",
+                "sphinx",
+                "sphinxsearch"
+            ],
+            "time": "2016-06-22T08:45:38+00:00"
+        },
+        {
             "name": "solarium/solarium",
             "version": "3.8.1",
             "source": {
@@ -1851,16 +1959,16 @@
         },
         {
             "name": "symfony/browser-kit",
-            "version": "v3.2.8",
+            "version": "v3.3.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/browser-kit.git",
-                "reference": "9fab1ab6f77b77f3df5fc5250fc6956811699b57"
+                "reference": "3a4435e79a8401746e8525e98039199d0924b4e5"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/browser-kit/zipball/9fab1ab6f77b77f3df5fc5250fc6956811699b57",
-                "reference": "9fab1ab6f77b77f3df5fc5250fc6956811699b57",
+                "url": "https://api.github.com/repos/symfony/browser-kit/zipball/3a4435e79a8401746e8525e98039199d0924b4e5",
+                "reference": "3a4435e79a8401746e8525e98039199d0924b4e5",
                 "shasum": ""
             },
             "require": {
@@ -1877,7 +1985,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.2-dev"
+                    "dev-master": "3.3-dev"
                 }
             },
             "autoload": {
@@ -1904,20 +2012,20 @@
             ],
             "description": "Symfony BrowserKit Component",
             "homepage": "https://symfony.com",
-            "time": "2017-04-12T14:13:17+00:00"
+            "time": "2017-06-24T09:29:48+00:00"
         },
         {
             "name": "symfony/class-loader",
-            "version": "v3.2.8",
+            "version": "v3.3.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/class-loader.git",
-                "reference": "fc4c04bfd17130a9dccfded9578353f311967da7"
+                "reference": "386a294d621576302e7cc36965d6ed53b8c73c4f"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/class-loader/zipball/fc4c04bfd17130a9dccfded9578353f311967da7",
-                "reference": "fc4c04bfd17130a9dccfded9578353f311967da7",
+                "url": "https://api.github.com/repos/symfony/class-loader/zipball/386a294d621576302e7cc36965d6ed53b8c73c4f",
+                "reference": "386a294d621576302e7cc36965d6ed53b8c73c4f",
                 "shasum": ""
             },
             "require": {
@@ -1933,7 +2041,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.2-dev"
+                    "dev-master": "3.3-dev"
                 }
             },
             "autoload": {
@@ -1960,7 +2068,7 @@
             ],
             "description": "Symfony ClassLoader Component",
             "homepage": "https://symfony.com",
-            "time": "2017-04-12T14:13:17+00:00"
+            "time": "2017-06-02T09:51:43+00:00"
         },
         {
             "name": "symfony/console",
@@ -2190,25 +2298,28 @@
         },
         {
             "name": "symfony/event-dispatcher",
-            "version": "v3.2.8",
+            "version": "v3.3.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/event-dispatcher.git",
-                "reference": "b8a401f733b43251e1d088c589368b2a94155e40"
+                "reference": "67535f1e3fd662bdc68d7ba317c93eecd973617e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/b8a401f733b43251e1d088c589368b2a94155e40",
-                "reference": "b8a401f733b43251e1d088c589368b2a94155e40",
+                "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/67535f1e3fd662bdc68d7ba317c93eecd973617e",
+                "reference": "67535f1e3fd662bdc68d7ba317c93eecd973617e",
                 "shasum": ""
             },
             "require": {
                 "php": ">=5.5.9"
             },
+            "conflict": {
+                "symfony/dependency-injection": "<3.3"
+            },
             "require-dev": {
                 "psr/log": "~1.0",
                 "symfony/config": "~2.8|~3.0",
-                "symfony/dependency-injection": "~2.8|~3.0",
+                "symfony/dependency-injection": "~3.3",
                 "symfony/expression-language": "~2.8|~3.0",
                 "symfony/stopwatch": "~2.8|~3.0"
             },
@@ -2219,7 +2330,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.2-dev"
+                    "dev-master": "3.3-dev"
                 }
             },
             "autoload": {
@@ -2246,7 +2357,7 @@
             ],
             "description": "Symfony EventDispatcher Component",
             "homepage": "https://symfony.com",
-            "time": "2017-05-01T14:58:48+00:00"
+            "time": "2017-06-09T14:53:08+00:00"
         },
         {
             "name": "symfony/finder",
@@ -2434,16 +2545,16 @@
         },
         {
             "name": "symfony/polyfill-mbstring",
-            "version": "v1.3.0",
+            "version": "v1.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-mbstring.git",
-                "reference": "e79d363049d1c2128f133a2667e4f4190904f7f4"
+                "reference": "f29dca382a6485c3cbe6379f0c61230167681937"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/e79d363049d1c2128f133a2667e4f4190904f7f4",
-                "reference": "e79d363049d1c2128f133a2667e4f4190904f7f4",
+                "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/f29dca382a6485c3cbe6379f0c61230167681937",
+                "reference": "f29dca382a6485c3cbe6379f0c61230167681937",
                 "shasum": ""
             },
             "require": {
@@ -2455,7 +2566,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.3-dev"
+                    "dev-master": "1.4-dev"
                 }
             },
             "autoload": {
@@ -2489,20 +2600,20 @@
                 "portable",
                 "shim"
             ],
-            "time": "2016-11-14T01:06:16+00:00"
+            "time": "2017-06-09T14:24:12+00:00"
         },
         {
             "name": "symfony/polyfill-php56",
-            "version": "v1.3.0",
+            "version": "v1.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-php56.git",
-                "reference": "1dd42b9b89556f18092f3d1ada22cb05ac85383c"
+                "reference": "bc0b7d6cb36b10cfabb170a3e359944a95174929"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-php56/zipball/1dd42b9b89556f18092f3d1ada22cb05ac85383c",
-                "reference": "1dd42b9b89556f18092f3d1ada22cb05ac85383c",
+                "url": "https://api.github.com/repos/symfony/polyfill-php56/zipball/bc0b7d6cb36b10cfabb170a3e359944a95174929",
+                "reference": "bc0b7d6cb36b10cfabb170a3e359944a95174929",
                 "shasum": ""
             },
             "require": {
@@ -2512,7 +2623,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.3-dev"
+                    "dev-master": "1.4-dev"
                 }
             },
             "autoload": {
@@ -2545,20 +2656,20 @@
                 "portable",
                 "shim"
             ],
-            "time": "2016-11-14T01:06:16+00:00"
+            "time": "2017-06-09T08:25:21+00:00"
         },
         {
             "name": "symfony/polyfill-util",
-            "version": "v1.3.0",
+            "version": "v1.4.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/polyfill-util.git",
-                "reference": "746bce0fca664ac0a575e465f65c6643faddf7fb"
+                "reference": "ebccbde4aad410f6438d86d7d261c6b4d2b9a51d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/polyfill-util/zipball/746bce0fca664ac0a575e465f65c6643faddf7fb",
-                "reference": "746bce0fca664ac0a575e465f65c6643faddf7fb",
+                "url": "https://api.github.com/repos/symfony/polyfill-util/zipball/ebccbde4aad410f6438d86d7d261c6b4d2b9a51d",
+                "reference": "ebccbde4aad410f6438d86d7d261c6b4d2b9a51d",
                 "shasum": ""
             },
             "require": {
@@ -2567,7 +2678,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.3-dev"
+                    "dev-master": "1.4-dev"
                 }
             },
             "autoload": {
@@ -2597,7 +2708,7 @@
                 "polyfill",
                 "shim"
             ],
-            "time": "2016-11-14T01:06:16+00:00"
+            "time": "2017-06-09T08:25:21+00:00"
         },
         {
             "name": "symfony/process",
@@ -3877,16 +3988,16 @@
         },
         {
             "name": "phpunit/phpunit",
-            "version": "4.8.35",
+            "version": "4.8.36",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/phpunit.git",
-                "reference": "791b1a67c25af50e230f841ee7a9c6eba507dc87"
+                "reference": "46023de9a91eec7dfb06cc56cb4e260017298517"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/791b1a67c25af50e230f841ee7a9c6eba507dc87",
-                "reference": "791b1a67c25af50e230f841ee7a9c6eba507dc87",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/46023de9a91eec7dfb06cc56cb4e260017298517",
+                "reference": "46023de9a91eec7dfb06cc56cb4e260017298517",
                 "shasum": ""
             },
             "require": {
@@ -3945,7 +4056,7 @@
                 "testing",
                 "xunit"
             ],
-            "time": "2017-02-06T05:18:07+00:00"
+            "time": "2017-06-21T08:07:12+00:00"
         },
         {
             "name": "phpunit/phpunit-mock-objects",
@@ -4069,16 +4180,16 @@
         },
         {
             "name": "sebastian/diff",
-            "version": "1.4.2",
+            "version": "1.4.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/diff.git",
-                "reference": "3c7d21999e815cdfac70c6c7d79d3a9cb1bc7bc2"
+                "reference": "7f066a26a962dbe58ddea9f72a4e82874a3975a4"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3c7d21999e815cdfac70c6c7d79d3a9cb1bc7bc2",
-                "reference": "3c7d21999e815cdfac70c6c7d79d3a9cb1bc7bc2",
+                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/7f066a26a962dbe58ddea9f72a4e82874a3975a4",
+                "reference": "7f066a26a962dbe58ddea9f72a4e82874a3975a4",
                 "shasum": ""
             },
             "require": {
@@ -4117,7 +4228,7 @@
             "keywords": [
                 "diff"
             ],
-            "time": "2017-05-18T13:44:30+00:00"
+            "time": "2017-05-22T07:24:03+00:00"
         },
         {
             "name": "sebastian/environment",
@@ -4377,16 +4488,16 @@
         },
         {
             "name": "symfony/yaml",
-            "version": "v3.2.8",
+            "version": "v3.3.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/symfony/yaml.git",
-                "reference": "acec26fcf7f3031e094e910b94b002fa53d4e4d6"
+                "reference": "1f93a8d19b8241617f5074a123e282575b821df8"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/symfony/yaml/zipball/acec26fcf7f3031e094e910b94b002fa53d4e4d6",
-                "reference": "acec26fcf7f3031e094e910b94b002fa53d4e4d6",
+                "url": "https://api.github.com/repos/symfony/yaml/zipball/1f93a8d19b8241617f5074a123e282575b821df8",
+                "reference": "1f93a8d19b8241617f5074a123e282575b821df8",
                 "shasum": ""
             },
             "require": {
@@ -4401,7 +4512,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.2-dev"
+                    "dev-master": "3.3-dev"
                 }
             },
             "autoload": {
@@ -4428,7 +4539,7 @@
             ],
             "description": "Symfony Yaml Component",
             "homepage": "https://symfony.com",
-            "time": "2017-05-01T14:55:58+00:00"
+            "time": "2017-06-15T12:58:50+00:00"
         },
         {
             "name": "way/generators",
@@ -4571,6 +4682,7 @@
     "aliases": [],
     "minimum-stability": "stable",
     "stability-flags": {
+        "sngrl/sphinxsearch": 20,
         "xethron/migrations-generator": 20,
         "way/generators": 20
     },
Index: config/app.php
===================================================================
--- config/app.php	(revision 55)
+++ config/app.php	(revision 57)
@@ -169,6 +169,7 @@
         App\Modules\Core\BDS_SG24h\Providers\RepositoryServiceProvider::class, // Config BDS RepositoryServiceProvider
         App\Modules\Core\InfServiceProvider::class, // Config Inf ServiceProvider
         Intervention\Image\ImageServiceProvider::class, // Config image.intervention
+        sngrl\SphinxSearch\SphinxSearchServiceProvider::class,// Config sphinxSearch
 //        Barryvdh\Debugbar\ServiceProvider::class, // Config debugbar
     ],
 
Index: config/sphinxsearch.php
===================================================================
--- config/sphinxsearch.php	(nonexistent)
+++ config/sphinxsearch.php	(revision 57)
@@ -0,0 +1,16 @@
+<?php
+/**
+ * Created by PhpStorm.
+ * User: huytt
+ * Date: 7/14/2017
+ * Time: 4:44 PM
+ */
+
+return array (
+    'host'    => env('SPHINX_HOST','localhost'),
+    'port'    => env('SPHINX_PORT', 9312),
+    'indexes' => array (
+//        'bds_sg24h' => array ( 'table' => 'bds_sg24h1', 'column' => 'id' ),
+        'bds_sg24h' => FALSE,
+    )
+);
\ No newline at end of file
Index: public/batdongsansg24h/css/app.css
===================================================================
--- public/batdongsansg24h/css/app.css	(revision 55)
+++ public/batdongsansg24h/css/app.css	(revision 57)
@@ -176,6 +176,37 @@
     height: 60px;
     line-height: 60px;
 }
+
+.notFound{
+    margin: 24px auto 45px auto;
+}
+
+.notFound__wrap {
+    text-align: center;
+}
+
+.notFound__info {
+    position: relative;
+    display: inline-block;
+    max-width: 550px;
+}
+
+.notFound__info__heading {
+    color: #264a5f;
+    font-size: 18px;
+    line-height: 20px;
+    margin: 0 0 14px 0;
+    text-align: center;
+}
+
+.notFound__info__subHeading {
+    color: #000;
+    font-size: 12px;
+    line-height: 14px;
+    text-align: center;
+    font-weight: normal;
+    margin: 0 0 14px 0;
+}
 /*.footer .footer-inner .footer-content{*/
 /*/!*padding-left: 0;*!/*/
 /*/!*padding-right: 0;*!/*/
Index: vendor/composer/autoload_classmap.php
===================================================================
--- vendor/composer/autoload_classmap.php	(revision 55)
+++ vendor/composer/autoload_classmap.php	(revision 57)
@@ -20,10 +20,13 @@
     'App\\Http\\Middleware\\VerifyCsrfToken' => $baseDir . '/app/Http/Middleware/VerifyCsrfToken.php',
     'App\\Http\\Requests\\Request' => $baseDir . '/app/Http/Requests/Request.php',
     'App\\Jobs\\Job' => $baseDir . '/app/Jobs/Job.php',
+    'App\\Modules\\Batdongsansg24h\\Composers\\loadHeader' => $baseDir . '/app/Modules/Batdongsansg24h/Composers/loadHeader.php',
     'App\\Modules\\Batdongsansg24h\\Composers\\loadRegion' => $baseDir . '/app/Modules/Batdongsansg24h/Composers/loadRegion.php',
+    'App\\Modules\\Batdongsansg24h\\Composers\\loadRightContent' => $baseDir . '/app/Modules/Batdongsansg24h/Composers/loadRightContent.php',
     'App\\Modules\\Batdongsansg24h\\Composers\\partialProperties' => $baseDir . '/app/Modules/Batdongsansg24h/Composers/partialProperties.php',
     'App\\Modules\\Batdongsansg24h\\Controllers\\Ajax\\UserController' => $baseDir . '/app/Modules/Batdongsansg24h/Controllers/Ajax/UserController.php',
     'App\\Modules\\Batdongsansg24h\\Controllers\\AuthenController' => $baseDir . '/app/Modules/Batdongsansg24h/Controllers/AuthenController.php',
+    'App\\Modules\\Batdongsansg24h\\Controllers\\FilterController' => $baseDir . '/app/Modules/Batdongsansg24h/Controllers/FilterController.php',
     'App\\Modules\\Batdongsansg24h\\Controllers\\HomeController' => $baseDir . '/app/Modules/Batdongsansg24h/Controllers/HomeController.php',
     'App\\Modules\\Batdongsansg24h\\Controllers\\HomeCreateRequest' => $baseDir . '/app/Modules/Batdongsansg24h/Requests/HomeCreateRequest.php',
     'App\\Modules\\Batdongsansg24h\\Controllers\\HomeUpdateRequest' => $baseDir . '/app/Modules/Batdongsansg24h/Requests/HomeUpdateRequest.php',
@@ -31,6 +34,7 @@
     'App\\Modules\\Batdongsansg24h\\Controllers\\UserController' => $baseDir . '/app/Modules/Batdongsansg24h/Controllers/UserController.php',
     'App\\Modules\\Batdongsansg24h\\Enum' => $baseDir . '/app/Modules/Batdongsansg24h/Enum.php',
     'App\\Modules\\Batdongsansg24h\\Requests\\PropertyCreateRequest' => $baseDir . '/app/Modules/Batdongsansg24h/Requests/PropertyCreateRequest.php',
+    'App\\Modules\\Batdongsansg24h\\Requests\\PropertyUpdateRequest' => $baseDir . '/app/Modules/Batdongsansg24h/Requests/PropertyUpdateRequest.php',
     'App\\Modules\\Batdongsansg24h\\Requests\\UserCreateRequest' => $baseDir . '/app/Modules/Batdongsansg24h/Requests/UserCreateRequest.php',
     'App\\Modules\\Batdongsansg24h\\Requests\\UserUpdateRequest' => $baseDir . '/app/Modules/Batdongsansg24h/Requests/UserUpdateRequest.php',
     'App\\Modules\\Core\\BDS_SG24h\\Providers\\RepositoryServiceProvider' => $baseDir . '/app/Modules/Core/BDS_SG24h/Providers/RepositoryServiceProvider.php',
@@ -59,6 +63,7 @@
     'App\\Modules\\Core\\BaseRepositoryCustom\\BaseRepositoryCustomEloquent' => $baseDir . '/app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustomEloquent.php',
     'App\\Modules\\Core\\Command\\BDSGoutteCommand' => $baseDir . '/app/Modules/Core/Command/BDSGoutteCommand.php',
     'App\\Modules\\Core\\Command\\CommandServiceProvider' => $baseDir . '/app/Modules/Core/Command/CommandServiceProvider.php',
+    'App\\Modules\\Core\\Command\\GenerateSiteMapCommand' => $baseDir . '/app/Modules/Core/Command/GenerateSiteMapCommand.php',
     'App\\Modules\\Core\\Command\\GoutteBatDongSanContent' => $baseDir . '/app/Modules/Core/Command/GoutteBatDongSanContent.php',
     'App\\Modules\\Core\\Command\\GoutteCommand' => $baseDir . '/app/Modules/Core/Command/GoutteCommand.php',
     'App\\Modules\\Core\\Command\\GoutteContent' => $baseDir . '/app/Modules/Core/Command/GoutteContent.php',
@@ -2208,9 +2213,12 @@
     'PHPExcel_Writer_PDF_mPDF' => $vendorDir . '/phpoffice/phpexcel/Classes/PHPExcel/Writer/PDF/mPDF.php',
     'PHPExcel_Writer_PDF_tcPDF' => $vendorDir . '/phpoffice/phpexcel/Classes/PHPExcel/Writer/PDF/tcPDF.php',
     'PHPUnit\\Framework\\Assert' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/Assert.php',
+    'PHPUnit\\Framework\\AssertionFailedError' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/AssertionFailedError.php',
     'PHPUnit\\Framework\\BaseTestListener' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/BaseTestListener.php',
+    'PHPUnit\\Framework\\Test' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/Test.php',
     'PHPUnit\\Framework\\TestCase' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/TestCase.php',
     'PHPUnit\\Framework\\TestListener' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/TestListener.php',
+    'PHPUnit\\Framework\\TestSuite' => $vendorDir . '/phpunit/phpunit/src/ForwardCompatibility/TestSuite.php',
     'PHPUnit_Exception' => $vendorDir . '/phpunit/phpunit/src/Exception.php',
     'PHPUnit_Extensions_GroupTestSuite' => $vendorDir . '/phpunit/phpunit/src/Extensions/GroupTestSuite.php',
     'PHPUnit_Extensions_PhptTestCase' => $vendorDir . '/phpunit/phpunit/src/Extensions/PhptTestCase.php',
@@ -3311,6 +3319,7 @@
     'Solarium\\Support\\DataFixtures\\FixtureLoader' => $vendorDir . '/solarium/solarium/library/Solarium/Support/DataFixtures/FixtureLoader.php',
     'Solarium\\Support\\DataFixtures\\Loader' => $vendorDir . '/solarium/solarium/library/Solarium/Support/DataFixtures/Loader.php',
     'Solarium\\Support\\DataFixtures\\Purger' => $vendorDir . '/solarium/solarium/library/Solarium/Support/DataFixtures/Purger.php',
+    'Sphinx\\SphinxClient' => $vendorDir . '/gigablah/sphinxphp/src/Sphinx/SphinxClient.php',
     'SuperClosure\\Analyzer\\AstAnalyzer' => $vendorDir . '/jeremeamia/SuperClosure/src/Analyzer/AstAnalyzer.php',
     'SuperClosure\\Analyzer\\ClosureAnalyzer' => $vendorDir . '/jeremeamia/SuperClosure/src/Analyzer/ClosureAnalyzer.php',
     'SuperClosure\\Analyzer\\Token' => $vendorDir . '/jeremeamia/SuperClosure/src/Analyzer/Token.php',
@@ -3485,6 +3494,7 @@
     'Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher' => $vendorDir . '/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php',
     'Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcherInterface' => $vendorDir . '/symfony/event-dispatcher/Debug/TraceableEventDispatcherInterface.php',
     'Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener' => $vendorDir . '/symfony/event-dispatcher/Debug/WrappedListener.php',
+    'Symfony\\Component\\EventDispatcher\\DependencyInjection\\ExtractingEventDispatcher' => $vendorDir . '/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php',
     'Symfony\\Component\\EventDispatcher\\DependencyInjection\\RegisterListenersPass' => $vendorDir . '/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php',
     'Symfony\\Component\\EventDispatcher\\Event' => $vendorDir . '/symfony/event-dispatcher/Event.php',
     'Symfony\\Component\\EventDispatcher\\EventDispatcher' => $vendorDir . '/symfony/event-dispatcher/EventDispatcher.php',
@@ -3833,6 +3843,7 @@
     'Symfony\\Component\\Yaml\\Exception\\RuntimeException' => $vendorDir . '/symfony/yaml/Exception/RuntimeException.php',
     'Symfony\\Component\\Yaml\\Inline' => $vendorDir . '/symfony/yaml/Inline.php',
     'Symfony\\Component\\Yaml\\Parser' => $vendorDir . '/symfony/yaml/Parser.php',
+    'Symfony\\Component\\Yaml\\Tag\\TaggedValue' => $vendorDir . '/symfony/yaml/Tag/TaggedValue.php',
     'Symfony\\Component\\Yaml\\Unescaper' => $vendorDir . '/symfony/yaml/Unescaper.php',
     'Symfony\\Component\\Yaml\\Yaml' => $vendorDir . '/symfony/yaml/Yaml.php',
     'Symfony\\Polyfill\\Mbstring\\Mbstring' => $vendorDir . '/symfony/polyfill-mbstring/Mbstring.php',
@@ -3912,4 +3923,6 @@
     'phpDocumentor\\Reflection\\DocBlock\\Tag\\VarTag' => $vendorDir . '/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VarTag.php',
     'phpDocumentor\\Reflection\\DocBlock\\Tag\\VersionTag' => $vendorDir . '/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VersionTag.php',
     'phpDocumentor\\Reflection\\DocBlock\\Type\\Collection' => $vendorDir . '/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Type/Collection.php',
+    'sngrl\\SphinxSearch\\SphinxSearch' => $vendorDir . '/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearch.php',
+    'sngrl\\SphinxSearch\\SphinxSearchServiceProvider' => $vendorDir . '/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearchServiceProvider.php',
 );
Index: vendor/composer/autoload_files.php
===================================================================
--- vendor/composer/autoload_files.php	(revision 55)
+++ vendor/composer/autoload_files.php	(revision 57)
@@ -10,9 +10,9 @@
     '1d1b89d124cc9cb8219922c9d5569199' => $vendorDir . '/hamcrest/hamcrest-php/hamcrest/Hamcrest.php',
     '667aeda72477189d0494fecd327c3641' => $vendorDir . '/symfony/var-dumper/Resources/functions/dump.php',
     'a0edc8309cc5e1d60e3047b5df6b7052' => $vendorDir . '/guzzlehttp/psr7/src/functions_include.php',
-    'bd9634f2d41831496de0d3dfe4c94881' => $vendorDir . '/symfony/polyfill-php56/bootstrap.php',
     '2c102faa651ef8ea5874edb585946bce' => $vendorDir . '/swiftmailer/swiftmailer/lib/swift_required.php',
     'c964ee0ededf28c96ebd9db5099ef910' => $vendorDir . '/guzzlehttp/promises/src/functions_include.php',
+    'bd9634f2d41831496de0d3dfe4c94881' => $vendorDir . '/symfony/polyfill-php56/bootstrap.php',
     '37a3dc5111fe8f707ab4c132ef1dbc62' => $vendorDir . '/guzzlehttp/guzzle/src/functions_include.php',
     'e7223560d890eab89cda23685e711e2c' => $vendorDir . '/psy/psysh/src/Psy/functions.php',
     '5255c38a0faeba867671b61dfda6d864' => $vendorDir . '/paragonie/random_compat/lib/random.php',
Index: vendor/composer/autoload_namespaces.php
===================================================================
--- vendor/composer/autoload_namespaces.php	(revision 55)
+++ vendor/composer/autoload_namespaces.php	(revision 57)
@@ -6,9 +6,11 @@
 $baseDir = dirname($vendorDir);
 
 return array(
+    'sngrl\\SphinxSearch' => array($vendorDir . '/sngrl/sphinxsearch/src'),
     'phpDocumentor' => array($vendorDir . '/phpdocumentor/reflection-docblock/src'),
     'Xethron\\MigrationsGenerator' => array($vendorDir . '/xethron/migrations-generator/src'),
     'Way\\Generators' => array($vendorDir . '/way/generators/src', $vendorDir . '/xethron/laravel-4-generators/src'),
+    'Sphinx' => array($vendorDir . '/gigablah/sphinxphp/src'),
     'Solarium\\' => array($vendorDir . '/solarium/solarium/library'),
     'Prophecy\\' => array($vendorDir . '/phpspec/prophecy/src'),
     'PHPExcel' => array($vendorDir . '/phpoffice/phpexcel/Classes'),
Index: vendor/composer/autoload_static.php
===================================================================
--- vendor/composer/autoload_static.php	(revision 55)
+++ vendor/composer/autoload_static.php	(revision 57)
@@ -11,9 +11,9 @@
         '1d1b89d124cc9cb8219922c9d5569199' => __DIR__ . '/..' . '/hamcrest/hamcrest-php/hamcrest/Hamcrest.php',
         '667aeda72477189d0494fecd327c3641' => __DIR__ . '/..' . '/symfony/var-dumper/Resources/functions/dump.php',
         'a0edc8309cc5e1d60e3047b5df6b7052' => __DIR__ . '/..' . '/guzzlehttp/psr7/src/functions_include.php',
-        'bd9634f2d41831496de0d3dfe4c94881' => __DIR__ . '/..' . '/symfony/polyfill-php56/bootstrap.php',
         '2c102faa651ef8ea5874edb585946bce' => __DIR__ . '/..' . '/swiftmailer/swiftmailer/lib/swift_required.php',
         'c964ee0ededf28c96ebd9db5099ef910' => __DIR__ . '/..' . '/guzzlehttp/promises/src/functions_include.php',
+        'bd9634f2d41831496de0d3dfe4c94881' => __DIR__ . '/..' . '/symfony/polyfill-php56/bootstrap.php',
         '37a3dc5111fe8f707ab4c132ef1dbc62' => __DIR__ . '/..' . '/guzzlehttp/guzzle/src/functions_include.php',
         'e7223560d890eab89cda23685e711e2c' => __DIR__ . '/..' . '/psy/psysh/src/Psy/functions.php',
         '5255c38a0faeba867671b61dfda6d864' => __DIR__ . '/..' . '/paragonie/random_compat/lib/random.php',
@@ -312,6 +312,13 @@
     );
 
     public static $prefixesPsr0 = array (
+        's' => 
+        array (
+            'sngrl\\SphinxSearch' => 
+            array (
+                0 => __DIR__ . '/..' . '/sngrl/sphinxsearch/src',
+            ),
+        ),
         'p' => 
         array (
             'phpDocumentor' => 
@@ -336,6 +343,10 @@
         ),
         'S' => 
         array (
+            'Sphinx' => 
+            array (
+                0 => __DIR__ . '/..' . '/gigablah/sphinxphp/src',
+            ),
             'Solarium\\' => 
             array (
                 0 => __DIR__ . '/..' . '/solarium/solarium/library',
@@ -410,10 +421,13 @@
         'App\\Http\\Middleware\\VerifyCsrfToken' => __DIR__ . '/../..' . '/app/Http/Middleware/VerifyCsrfToken.php',
         'App\\Http\\Requests\\Request' => __DIR__ . '/../..' . '/app/Http/Requests/Request.php',
         'App\\Jobs\\Job' => __DIR__ . '/../..' . '/app/Jobs/Job.php',
+        'App\\Modules\\Batdongsansg24h\\Composers\\loadHeader' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Composers/loadHeader.php',
         'App\\Modules\\Batdongsansg24h\\Composers\\loadRegion' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Composers/loadRegion.php',
+        'App\\Modules\\Batdongsansg24h\\Composers\\loadRightContent' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Composers/loadRightContent.php',
         'App\\Modules\\Batdongsansg24h\\Composers\\partialProperties' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Composers/partialProperties.php',
         'App\\Modules\\Batdongsansg24h\\Controllers\\Ajax\\UserController' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Controllers/Ajax/UserController.php',
         'App\\Modules\\Batdongsansg24h\\Controllers\\AuthenController' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Controllers/AuthenController.php',
+        'App\\Modules\\Batdongsansg24h\\Controllers\\FilterController' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Controllers/FilterController.php',
         'App\\Modules\\Batdongsansg24h\\Controllers\\HomeController' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Controllers/HomeController.php',
         'App\\Modules\\Batdongsansg24h\\Controllers\\HomeCreateRequest' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Requests/HomeCreateRequest.php',
         'App\\Modules\\Batdongsansg24h\\Controllers\\HomeUpdateRequest' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Requests/HomeUpdateRequest.php',
@@ -421,6 +435,7 @@
         'App\\Modules\\Batdongsansg24h\\Controllers\\UserController' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Controllers/UserController.php',
         'App\\Modules\\Batdongsansg24h\\Enum' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Enum.php',
         'App\\Modules\\Batdongsansg24h\\Requests\\PropertyCreateRequest' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Requests/PropertyCreateRequest.php',
+        'App\\Modules\\Batdongsansg24h\\Requests\\PropertyUpdateRequest' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Requests/PropertyUpdateRequest.php',
         'App\\Modules\\Batdongsansg24h\\Requests\\UserCreateRequest' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Requests/UserCreateRequest.php',
         'App\\Modules\\Batdongsansg24h\\Requests\\UserUpdateRequest' => __DIR__ . '/../..' . '/app/Modules/Batdongsansg24h/Requests/UserUpdateRequest.php',
         'App\\Modules\\Core\\BDS_SG24h\\Providers\\RepositoryServiceProvider' => __DIR__ . '/../..' . '/app/Modules/Core/BDS_SG24h/Providers/RepositoryServiceProvider.php',
@@ -449,6 +464,7 @@
         'App\\Modules\\Core\\BaseRepositoryCustom\\BaseRepositoryCustomEloquent' => __DIR__ . '/../..' . '/app/Modules/Core/BaseRepositoryCustom/BaseRepositoryCustomEloquent.php',
         'App\\Modules\\Core\\Command\\BDSGoutteCommand' => __DIR__ . '/../..' . '/app/Modules/Core/Command/BDSGoutteCommand.php',
         'App\\Modules\\Core\\Command\\CommandServiceProvider' => __DIR__ . '/../..' . '/app/Modules/Core/Command/CommandServiceProvider.php',
+        'App\\Modules\\Core\\Command\\GenerateSiteMapCommand' => __DIR__ . '/../..' . '/app/Modules/Core/Command/GenerateSiteMapCommand.php',
         'App\\Modules\\Core\\Command\\GoutteBatDongSanContent' => __DIR__ . '/../..' . '/app/Modules/Core/Command/GoutteBatDongSanContent.php',
         'App\\Modules\\Core\\Command\\GoutteCommand' => __DIR__ . '/../..' . '/app/Modules/Core/Command/GoutteCommand.php',
         'App\\Modules\\Core\\Command\\GoutteContent' => __DIR__ . '/../..' . '/app/Modules/Core/Command/GoutteContent.php',
@@ -2598,9 +2614,12 @@
         'PHPExcel_Writer_PDF_mPDF' => __DIR__ . '/..' . '/phpoffice/phpexcel/Classes/PHPExcel/Writer/PDF/mPDF.php',
         'PHPExcel_Writer_PDF_tcPDF' => __DIR__ . '/..' . '/phpoffice/phpexcel/Classes/PHPExcel/Writer/PDF/tcPDF.php',
         'PHPUnit\\Framework\\Assert' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/Assert.php',
+        'PHPUnit\\Framework\\AssertionFailedError' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/AssertionFailedError.php',
         'PHPUnit\\Framework\\BaseTestListener' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/BaseTestListener.php',
+        'PHPUnit\\Framework\\Test' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/Test.php',
         'PHPUnit\\Framework\\TestCase' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/TestCase.php',
         'PHPUnit\\Framework\\TestListener' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/TestListener.php',
+        'PHPUnit\\Framework\\TestSuite' => __DIR__ . '/..' . '/phpunit/phpunit/src/ForwardCompatibility/TestSuite.php',
         'PHPUnit_Exception' => __DIR__ . '/..' . '/phpunit/phpunit/src/Exception.php',
         'PHPUnit_Extensions_GroupTestSuite' => __DIR__ . '/..' . '/phpunit/phpunit/src/Extensions/GroupTestSuite.php',
         'PHPUnit_Extensions_PhptTestCase' => __DIR__ . '/..' . '/phpunit/phpunit/src/Extensions/PhptTestCase.php',
@@ -3701,6 +3720,7 @@
         'Solarium\\Support\\DataFixtures\\FixtureLoader' => __DIR__ . '/..' . '/solarium/solarium/library/Solarium/Support/DataFixtures/FixtureLoader.php',
         'Solarium\\Support\\DataFixtures\\Loader' => __DIR__ . '/..' . '/solarium/solarium/library/Solarium/Support/DataFixtures/Loader.php',
         'Solarium\\Support\\DataFixtures\\Purger' => __DIR__ . '/..' . '/solarium/solarium/library/Solarium/Support/DataFixtures/Purger.php',
+        'Sphinx\\SphinxClient' => __DIR__ . '/..' . '/gigablah/sphinxphp/src/Sphinx/SphinxClient.php',
         'SuperClosure\\Analyzer\\AstAnalyzer' => __DIR__ . '/..' . '/jeremeamia/SuperClosure/src/Analyzer/AstAnalyzer.php',
         'SuperClosure\\Analyzer\\ClosureAnalyzer' => __DIR__ . '/..' . '/jeremeamia/SuperClosure/src/Analyzer/ClosureAnalyzer.php',
         'SuperClosure\\Analyzer\\Token' => __DIR__ . '/..' . '/jeremeamia/SuperClosure/src/Analyzer/Token.php',
@@ -3875,6 +3895,7 @@
         'Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcher' => __DIR__ . '/..' . '/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php',
         'Symfony\\Component\\EventDispatcher\\Debug\\TraceableEventDispatcherInterface' => __DIR__ . '/..' . '/symfony/event-dispatcher/Debug/TraceableEventDispatcherInterface.php',
         'Symfony\\Component\\EventDispatcher\\Debug\\WrappedListener' => __DIR__ . '/..' . '/symfony/event-dispatcher/Debug/WrappedListener.php',
+        'Symfony\\Component\\EventDispatcher\\DependencyInjection\\ExtractingEventDispatcher' => __DIR__ . '/..' . '/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php',
         'Symfony\\Component\\EventDispatcher\\DependencyInjection\\RegisterListenersPass' => __DIR__ . '/..' . '/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php',
         'Symfony\\Component\\EventDispatcher\\Event' => __DIR__ . '/..' . '/symfony/event-dispatcher/Event.php',
         'Symfony\\Component\\EventDispatcher\\EventDispatcher' => __DIR__ . '/..' . '/symfony/event-dispatcher/EventDispatcher.php',
@@ -4223,6 +4244,7 @@
         'Symfony\\Component\\Yaml\\Exception\\RuntimeException' => __DIR__ . '/..' . '/symfony/yaml/Exception/RuntimeException.php',
         'Symfony\\Component\\Yaml\\Inline' => __DIR__ . '/..' . '/symfony/yaml/Inline.php',
         'Symfony\\Component\\Yaml\\Parser' => __DIR__ . '/..' . '/symfony/yaml/Parser.php',
+        'Symfony\\Component\\Yaml\\Tag\\TaggedValue' => __DIR__ . '/..' . '/symfony/yaml/Tag/TaggedValue.php',
         'Symfony\\Component\\Yaml\\Unescaper' => __DIR__ . '/..' . '/symfony/yaml/Unescaper.php',
         'Symfony\\Component\\Yaml\\Yaml' => __DIR__ . '/..' . '/symfony/yaml/Yaml.php',
         'Symfony\\Polyfill\\Mbstring\\Mbstring' => __DIR__ . '/..' . '/symfony/polyfill-mbstring/Mbstring.php',
@@ -4302,6 +4324,8 @@
         'phpDocumentor\\Reflection\\DocBlock\\Tag\\VarTag' => __DIR__ . '/..' . '/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VarTag.php',
         'phpDocumentor\\Reflection\\DocBlock\\Tag\\VersionTag' => __DIR__ . '/..' . '/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VersionTag.php',
         'phpDocumentor\\Reflection\\DocBlock\\Type\\Collection' => __DIR__ . '/..' . '/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Type/Collection.php',
+        'sngrl\\SphinxSearch\\SphinxSearch' => __DIR__ . '/..' . '/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearch.php',
+        'sngrl\\SphinxSearch\\SphinxSearchServiceProvider' => __DIR__ . '/..' . '/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearchServiceProvider.php',
     );
 
     public static function getInitializer(ClassLoader $loader)
Index: vendor/composer/installed.json
===================================================================
--- vendor/composer/installed.json	(revision 55)
+++ vendor/composer/installed.json	(revision 57)
@@ -512,57 +512,6 @@
         ]
     },
     {
-        "name": "phpdocumentor/reflection-docblock",
-        "version": "2.0.4",
-        "version_normalized": "2.0.4.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
-            "reference": "d68dbdc53dc358a816f00b300704702b2eaff7b8"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/d68dbdc53dc358a816f00b300704702b2eaff7b8",
-            "reference": "d68dbdc53dc358a816f00b300704702b2eaff7b8",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.3.3"
-        },
-        "require-dev": {
-            "phpunit/phpunit": "~4.0"
-        },
-        "suggest": {
-            "dflydev/markdown": "~1.0",
-            "erusev/parsedown": "~1.0"
-        },
-        "time": "2015-02-03T12:10:50+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "2.0.x-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-0": {
-                "phpDocumentor": [
-                    "src/"
-                ]
-            }
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Mike van Riel",
-                "email": "mike.vanriel@naenius.com"
-            }
-        ]
-    },
-    {
         "name": "phpunit/php-text-template",
         "version": "1.2.1",
         "version_normalized": "1.2.1.0",
@@ -2312,118 +2261,6 @@
         ]
     },
     {
-        "name": "symfony/polyfill-util",
-        "version": "v1.3.0",
-        "version_normalized": "1.3.0.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/polyfill-util.git",
-            "reference": "746bce0fca664ac0a575e465f65c6643faddf7fb"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/polyfill-util/zipball/746bce0fca664ac0a575e465f65c6643faddf7fb",
-            "reference": "746bce0fca664ac0a575e465f65c6643faddf7fb",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.3.3"
-        },
-        "time": "2016-11-14T01:06:16+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "1.3-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Polyfill\\Util\\": ""
-            }
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Nicolas Grekas",
-                "email": "p@tchwork.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony utilities for portability of PHP codes",
-        "homepage": "https://symfony.com",
-        "keywords": [
-            "compat",
-            "compatibility",
-            "polyfill",
-            "shim"
-        ]
-    },
-    {
-        "name": "symfony/polyfill-php56",
-        "version": "v1.3.0",
-        "version_normalized": "1.3.0.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/polyfill-php56.git",
-            "reference": "1dd42b9b89556f18092f3d1ada22cb05ac85383c"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/polyfill-php56/zipball/1dd42b9b89556f18092f3d1ada22cb05ac85383c",
-            "reference": "1dd42b9b89556f18092f3d1ada22cb05ac85383c",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.3.3",
-            "symfony/polyfill-util": "~1.0"
-        },
-        "time": "2016-11-14T01:06:16+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "1.3-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Polyfill\\Php56\\": ""
-            },
-            "files": [
-                "bootstrap.php"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Nicolas Grekas",
-                "email": "p@tchwork.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony polyfill backporting some PHP 5.6+ features to lower PHP versions",
-        "homepage": "https://symfony.com",
-        "keywords": [
-            "compatibility",
-            "polyfill",
-            "portable",
-            "shim"
-        ]
-    },
-    {
         "name": "jeremeamia/SuperClosure",
         "version": "2.3.0",
         "version_normalized": "2.3.0.0",
@@ -2618,86 +2455,6 @@
         ]
     },
     {
-        "name": "monolog/monolog",
-        "version": "1.22.1",
-        "version_normalized": "1.22.1.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/Seldaek/monolog.git",
-            "reference": "1e044bc4b34e91743943479f1be7a1d5eb93add0"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/Seldaek/monolog/zipball/1e044bc4b34e91743943479f1be7a1d5eb93add0",
-            "reference": "1e044bc4b34e91743943479f1be7a1d5eb93add0",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.3.0",
-            "psr/log": "~1.0"
-        },
-        "provide": {
-            "psr/log-implementation": "1.0.0"
-        },
-        "require-dev": {
-            "aws/aws-sdk-php": "^2.4.9 || ^3.0",
-            "doctrine/couchdb": "~1.0@dev",
-            "graylog2/gelf-php": "~1.0",
-            "jakub-onderka/php-parallel-lint": "0.9",
-            "php-amqplib/php-amqplib": "~2.4",
-            "php-console/php-console": "^3.1.3",
-            "phpunit/phpunit": "~4.5",
-            "phpunit/phpunit-mock-objects": "2.3.0",
-            "ruflin/elastica": ">=0.90 <3.0",
-            "sentry/sentry": "^0.13",
-            "swiftmailer/swiftmailer": "~5.3"
-        },
-        "suggest": {
-            "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
-            "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
-            "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
-            "ext-mongo": "Allow sending log messages to a MongoDB server",
-            "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
-            "mongodb/mongodb": "Allow sending log messages to a MongoDB server via PHP Driver",
-            "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
-            "php-console/php-console": "Allow sending log messages to Google Chrome",
-            "rollbar/rollbar": "Allow sending log messages to Rollbar",
-            "ruflin/elastica": "Allow sending log messages to an Elastic Search server",
-            "sentry/sentry": "Allow sending log messages to a Sentry server"
-        },
-        "time": "2017-03-13T07:08:03+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "2.0.x-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Monolog\\": "src/Monolog"
-            }
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Jordi Boggiano",
-                "email": "j.boggiano@seld.be",
-                "homepage": "http://seld.be"
-            }
-        ],
-        "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
-        "homepage": "http://github.com/Seldaek/monolog",
-        "keywords": [
-            "log",
-            "logging",
-            "psr-3"
-        ]
-    },
-    {
         "name": "mtdowling/cron-expression",
         "version": "v1.2.0",
         "version_normalized": "1.2.0.0",
@@ -2744,67 +2501,6 @@
         ]
     },
     {
-        "name": "symfony/polyfill-mbstring",
-        "version": "v1.3.0",
-        "version_normalized": "1.3.0.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/polyfill-mbstring.git",
-            "reference": "e79d363049d1c2128f133a2667e4f4190904f7f4"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/e79d363049d1c2128f133a2667e4f4190904f7f4",
-            "reference": "e79d363049d1c2128f133a2667e4f4190904f7f4",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.3.3"
-        },
-        "suggest": {
-            "ext-mbstring": "For best performance"
-        },
-        "time": "2016-11-14T01:06:16+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "1.3-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Polyfill\\Mbstring\\": ""
-            },
-            "files": [
-                "bootstrap.php"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Nicolas Grekas",
-                "email": "p@tchwork.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony polyfill for the Mbstring extension",
-        "homepage": "https://symfony.com",
-        "keywords": [
-            "compatibility",
-            "mbstring",
-            "polyfill",
-            "portable",
-            "shim"
-        ]
-    },
-    {
         "name": "nesbot/carbon",
         "version": "1.22.1",
         "version_normalized": "1.22.1.0",
@@ -2966,68 +2662,6 @@
         ]
     },
     {
-        "name": "symfony/event-dispatcher",
-        "version": "v3.2.8",
-        "version_normalized": "3.2.8.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/event-dispatcher.git",
-            "reference": "b8a401f733b43251e1d088c589368b2a94155e40"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/b8a401f733b43251e1d088c589368b2a94155e40",
-            "reference": "b8a401f733b43251e1d088c589368b2a94155e40",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.5.9"
-        },
-        "require-dev": {
-            "psr/log": "~1.0",
-            "symfony/config": "~2.8|~3.0",
-            "symfony/dependency-injection": "~2.8|~3.0",
-            "symfony/expression-language": "~2.8|~3.0",
-            "symfony/stopwatch": "~2.8|~3.0"
-        },
-        "suggest": {
-            "symfony/dependency-injection": "",
-            "symfony/http-kernel": ""
-        },
-        "time": "2017-05-01T14:58:48+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "3.2-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Component\\EventDispatcher\\": ""
-            },
-            "exclude-from-classmap": [
-                "/Tests/"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Fabien Potencier",
-                "email": "fabien@symfony.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony EventDispatcher Component",
-        "homepage": "https://symfony.com"
-    },
-    {
         "name": "prettus/l5-repository",
         "version": "2.6.18",
         "version_normalized": "2.6.18.0",
@@ -3270,70 +2904,6 @@
         ]
     },
     {
-        "name": "guzzlehttp/guzzle",
-        "version": "6.2.3",
-        "version_normalized": "6.2.3.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/guzzle/guzzle.git",
-            "reference": "8d6c6cc55186db87b7dc5009827429ba4e9dc006"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/guzzle/guzzle/zipball/8d6c6cc55186db87b7dc5009827429ba4e9dc006",
-            "reference": "8d6c6cc55186db87b7dc5009827429ba4e9dc006",
-            "shasum": ""
-        },
-        "require": {
-            "guzzlehttp/promises": "^1.0",
-            "guzzlehttp/psr7": "^1.4",
-            "php": ">=5.5"
-        },
-        "require-dev": {
-            "ext-curl": "*",
-            "phpunit/phpunit": "^4.0",
-            "psr/log": "^1.0"
-        },
-        "time": "2017-02-28T22:50:30+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "6.2-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "files": [
-                "src/functions_include.php"
-            ],
-            "psr-4": {
-                "GuzzleHttp\\": "src/"
-            }
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Michael Dowling",
-                "email": "mtdowling@gmail.com",
-                "homepage": "https://github.com/mtdowling"
-            }
-        ],
-        "description": "Guzzle is a PHP HTTP client library",
-        "homepage": "http://guzzlephp.org/",
-        "keywords": [
-            "client",
-            "curl",
-            "framework",
-            "http",
-            "http client",
-            "rest",
-            "web service"
-        ]
-    },
-    {
         "name": "symfony/dom-crawler",
         "version": "v3.0.9",
         "version_normalized": "3.0.9.0",
@@ -3392,65 +2962,6 @@
         "homepage": "https://symfony.com"
     },
     {
-        "name": "symfony/browser-kit",
-        "version": "v3.2.8",
-        "version_normalized": "3.2.8.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/browser-kit.git",
-            "reference": "9fab1ab6f77b77f3df5fc5250fc6956811699b57"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/browser-kit/zipball/9fab1ab6f77b77f3df5fc5250fc6956811699b57",
-            "reference": "9fab1ab6f77b77f3df5fc5250fc6956811699b57",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.5.9",
-            "symfony/dom-crawler": "~2.8|~3.0"
-        },
-        "require-dev": {
-            "symfony/css-selector": "~2.8|~3.0",
-            "symfony/process": "~2.8|~3.0"
-        },
-        "suggest": {
-            "symfony/process": ""
-        },
-        "time": "2017-04-12T14:13:17+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "3.2-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Component\\BrowserKit\\": ""
-            },
-            "exclude-from-classmap": [
-                "/Tests/"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Fabien Potencier",
-                "email": "fabien@symfony.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony BrowserKit Component",
-        "homepage": "https://symfony.com"
-    },
-    {
         "name": "fabpot/goutte",
         "version": "v3.2.1",
         "version_normalized": "3.2.1.0",
@@ -3569,63 +3080,6 @@
         ]
     },
     {
-        "name": "symfony/yaml",
-        "version": "v3.2.8",
-        "version_normalized": "3.2.8.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/yaml.git",
-            "reference": "acec26fcf7f3031e094e910b94b002fa53d4e4d6"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/yaml/zipball/acec26fcf7f3031e094e910b94b002fa53d4e4d6",
-            "reference": "acec26fcf7f3031e094e910b94b002fa53d4e4d6",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.5.9"
-        },
-        "require-dev": {
-            "symfony/console": "~2.8|~3.0"
-        },
-        "suggest": {
-            "symfony/console": "For validating YAML files using the lint command"
-        },
-        "time": "2017-05-01T14:55:58+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "3.2-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Component\\Yaml\\": ""
-            },
-            "exclude-from-classmap": [
-                "/Tests/"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
-        ],
-        "authors": [
-            {
-                "name": "Fabien Potencier",
-                "email": "fabien@symfony.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony Yaml Component",
-        "homepage": "https://symfony.com"
-    },
-    {
         "name": "sebastian/recursion-context",
         "version": "1.0.5",
         "version_normalized": "1.0.5.0",
@@ -3963,80 +3417,6 @@
         ]
     },
     {
-        "name": "phpunit/phpunit",
-        "version": "4.8.35",
-        "version_normalized": "4.8.35.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/sebastianbergmann/phpunit.git",
-            "reference": "791b1a67c25af50e230f841ee7a9c6eba507dc87"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/791b1a67c25af50e230f841ee7a9c6eba507dc87",
-            "reference": "791b1a67c25af50e230f841ee7a9c6eba507dc87",
-            "shasum": ""
-        },
-        "require": {
-            "ext-dom": "*",
-            "ext-json": "*",
-            "ext-pcre": "*",
-            "ext-reflection": "*",
-            "ext-spl": "*",
-            "php": ">=5.3.3",
-            "phpspec/prophecy": "^1.3.1",
-            "phpunit/php-code-coverage": "~2.1",
-            "phpunit/php-file-iterator": "~1.4",
-            "phpunit/php-text-template": "~1.2",
-            "phpunit/php-timer": "^1.0.6",
-            "phpunit/phpunit-mock-objects": "~2.3",
-            "sebastian/comparator": "~1.2.2",
-            "sebastian/diff": "~1.2",
-            "sebastian/environment": "~1.3",
-            "sebastian/exporter": "~1.2",
-            "sebastian/global-state": "~1.0",
-            "sebastian/version": "~1.0",
-            "symfony/yaml": "~2.1|~3.0"
-        },
-        "suggest": {
-            "phpunit/php-invoker": "~1.1"
-        },
-        "time": "2017-02-06T05:18:07+00:00",
-        "bin": [
-            "phpunit"
-        ],
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "4.8.x-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "classmap": [
-                "src/"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "BSD-3-Clause"
-        ],
-        "authors": [
-            {
-                "name": "Sebastian Bergmann",
-                "email": "sebastian@phpunit.de",
-                "role": "lead"
-            }
-        ],
-        "description": "The PHP Unit Testing framework.",
-        "homepage": "https://phpunit.de/",
-        "keywords": [
-            "phpunit",
-            "testing",
-            "xunit"
-        ]
-    },
-    {
         "name": "ignasbernotas/laravel-model-generator",
         "version": "1.2.3",
         "version_normalized": "1.2.3.0",
@@ -4079,65 +3459,8 @@
             "laravel",
             "model",
             "schema"
-        ]
-    },
-    {
-        "name": "symfony/class-loader",
-        "version": "v3.2.8",
-        "version_normalized": "3.2.8.0",
-        "source": {
-            "type": "git",
-            "url": "https://github.com/symfony/class-loader.git",
-            "reference": "fc4c04bfd17130a9dccfded9578353f311967da7"
-        },
-        "dist": {
-            "type": "zip",
-            "url": "https://api.github.com/repos/symfony/class-loader/zipball/fc4c04bfd17130a9dccfded9578353f311967da7",
-            "reference": "fc4c04bfd17130a9dccfded9578353f311967da7",
-            "shasum": ""
-        },
-        "require": {
-            "php": ">=5.5.9"
-        },
-        "require-dev": {
-            "symfony/finder": "~2.8|~3.0",
-            "symfony/polyfill-apcu": "~1.1"
-        },
-        "suggest": {
-            "symfony/polyfill-apcu": "For using ApcClassLoader on HHVM"
-        },
-        "time": "2017-04-12T14:13:17+00:00",
-        "type": "library",
-        "extra": {
-            "branch-alias": {
-                "dev-master": "3.2-dev"
-            }
-        },
-        "installation-source": "dist",
-        "autoload": {
-            "psr-4": {
-                "Symfony\\Component\\ClassLoader\\": ""
-            },
-            "exclude-from-classmap": [
-                "/Tests/"
-            ]
-        },
-        "notification-url": "https://packagist.org/downloads/",
-        "license": [
-            "MIT"
         ],
-        "authors": [
-            {
-                "name": "Fabien Potencier",
-                "email": "fabien@symfony.com"
-            },
-            {
-                "name": "Symfony Community",
-                "homepage": "https://symfony.com/contributors"
-            }
-        ],
-        "description": "Symfony ClassLoader Component",
-        "homepage": "https://symfony.com"
+        "abandoned": "reliese/laravel"
     },
     {
         "name": "doctrine/collections",
@@ -4601,27 +3924,104 @@
         ]
     },
     {
-        "name": "sebastian/diff",
-        "version": "1.4.2",
-        "version_normalized": "1.4.2.0",
+        "name": "monolog/monolog",
+        "version": "1.23.0",
+        "version_normalized": "1.23.0.0",
         "source": {
             "type": "git",
-            "url": "https://github.com/sebastianbergmann/diff.git",
-            "reference": "3c7d21999e815cdfac70c6c7d79d3a9cb1bc7bc2"
+            "url": "https://github.com/Seldaek/monolog.git",
+            "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/3c7d21999e815cdfac70c6c7d79d3a9cb1bc7bc2",
-            "reference": "3c7d21999e815cdfac70c6c7d79d3a9cb1bc7bc2",
+            "url": "https://api.github.com/repos/Seldaek/monolog/zipball/fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
+            "reference": "fd8c787753b3a2ad11bc60c063cff1358a32a3b4",
             "shasum": ""
         },
         "require": {
-            "php": "^5.3.3 || ^7.0"
+            "php": ">=5.3.0",
+            "psr/log": "~1.0"
+        },
+        "provide": {
+            "psr/log-implementation": "1.0.0"
         },
         "require-dev": {
-            "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
+            "aws/aws-sdk-php": "^2.4.9 || ^3.0",
+            "doctrine/couchdb": "~1.0@dev",
+            "graylog2/gelf-php": "~1.0",
+            "jakub-onderka/php-parallel-lint": "0.9",
+            "php-amqplib/php-amqplib": "~2.4",
+            "php-console/php-console": "^3.1.3",
+            "phpunit/phpunit": "~4.5",
+            "phpunit/phpunit-mock-objects": "2.3.0",
+            "ruflin/elastica": ">=0.90 <3.0",
+            "sentry/sentry": "^0.13",
+            "swiftmailer/swiftmailer": "^5.3|^6.0"
         },
-        "time": "2017-05-18T13:44:30+00:00",
+        "suggest": {
+            "aws/aws-sdk-php": "Allow sending log messages to AWS services like DynamoDB",
+            "doctrine/couchdb": "Allow sending log messages to a CouchDB server",
+            "ext-amqp": "Allow sending log messages to an AMQP server (1.0+ required)",
+            "ext-mongo": "Allow sending log messages to a MongoDB server",
+            "graylog2/gelf-php": "Allow sending log messages to a GrayLog2 server",
+            "mongodb/mongodb": "Allow sending log messages to a MongoDB server via PHP Driver",
+            "php-amqplib/php-amqplib": "Allow sending log messages to an AMQP server using php-amqplib",
+            "php-console/php-console": "Allow sending log messages to Google Chrome",
+            "rollbar/rollbar": "Allow sending log messages to Rollbar",
+            "ruflin/elastica": "Allow sending log messages to an Elastic Search server",
+            "sentry/sentry": "Allow sending log messages to a Sentry server"
+        },
+        "time": "2017-06-19T01:22:40+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "2.0.x-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Monolog\\": "src/Monolog"
+            }
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Jordi Boggiano",
+                "email": "j.boggiano@seld.be",
+                "homepage": "http://seld.be"
+            }
+        ],
+        "description": "Sends your logs to files, sockets, inboxes, databases and various web services",
+        "homepage": "http://github.com/Seldaek/monolog",
+        "keywords": [
+            "log",
+            "logging",
+            "psr-3"
+        ]
+    },
+    {
+        "name": "symfony/polyfill-util",
+        "version": "v1.4.0",
+        "version_normalized": "1.4.0.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/polyfill-util.git",
+            "reference": "ebccbde4aad410f6438d86d7d261c6b4d2b9a51d"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/polyfill-util/zipball/ebccbde4aad410f6438d86d7d261c6b4d2b9a51d",
+            "reference": "ebccbde4aad410f6438d86d7d261c6b4d2b9a51d",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.3.3"
+        },
+        "time": "2017-06-09T08:25:21+00:00",
         "type": "library",
         "extra": {
             "branch-alias": {
@@ -4630,43 +4030,230 @@
         },
         "installation-source": "dist",
         "autoload": {
-            "classmap": [
-                "src/"
+            "psr-4": {
+                "Symfony\\Polyfill\\Util\\": ""
+            }
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Nicolas Grekas",
+                "email": "p@tchwork.com"
+            },
+            {
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
+            }
+        ],
+        "description": "Symfony utilities for portability of PHP codes",
+        "homepage": "https://symfony.com",
+        "keywords": [
+            "compat",
+            "compatibility",
+            "polyfill",
+            "shim"
+        ]
+    },
+    {
+        "name": "symfony/polyfill-php56",
+        "version": "v1.4.0",
+        "version_normalized": "1.4.0.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/polyfill-php56.git",
+            "reference": "bc0b7d6cb36b10cfabb170a3e359944a95174929"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/polyfill-php56/zipball/bc0b7d6cb36b10cfabb170a3e359944a95174929",
+            "reference": "bc0b7d6cb36b10cfabb170a3e359944a95174929",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.3.3",
+            "symfony/polyfill-util": "~1.0"
+        },
+        "time": "2017-06-09T08:25:21+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "1.4-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Symfony\\Polyfill\\Php56\\": ""
+            },
+            "files": [
+                "bootstrap.php"
             ]
         },
         "notification-url": "https://packagist.org/downloads/",
         "license": [
-            "BSD-3-Clause"
+            "MIT"
         ],
         "authors": [
             {
-                "name": "Kore Nordmann",
-                "email": "mail@kore-nordmann.de"
+                "name": "Nicolas Grekas",
+                "email": "p@tchwork.com"
             },
             {
-                "name": "Sebastian Bergmann",
-                "email": "sebastian@phpunit.de"
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
             }
         ],
-        "description": "Diff implementation",
-        "homepage": "https://github.com/sebastianbergmann/diff",
+        "description": "Symfony polyfill backporting some PHP 5.6+ features to lower PHP versions",
+        "homepage": "https://symfony.com",
         "keywords": [
-            "diff"
+            "compatibility",
+            "polyfill",
+            "portable",
+            "shim"
+        ]
+    },
+    {
+        "name": "symfony/polyfill-mbstring",
+        "version": "v1.4.0",
+        "version_normalized": "1.4.0.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/polyfill-mbstring.git",
+            "reference": "f29dca382a6485c3cbe6379f0c61230167681937"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/polyfill-mbstring/zipball/f29dca382a6485c3cbe6379f0c61230167681937",
+            "reference": "f29dca382a6485c3cbe6379f0c61230167681937",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.3.3"
+        },
+        "suggest": {
+            "ext-mbstring": "For best performance"
+        },
+        "time": "2017-06-09T14:24:12+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "1.4-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Symfony\\Polyfill\\Mbstring\\": ""
+            },
+            "files": [
+                "bootstrap.php"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Nicolas Grekas",
+                "email": "p@tchwork.com"
+            },
+            {
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
+            }
+        ],
+        "description": "Symfony polyfill for the Mbstring extension",
+        "homepage": "https://symfony.com",
+        "keywords": [
+            "compatibility",
+            "mbstring",
+            "polyfill",
+            "portable",
+            "shim"
         ]
     },
     {
+        "name": "symfony/event-dispatcher",
+        "version": "v3.3.4",
+        "version_normalized": "3.3.4.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/event-dispatcher.git",
+            "reference": "67535f1e3fd662bdc68d7ba317c93eecd973617e"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/event-dispatcher/zipball/67535f1e3fd662bdc68d7ba317c93eecd973617e",
+            "reference": "67535f1e3fd662bdc68d7ba317c93eecd973617e",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.5.9"
+        },
+        "conflict": {
+            "symfony/dependency-injection": "<3.3"
+        },
+        "require-dev": {
+            "psr/log": "~1.0",
+            "symfony/config": "~2.8|~3.0",
+            "symfony/dependency-injection": "~3.3",
+            "symfony/expression-language": "~2.8|~3.0",
+            "symfony/stopwatch": "~2.8|~3.0"
+        },
+        "suggest": {
+            "symfony/dependency-injection": "",
+            "symfony/http-kernel": ""
+        },
+        "time": "2017-06-09T14:53:08+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "3.3-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Symfony\\Component\\EventDispatcher\\": ""
+            },
+            "exclude-from-classmap": [
+                "/Tests/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Fabien Potencier",
+                "email": "fabien@symfony.com"
+            },
+            {
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
+            }
+        ],
+        "description": "Symfony EventDispatcher Component",
+        "homepage": "https://symfony.com"
+    },
+    {
         "name": "intervention/image",
-        "version": "2.3.13",
-        "version_normalized": "2.3.13.0",
+        "version": "2.4.0",
+        "version_normalized": "2.4.0.0",
         "source": {
             "type": "git",
             "url": "https://github.com/Intervention/image.git",
-            "reference": "15a517f052ee15d373ffa145c9642d5fec7ddf5c"
+            "reference": "322a4ade249467179c50a3e50eda8760ff3af2a3"
         },
         "dist": {
             "type": "zip",
-            "url": "https://api.github.com/repos/Intervention/image/zipball/15a517f052ee15d373ffa145c9642d5fec7ddf5c",
-            "reference": "15a517f052ee15d373ffa145c9642d5fec7ddf5c",
+            "url": "https://api.github.com/repos/Intervention/image/zipball/322a4ade249467179c50a3e50eda8760ff3af2a3",
+            "reference": "322a4ade249467179c50a3e50eda8760ff3af2a3",
             "shasum": ""
         },
         "require": {
@@ -4676,18 +4263,26 @@
         },
         "require-dev": {
             "mockery/mockery": "~0.9.2",
-            "phpunit/phpunit": "3.*"
+            "phpunit/phpunit": "^4.8 || ^5.7"
         },
         "suggest": {
             "ext-gd": "to use GD library based image processing.",
             "ext-imagick": "to use Imagick based image processing.",
             "intervention/imagecache": "Caching extension for the Intervention Image library"
         },
-        "time": "2017-04-23T18:45:36+00:00",
+        "time": "2017-07-03T15:50:40+00:00",
         "type": "library",
         "extra": {
             "branch-alias": {
                 "dev-master": "2.3-dev"
+            },
+            "laravel": {
+                "providers": [
+                    "Intervention\\Image\\ImageServiceProvider"
+                ],
+                "aliases": {
+                    "Image": "Intervention\\Image\\Facades\\Image"
+                }
             }
         },
         "installation-source": "dist",
@@ -4703,8 +4298,8 @@
         "authors": [
             {
                 "name": "Oliver Vogel",
-                "email": "oliver@olivervogel.net",
-                "homepage": "http://olivervogel.net/"
+                "email": "oliver@olivervogel.com",
+                "homepage": "http://olivervogel.com/"
             }
         ],
         "description": "Image handling and manipulation library with support for Laravel integration",
@@ -4717,5 +4312,525 @@
             "thumbnail",
             "watermark"
         ]
+    },
+    {
+        "name": "symfony/yaml",
+        "version": "v3.3.4",
+        "version_normalized": "3.3.4.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/yaml.git",
+            "reference": "1f93a8d19b8241617f5074a123e282575b821df8"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/yaml/zipball/1f93a8d19b8241617f5074a123e282575b821df8",
+            "reference": "1f93a8d19b8241617f5074a123e282575b821df8",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.5.9"
+        },
+        "require-dev": {
+            "symfony/console": "~2.8|~3.0"
+        },
+        "suggest": {
+            "symfony/console": "For validating YAML files using the lint command"
+        },
+        "time": "2017-06-15T12:58:50+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "3.3-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Symfony\\Component\\Yaml\\": ""
+            },
+            "exclude-from-classmap": [
+                "/Tests/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Fabien Potencier",
+                "email": "fabien@symfony.com"
+            },
+            {
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
+            }
+        ],
+        "description": "Symfony Yaml Component",
+        "homepage": "https://symfony.com"
+    },
+    {
+        "name": "sebastian/diff",
+        "version": "1.4.3",
+        "version_normalized": "1.4.3.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/sebastianbergmann/diff.git",
+            "reference": "7f066a26a962dbe58ddea9f72a4e82874a3975a4"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/7f066a26a962dbe58ddea9f72a4e82874a3975a4",
+            "reference": "7f066a26a962dbe58ddea9f72a4e82874a3975a4",
+            "shasum": ""
+        },
+        "require": {
+            "php": "^5.3.3 || ^7.0"
+        },
+        "require-dev": {
+            "phpunit/phpunit": "^4.8.35 || ^5.7 || ^6.0"
+        },
+        "time": "2017-05-22T07:24:03+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "1.4-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "classmap": [
+                "src/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "BSD-3-Clause"
+        ],
+        "authors": [
+            {
+                "name": "Kore Nordmann",
+                "email": "mail@kore-nordmann.de"
+            },
+            {
+                "name": "Sebastian Bergmann",
+                "email": "sebastian@phpunit.de"
+            }
+        ],
+        "description": "Diff implementation",
+        "homepage": "https://github.com/sebastianbergmann/diff",
+        "keywords": [
+            "diff"
+        ]
+    },
+    {
+        "name": "phpdocumentor/reflection-docblock",
+        "version": "2.0.5",
+        "version_normalized": "2.0.5.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/phpDocumentor/ReflectionDocBlock.git",
+            "reference": "e6a969a640b00d8daa3c66518b0405fb41ae0c4b"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/phpDocumentor/ReflectionDocBlock/zipball/e6a969a640b00d8daa3c66518b0405fb41ae0c4b",
+            "reference": "e6a969a640b00d8daa3c66518b0405fb41ae0c4b",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.3.3"
+        },
+        "require-dev": {
+            "phpunit/phpunit": "~4.0"
+        },
+        "suggest": {
+            "dflydev/markdown": "~1.0",
+            "erusev/parsedown": "~1.0"
+        },
+        "time": "2016-01-25T08:17:30+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "2.0.x-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-0": {
+                "phpDocumentor": [
+                    "src/"
+                ]
+            }
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Mike van Riel",
+                "email": "mike.vanriel@naenius.com"
+            }
+        ]
+    },
+    {
+        "name": "phpunit/phpunit",
+        "version": "4.8.36",
+        "version_normalized": "4.8.36.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/sebastianbergmann/phpunit.git",
+            "reference": "46023de9a91eec7dfb06cc56cb4e260017298517"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/46023de9a91eec7dfb06cc56cb4e260017298517",
+            "reference": "46023de9a91eec7dfb06cc56cb4e260017298517",
+            "shasum": ""
+        },
+        "require": {
+            "ext-dom": "*",
+            "ext-json": "*",
+            "ext-pcre": "*",
+            "ext-reflection": "*",
+            "ext-spl": "*",
+            "php": ">=5.3.3",
+            "phpspec/prophecy": "^1.3.1",
+            "phpunit/php-code-coverage": "~2.1",
+            "phpunit/php-file-iterator": "~1.4",
+            "phpunit/php-text-template": "~1.2",
+            "phpunit/php-timer": "^1.0.6",
+            "phpunit/phpunit-mock-objects": "~2.3",
+            "sebastian/comparator": "~1.2.2",
+            "sebastian/diff": "~1.2",
+            "sebastian/environment": "~1.3",
+            "sebastian/exporter": "~1.2",
+            "sebastian/global-state": "~1.0",
+            "sebastian/version": "~1.0",
+            "symfony/yaml": "~2.1|~3.0"
+        },
+        "suggest": {
+            "phpunit/php-invoker": "~1.1"
+        },
+        "time": "2017-06-21T08:07:12+00:00",
+        "bin": [
+            "phpunit"
+        ],
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "4.8.x-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "classmap": [
+                "src/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "BSD-3-Clause"
+        ],
+        "authors": [
+            {
+                "name": "Sebastian Bergmann",
+                "email": "sebastian@phpunit.de",
+                "role": "lead"
+            }
+        ],
+        "description": "The PHP Unit Testing framework.",
+        "homepage": "https://phpunit.de/",
+        "keywords": [
+            "phpunit",
+            "testing",
+            "xunit"
+        ]
+    },
+    {
+        "name": "symfony/class-loader",
+        "version": "v3.3.4",
+        "version_normalized": "3.3.4.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/class-loader.git",
+            "reference": "386a294d621576302e7cc36965d6ed53b8c73c4f"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/class-loader/zipball/386a294d621576302e7cc36965d6ed53b8c73c4f",
+            "reference": "386a294d621576302e7cc36965d6ed53b8c73c4f",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.5.9"
+        },
+        "require-dev": {
+            "symfony/finder": "~2.8|~3.0",
+            "symfony/polyfill-apcu": "~1.1"
+        },
+        "suggest": {
+            "symfony/polyfill-apcu": "For using ApcClassLoader on HHVM"
+        },
+        "time": "2017-06-02T09:51:43+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "3.3-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Symfony\\Component\\ClassLoader\\": ""
+            },
+            "exclude-from-classmap": [
+                "/Tests/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Fabien Potencier",
+                "email": "fabien@symfony.com"
+            },
+            {
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
+            }
+        ],
+        "description": "Symfony ClassLoader Component",
+        "homepage": "https://symfony.com"
+    },
+    {
+        "name": "guzzlehttp/guzzle",
+        "version": "6.3.0",
+        "version_normalized": "6.3.0.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/guzzle/guzzle.git",
+            "reference": "f4db5a78a5ea468d4831de7f0bf9d9415e348699"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/guzzle/guzzle/zipball/f4db5a78a5ea468d4831de7f0bf9d9415e348699",
+            "reference": "f4db5a78a5ea468d4831de7f0bf9d9415e348699",
+            "shasum": ""
+        },
+        "require": {
+            "guzzlehttp/promises": "^1.0",
+            "guzzlehttp/psr7": "^1.4",
+            "php": ">=5.5"
+        },
+        "require-dev": {
+            "ext-curl": "*",
+            "phpunit/phpunit": "^4.0 || ^5.0",
+            "psr/log": "^1.0"
+        },
+        "suggest": {
+            "psr/log": "Required for using the Log middleware"
+        },
+        "time": "2017-06-22T18:50:49+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "6.2-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "files": [
+                "src/functions_include.php"
+            ],
+            "psr-4": {
+                "GuzzleHttp\\": "src/"
+            }
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Michael Dowling",
+                "email": "mtdowling@gmail.com",
+                "homepage": "https://github.com/mtdowling"
+            }
+        ],
+        "description": "Guzzle is a PHP HTTP client library",
+        "homepage": "http://guzzlephp.org/",
+        "keywords": [
+            "client",
+            "curl",
+            "framework",
+            "http",
+            "http client",
+            "rest",
+            "web service"
+        ]
+    },
+    {
+        "name": "symfony/browser-kit",
+        "version": "v3.3.4",
+        "version_normalized": "3.3.4.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/symfony/browser-kit.git",
+            "reference": "3a4435e79a8401746e8525e98039199d0924b4e5"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/symfony/browser-kit/zipball/3a4435e79a8401746e8525e98039199d0924b4e5",
+            "reference": "3a4435e79a8401746e8525e98039199d0924b4e5",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.5.9",
+            "symfony/dom-crawler": "~2.8|~3.0"
+        },
+        "require-dev": {
+            "symfony/css-selector": "~2.8|~3.0",
+            "symfony/process": "~2.8|~3.0"
+        },
+        "suggest": {
+            "symfony/process": ""
+        },
+        "time": "2017-06-24T09:29:48+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "3.3-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-4": {
+                "Symfony\\Component\\BrowserKit\\": ""
+            },
+            "exclude-from-classmap": [
+                "/Tests/"
+            ]
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "MIT"
+        ],
+        "authors": [
+            {
+                "name": "Fabien Potencier",
+                "email": "fabien@symfony.com"
+            },
+            {
+                "name": "Symfony Community",
+                "homepage": "https://symfony.com/contributors"
+            }
+        ],
+        "description": "Symfony BrowserKit Component",
+        "homepage": "https://symfony.com"
+    },
+    {
+        "name": "gigablah/sphinxphp",
+        "version": "2.0.8",
+        "version_normalized": "2.0.8.0",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/gigablah/sphinxphp.git",
+            "reference": "6d5e97fdd33c1129ca372203d1330827c1cbc46c"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/gigablah/sphinxphp/zipball/6d5e97fdd33c1129ca372203d1330827c1cbc46c",
+            "reference": "6d5e97fdd33c1129ca372203d1330827c1cbc46c",
+            "shasum": ""
+        },
+        "require": {
+            "php": ">=5.3.0"
+        },
+        "require-dev": {
+            "phpunit/phpunit": "3.7.*",
+            "satooshi/php-coveralls": "dev-master"
+        },
+        "time": "2013-08-22T08:05:44+00:00",
+        "type": "library",
+        "extra": {
+            "branch-alias": {
+                "dev-master": "2.0.x-dev"
+            }
+        },
+        "installation-source": "dist",
+        "autoload": {
+            "psr-0": {
+                "Sphinx": "src"
+            }
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "GPL-2.0"
+        ],
+        "authors": [
+            {
+                "name": "Andrew Aksyonoff",
+                "homepage": "http://sphinxsearch.com/"
+            }
+        ],
+        "description": "Sphinx Search PHP API",
+        "homepage": "http://sphinxsearch.com/",
+        "keywords": [
+            "api",
+            "search",
+            "sphinx"
+        ]
+    },
+    {
+        "name": "sngrl/sphinxsearch",
+        "version": "dev-master",
+        "version_normalized": "9999999-dev",
+        "source": {
+            "type": "git",
+            "url": "https://github.com/sngrl/sphinxsearch.git",
+            "reference": "1e0f891d06eeb7aa59c0d12db76f38afb062fda4"
+        },
+        "dist": {
+            "type": "zip",
+            "url": "https://api.github.com/repos/sngrl/sphinxsearch/zipball/1e0f891d06eeb7aa59c0d12db76f38afb062fda4",
+            "reference": "1e0f891d06eeb7aa59c0d12db76f38afb062fda4",
+            "shasum": ""
+        },
+        "require": {
+            "gigablah/sphinxphp": "2.0.8",
+            "illuminate/support": "~5.0",
+            "php": ">=5.3.0"
+        },
+        "time": "2016-06-22T08:45:38+00:00",
+        "type": "library",
+        "installation-source": "dist",
+        "autoload": {
+            "psr-0": {
+                "sngrl\\SphinxSearch": "src/"
+            }
+        },
+        "notification-url": "https://packagist.org/downloads/",
+        "license": [
+            "Apache-2.0"
+        ],
+        "authors": [
+            {
+                "name": "sngrl",
+                "email": "reserved@mail.ru"
+            }
+        ],
+        "description": "Laravel package to query Sphinxsearch in Laravel 5",
+        "homepage": "http://github.com/sngrl/sphinxsearch",
+        "keywords": [
+            "laravel",
+            "laravel 5",
+            "sphinx",
+            "sphinxsearch"
+        ]
     }
 ]
Index: vendor/gigablah/sphinxphp/.coveralls.yml
===================================================================
--- vendor/gigablah/sphinxphp/.coveralls.yml	(nonexistent)
+++ vendor/gigablah/sphinxphp/.coveralls.yml	(revision 57)
@@ -0,0 +1,4 @@
+# for php-coveralls
+service_name: travis-ci
+src_dir: src
+coverage_clover: build/logs/clover.xml
Index: vendor/gigablah/sphinxphp/.gitattributes
===================================================================
--- vendor/gigablah/sphinxphp/.gitattributes	(nonexistent)
+++ vendor/gigablah/sphinxphp/.gitattributes	(revision 57)
@@ -0,0 +1 @@
+* text=auto
Index: vendor/gigablah/sphinxphp/.gitignore
===================================================================
--- vendor/gigablah/sphinxphp/.gitignore	(nonexistent)
+++ vendor/gigablah/sphinxphp/.gitignore	(revision 57)
@@ -0,0 +1,11 @@
+.DS_Store
+.DS_Store?
+._*
+.Spotlight-V100
+.Trashes
+Icon?
+ehthumbs.db
+Thumbs.db
+/vendor
+composer.lock
+composer.phar
Index: vendor/gigablah/sphinxphp/.travis.yml
===================================================================
--- vendor/gigablah/sphinxphp/.travis.yml	(nonexistent)
+++ vendor/gigablah/sphinxphp/.travis.yml	(revision 57)
@@ -0,0 +1,32 @@
+language: php
+
+php:
+  - 5.3
+  - 5.4
+  - 5.5
+
+before_install:
+    - wget http://sphinxsearch.com/files/sphinx-2.0.8-release.tar.gz
+    - tar xzf sphinx-2.0.8-release.tar.gz
+    - cd sphinx-2.0.8-release
+    - wget http://snowball.tartarus.org/dist/libstemmer_c.tgz
+    - tar xzf libstemmer_c.tgz
+    - ./configure --prefix=/usr/local/sphinx --with-libstemmer --with-iconv --with-mysql --enable-id64 --quiet
+    - make -j --quiet
+    - sudo make install
+    - cd ..
+
+before_script:
+    - mysql -e "CREATE DATABASE IF NOT EXISTS sphinx;"
+    - mysql -e "SOURCE `pwd`/tests/Sphinx/Tests/Fixtures/sphinxtest.sql"
+    - sudo /usr/local/sphinx/bin/indexer -c tests/Sphinx/Tests/Fixtures/sphinxtest.conf --all
+    - sudo /usr/local/sphinx/bin/searchd -c tests/Sphinx/Tests/Fixtures/sphinxtest.conf
+    - composer self-update
+    - composer install --prefer-source --no-interaction --dev
+
+script:
+    - mkdir -p build/logs
+    - phpunit
+
+after_script:
+    - php vendor/bin/coveralls -v
Index: vendor/gigablah/sphinxphp/README.md
===================================================================
--- vendor/gigablah/sphinxphp/README.md	(nonexistent)
+++ vendor/gigablah/sphinxphp/README.md	(revision 57)
@@ -0,0 +1,42 @@
+Sphinx Search PHP Client
+========================
+
+[![Build Status](https://travis-ci.org/gigablah/sphinxphp.png?branch=2.0.x)](https://travis-ci.org/gigablah/sphinxphp) [![Coverage Status](https://coveralls.io/repos/gigablah/sphinxphp/badge.png?branch=2.0.x)](https://coveralls.io/r/gigablah/sphinxphp?branch=2.0.x)
+
+[Sphinx] [1] is an open source full-text search engine.
+
+This project contains a refactored Sphinx PHP client with some minor differences:
+
+* Compatibility with [Composer] [2]
+* Compliance with [PSR standards] [3]
+* Fluent (chainable) setter functions
+* PHPUnit tests
+
+Installation
+------------
+
+Create a `composer.json` file and run `composer install`:
+
+    {
+        "require": {
+            "gigablah/sphinxphp": "2.0.*"
+        }
+    }
+
+Usage
+-----
+
+Refer to the official [documentation] [4].
+
+Note: public functions have been changed to lower camelcase in accordance with PSR-1.
+
+License
+-------
+
+GNU General Public License version 2 ([GPL-2.0] [5])
+
+[1]: http://sphinxsearch.com/
+[2]: http://getcomposer.org/
+[3]: https://github.com/php-fig/fig-standards
+[4]: http://sphinxsearch.com/docs/
+[5]: http://www.gnu.org/licenses/gpl-2.0.html
Index: vendor/gigablah/sphinxphp/composer.json
===================================================================
--- vendor/gigablah/sphinxphp/composer.json	(nonexistent)
+++ vendor/gigablah/sphinxphp/composer.json	(revision 57)
@@ -0,0 +1,31 @@
+{
+    "name": "gigablah/sphinxphp",
+    "type": "library",
+    "description": "Sphinx Search PHP API",
+    "keywords": ["sphinx","search","api"],
+    "homepage": "http://sphinxsearch.com/",
+    "license": "GPL-2.0",
+    "authors": [
+        {
+            "name": "Andrew Aksyonoff",
+            "homepage": "http://sphinxsearch.com/"
+        }
+    ],
+    "require": {
+        "php": ">=5.3.0"
+    },
+    "require-dev": {
+        "phpunit/phpunit": "3.7.*",
+        "satooshi/php-coveralls": "dev-master"
+    },
+    "autoload": {
+        "psr-0": {
+            "Sphinx": "src"
+        }
+    },
+    "extra": {
+        "branch-alias": {
+            "dev-master": "2.0.x-dev"
+        }
+    }
+}
Index: vendor/gigablah/sphinxphp/phpunit.xml.dist
===================================================================
--- vendor/gigablah/sphinxphp/phpunit.xml.dist	(nonexistent)
+++ vendor/gigablah/sphinxphp/phpunit.xml.dist	(revision 57)
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<phpunit backupGlobals="false"
+         backupStaticAttributes="false"
+         colors="true"
+         convertErrorsToExceptions="true"
+         convertNoticesToExceptions="true"
+         convertWarningsToExceptions="true"
+         processIsolation="false"
+         stopOnError="false"
+         stopOnFailure="false"
+         stopOnIncomplete="false"
+         stopOnSkipped="false"
+         syntaxCheck="false"
+         bootstrap="tests/bootstrap.php"
+         strict="true">
+    <testsuites>
+        <testsuite name="SphinxClient Test Suite">
+            <directory>./tests/Sphinx</directory>
+        </testsuite>
+    </testsuites>
+    <filter>
+        <whitelist>
+            <directory>./src</directory>
+            <exclude>
+                <directory>./build</directory>
+                <directory>./vendor</directory>
+                <directory>./tests</directory>
+            </exclude>
+        </whitelist>
+    </filter>
+    <logging>
+        <log type="coverage-clover" target="build/logs/clover.xml"/>
+        <log type="junit" target="build/logs/junit.xml" logIncompleteSkipped="false"/>
+    </logging>
+</phpunit>
Index: vendor/gigablah/sphinxphp/src/Sphinx/SphinxClient.php
===================================================================
--- vendor/gigablah/sphinxphp/src/Sphinx/SphinxClient.php	(nonexistent)
+++ vendor/gigablah/sphinxphp/src/Sphinx/SphinxClient.php	(revision 57)
@@ -0,0 +1,2418 @@
+<?php
+/**
+ * Copyright (c) 2001-2012, Andrew Aksyonoff
+ * Copyright (c) 2008-2012, Sphinx Technologies Inc
+ * All rights reserved
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License. You should have
+ * received a copy of the GPL license along with this program; if you
+ * did not, you can find it at http://www.gnu.org/
+ */
+
+namespace Sphinx;
+
+/**
+ * PHP version of Sphinx searchd client.
+ *
+ * @author Andrew Aksyonoff <andrew.aksyonoff@gmail.com>
+ */
+class SphinxClient
+{
+    /**
+     * Known searchd commands.
+     */
+    const SEARCHD_COMMAND_SEARCH     = 0;
+    const SEARCHD_COMMAND_EXCERPT    = 1;
+    const SEARCHD_COMMAND_UPDATE     = 2;
+    const SEARCHD_COMMAND_KEYWORDS   = 3;
+    const SEARCHD_COMMAND_PERSIST    = 4;
+    const SEARCHD_COMMAND_STATUS     = 5;
+    const SEARCHD_COMMAND_FLUSHATTRS = 7;
+
+    /**
+     * Current client-side command implementation versions.
+     */
+    const VER_COMMAND_SEARCH         = 0x119;
+    const VER_COMMAND_EXCERPT        = 0x104;
+    const VER_COMMAND_UPDATE         = 0x102;
+    const VER_COMMAND_KEYWORDS       = 0x100;
+    const VER_COMMAND_STATUS         = 0x100;
+    const VER_COMMAND_QUERY          = 0x100;
+    const VER_COMMAND_FLUSHATTRS     = 0x100;
+
+    /**
+     * Known searchd status codes.
+     */
+    const SEARCHD_OK                 = 0;
+    const SEARCHD_ERROR              = 1;
+    const SEARCHD_RETRY              = 2;
+    const SEARCHD_WARNING            = 3;
+
+    /**
+     * Known match modes.
+     */
+    const SPH_MATCH_ALL              = 0;
+    const SPH_MATCH_ANY              = 1;
+    const SPH_MATCH_PHRASE           = 2;
+    const SPH_MATCH_BOOLEAN          = 3;
+    const SPH_MATCH_EXTENDED         = 4;
+    const SPH_MATCH_FULLSCAN         = 5;
+    const SPH_MATCH_EXTENDED2        = 6; // extended engine V2 (TEMPORARY, WILL BE REMOVED)
+
+    /**
+     * Known ranking modes (ext2 only).
+     */
+    const SPH_RANK_PROXIMITY_BM25    = 0; // default mode, phrase proximity major factor and BM25 minor one
+    const SPH_RANK_BM25              = 1; // statistical mode, BM25 ranking only (faster but worse quality)
+    const SPH_RANK_NONE              = 2; // no ranking, all matches get a weight of 1
+    const SPH_RANK_WORDCOUNT         = 3; // simple word-count weighting, rank is a weighted sum of per-field keyword occurence counts
+    const SPH_RANK_PROXIMITY         = 4;
+    const SPH_RANK_MATCHANY          = 5;
+    const SPH_RANK_FIELDMASK         = 6;
+    const SPH_RANK_SPH04             = 7;
+    const SPH_RANK_EXPR              = 8;
+    const SPH_RANK_TOTAL             = 9;
+
+    /**
+     * Known sort modes.
+     */
+    const SPH_SORT_RELEVANCE         = 0;
+    const SPH_SORT_ATTR_DESC         = 1;
+    const SPH_SORT_ATTR_ASC          = 2;
+    const SPH_SORT_TIME_SEGMENTS     = 3;
+    const SPH_SORT_EXTENDED          = 4;
+    const SPH_SORT_EXPR              = 5;
+
+    /**
+     * Known filter types.
+     */
+    const SPH_FILTER_VALUES          = 0;
+    const SPH_FILTER_RANGE           = 1;
+    const SPH_FILTER_FLOATRANGE      = 2;
+
+    /**
+     * Known attribute types.
+     */
+    const SPH_ATTR_INTEGER           = 1;
+    const SPH_ATTR_TIMESTAMP         = 2;
+    const SPH_ATTR_ORDINAL           = 3;
+    const SPH_ATTR_BOOL              = 4;
+    const SPH_ATTR_FLOAT             = 5;
+    const SPH_ATTR_BIGINT            = 6;
+    const SPH_ATTR_STRING            = 7;
+    const SPH_ATTR_MULTI             = 0x40000001;
+    const SPH_ATTR_MULTI64           = 0x40000002;
+
+    /**
+     * Known grouping functions.
+     */
+    const SPH_GROUPBY_DAY            = 0;
+    const SPH_GROUPBY_WEEK           = 1;
+    const SPH_GROUPBY_MONTH          = 2;
+    const SPH_GROUPBY_YEAR           = 3;
+    const SPH_GROUPBY_ATTR           = 4;
+    const SPH_GROUPBY_ATTRPAIR       = 5;
+
+    public $host;          // searchd host (default is "localhost")
+    public $port;          // searchd port (default is 9312)
+    public $path;          // socket path
+    public $socket;        // socket connection
+    public $offset;        // how many records to seek from result-set start (default is 0)
+    public $limit;         // how many records to return from result-set starting at offset (default is 20)
+    public $mode;          // query matching mode (default is SPH_MATCH_ALL)
+    public $weights;       // per-field weights (default is 1 for all fields)
+    public $sort;          // match sorting mode (default is SPH_SORT_RELEVANCE)
+    public $sortby;        // attribute to sort by (default is "")
+    public $minid;         // min ID to match (default is 0, which means no limit)
+    public $maxid;         // max ID to match (default is 0, which means no limit)
+    public $filters;       // search filters
+    public $groupby;       // group-by attribute name
+    public $groupfunc;     // group-by function (to pre-process group-by attribute value with)
+    public $groupsort;     // group-by sorting clause (to sort groups in result set with)
+    public $groupdistinct; // group-by count-distinct attribute
+    public $maxmatches;    // max matches to retrieve
+    public $cutoff;        // cutoff to stop searching at (default is 0)
+    public $retrycount;    // distributed retries count
+    public $retrydelay;    // distributed retries delay
+    public $anchor;        // geographical anchor point
+    public $indexweights;  // per-index weights
+    public $ranker;        // ranking mode (default is SPH_RANK_PROXIMITY_BM25)
+    public $rankexpr;      // ranking mode expression (for SPH_RANK_EXPR)
+    public $maxquerytime;  // max query time, milliseconds (default is 0, do not limit)
+    public $fieldweights;  // per-field-name weights
+    public $overrides;     // per-query attribute values overrides
+    public $select;        // select-list (attributes or expressions, with optional aliases)
+    public $error;         // last error message
+    public $warning;       // last warning message
+    public $connerror;     // connection error vs remote error flag
+    public $reqs;          // requests array for multi-query
+    public $mbenc;         // stored mbstring encoding
+    public $arrayresult;   // whether $result["matches"] should be a hash or an array
+    public $timeout;       // connect timeout
+
+    /**
+     * Create a new client object and fill defaults
+     */
+    public function __construct()
+    {
+        // per-client-object settings
+        $this->host          = 'localhost';
+        $this->port          = 9312;
+        $this->path          = false;
+        $this->socket        = false;
+        // per-query settings
+        $this->offset        = 0;
+        $this->limit         = 20;
+        $this->mode          = self::SPH_MATCH_ALL;
+        $this->weights       = array();
+        $this->sort          = self::SPH_SORT_RELEVANCE;
+        $this->sortby        = '';
+        $this->minid         = 0;
+        $this->maxid         = 0;
+        $this->filters       = array();
+        $this->groupby       = '';
+        $this->groupfunc     = self::SPH_GROUPBY_DAY;
+        $this->groupsort     = '@group desc';
+        $this->groupdistinct = '';
+        $this->maxmatches    = 1000;
+        $this->cutoff        = 0;
+        $this->retrycount    = 0;
+        $this->retrydelay    = 0;
+        $this->anchor        = array();
+        $this->indexweights  = array();
+        $this->ranker        = self::SPH_RANK_PROXIMITY_BM25;
+        $this->rankexpr      = '';
+        $this->maxquerytime  = 0;
+        $this->fieldweights  = array();
+        $this->overrides     = array();
+        $this->select        = '*';
+        // per-reply fields (for single-query case)
+        $this->error         = '';
+        $this->warning       = '';
+        $this->connerror     = false;
+        // requests storage (for multi-query case)
+        $this->reqs          = array();
+        $this->mbenc         = '';
+        $this->arrayresult   = false;
+        $this->timeout       = 0;
+    }
+
+    /**
+     * Close the socket upon exit
+     */
+    public function __destruct()
+    {
+        if ($this->socket !== false) {
+            fclose($this->socket);
+        }
+    }
+
+    /**
+     * Creates a SphinxClient object. Chainable
+     *
+     * @return SphinxClient
+     */
+    public static function create()
+    {
+        return new static();
+    }
+
+    /**
+     * Get last error message
+     *
+     * @return string
+     */
+    public function getLastError()
+    {
+        return $this->error;
+    }
+
+    /**
+     * Get last warning message
+     *
+     * @return string
+     */
+    public function getLastWarning()
+    {
+        return $this->warning;
+    }
+
+    /**
+     * Get last error flag, to tell network connection errors from searchd errors or broken responses
+     *
+     * @return boolean
+     */
+    public function isConnectError()
+    {
+        return $this->connerror;
+    }
+
+    /**
+     * Set searchd host name and port
+     *
+     * @param string  $host
+     * @param integer $port
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When host name or port number is invalid
+     */
+    public function setServer($host, $port = 0)
+    {
+        if (!is_string($host)) {
+            throw new \InvalidArgumentException('Host name must be a string.');
+        }
+
+        if ($host[0] === '/') {
+            $this->path = 'unix://' . $host;
+
+            return $this;
+        }
+
+        if (substr($host, 0, 7) === 'unix://') {
+            $this->path = $host;
+
+            return $this;
+        }
+
+        $this->host = $host;
+
+        $port = intval($port);
+        if ($port < 0 || $port >= 65536) {
+            throw new \InvalidArgumentException('Port number must be an integer between 0 and 65536.');
+        }
+
+        $this->port = $port ?: 9312;
+
+        $this->path = '';
+
+        return $this;
+    }
+
+    /**
+     * Set server connection timeout
+     *
+     * @param integer $timeout
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When $timeout is negative
+     */
+    public function setConnectTimeout($timeout)
+    {
+        $timeout = intval($timeout);
+        if ($timeout < 0) {
+            throw new \InvalidArgumentException('Timeout cannot be negative.');
+        }
+
+        $this->timeout = $timeout;
+
+        return $this;
+    }
+
+    /**
+     * Write message to socket
+     *
+     * @param resource $handle
+     * @param string   $data
+     * @param integer  $length
+     *
+     * @return boolean
+     */
+    private function send($handle, $data, $length)
+    {
+        if (feof($handle) || fwrite($handle, $data, $length) !== $length) {
+            $this->error = 'connection unexpectedly closed (timed out?)';
+
+            $this->connerror = true;
+
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * Enter mbstring workaround mode, when function overloading is enabled
+     */
+    private function mbPush()
+    {
+        $this->mbenc = '';
+        if (((int) ini_get('mbstring.func_overload')) & 2) {
+            $this->mbenc = mb_internal_encoding();
+            mb_internal_encoding('latin1');
+        }
+    }
+
+    /**
+     * Leave mbstring workaround mode
+     */
+    private function mbPop()
+    {
+        if ($this->mbenc) {
+            mb_internal_encoding($this->mbenc);
+        }
+    }
+
+    /**
+     * Connect to searchd server
+     *
+     * @return resource|false
+     */
+    private function connect()
+    {
+        if ($this->socket !== false) {
+            // we are in persistent connection mode, so we have a socket
+            // however, need to check whether it's still alive
+            if (!@feof($this->socket)) {
+                return $this->socket;
+            }
+
+            // force reopen
+            $this->socket = false;
+        }
+
+        $errno = 0;
+        $errstr = '';
+        $this->connerror = false;
+
+        if ($this->path) {
+            $host = $this->path;
+            $port = 0;
+        } else {
+            $host = $this->host;
+            $port = $this->port;
+        }
+
+        if ($this->timeout <= 0) {
+            $fp = @fsockopen($host, $port, $errno, $errstr);
+        } else {
+            $fp = @fsockopen($host, $port, $errno, $errstr, $this->timeout);
+        }
+
+        if (!$fp) {
+            if ($this->path) {
+                $location = $this->path;
+            } else {
+                $location = $this->host . ':' . $this->port;
+            }
+
+            $errstr = trim($errstr);
+            $this->error     = sprintf('connection to %s failed (errno=%d, msg=%s)', $location, $errno, $errstr);
+            $this->connerror = true;
+
+            return false;
+        }
+
+        // send client version
+        // this is a subtle part. we must do it before (!) reading back from searchd.
+        // because otherwise under some conditions (reported on FreeBSD for instance)
+        // TCP stack could throttle write-write-read pattern because of Nagle.
+        if (!$this->send($fp, pack('N', 1), 4)) {
+            fclose($fp);
+            $this->error = 'failed to send client protocol version';
+
+            return false;
+        }
+
+        // check version
+        list(, $v) = unpack('N*', fread($fp, 4));
+        $v = (int) $v;
+        if ($v < 1) {
+            fclose($fp);
+            $this->error = sprintf('expected searchd protocol version 1+, got version \'%d\'', $v);
+
+            return false;
+        }
+
+        return $fp;
+    }
+
+    /**
+     * Get and check response packet from searchd server
+     *
+     * @param resource $fp        socket connection
+     * @param string   $clientVer client version in hex
+     *
+     * @return string|false
+     */
+    private function getResponse($fp, $clientVer)
+    {
+        $response = '';
+        $len      = 0;
+
+        $header = fread($fp, 8);
+        if (strlen($header) === 8) {
+            list($status, $ver, $len) = array_values(unpack('n2a/Nb', $header));
+            $left = $len;
+            while ($left > 0 && !feof($fp)) {
+                $chunk = fread($fp, min(8192, $left));
+                if ($chunk) {
+                    $response .= $chunk;
+                    $left -= strlen($chunk);
+                }
+            }
+        }
+
+        if ($this->socket === false) {
+            fclose($fp);
+        }
+
+        // check response
+        $read = strlen($response);
+        if (!$response || $read != $len) {
+            $this->error = $len
+                ? sprintf('failed to read searchd response (status=%d, ver=%d, len=%d, read=%d)', $status, $ver, $len, $read)
+                : 'received zero-sized searchd response';
+
+            return false;
+        }
+
+        // check status
+        if ($status === self::SEARCHD_WARNING) {
+            list(, $wlen)  = unpack('N*', substr($response, 0, 4));
+            $this->warning = substr($response, 4, $wlen);
+
+            return substr($response, 4 + $wlen);
+        }
+
+        if ($status === self::SEARCHD_ERROR) {
+            $this->error = 'searchd error: ' . substr($response, 4);
+
+            return false;
+        }
+
+        if ($status === self::SEARCHD_RETRY) {
+            $this->error = 'temporary searchd error: ' . substr($response, 4);
+
+            return false;
+        }
+
+        if ($status !== self::SEARCHD_OK) {
+            $this->error = sprintf('unknown status code \'%d\'', $status);
+
+            return false;
+        }
+
+        // check version
+        if ($ver < $clientVer) {
+            $this->warning = sprintf(
+                'searchd command v.%d.%d older than client\'s v.%d.%d, some options might not work',
+                $ver >> 8,
+                $ver & 0xff,
+                $clientVer >> 8,
+                $clientVer & 0xff
+            );
+        }
+
+        return $response;
+    }
+
+    /**
+     * Set offset and count into result set, optionally set max-matches and cutoff limits
+     *
+     * @param integer $offset
+     * @param integer $limit
+     * @param integer $max
+     * @param integer $cutoff
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When offset, limit, max or cutoff is outside valid ranges
+     */
+    public function setLimits($offset, $limit, $max = 0, $cutoff = 0)
+    {
+        $offset = intval($offset);
+        $limit  = intval($limit);
+        $max    = intval($max);
+        $cutoff = intval($cutoff);
+
+        if ($offset < 0) {
+            throw new \InvalidArgumentException('Offset cannot be negative.');
+        }
+
+        if ($limit <= 0) {
+            throw new \InvalidArgumentException('Limit must be positive.');
+        }
+
+        if ($max < 0) {
+            throw new \InvalidArgumentException('Maximum matches cannot be negative.');
+        }
+
+        if ($cutoff < 0) {
+            throw new \InvalidArgumentException('Cutoff cannot be negative.');
+        }
+
+        $this->offset = $offset;
+        $this->limit  = $limit;
+
+        if ($max) {
+            $this->maxmatches = $max;
+        }
+
+        if ($cutoff) {
+            $this->cutoff = $cutoff;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Set maximum query time, in milliseconds, per-index. 0 means "do not limit"
+     *
+     * @param integer $max
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When $max is negative
+     */
+    public function setMaxQueryTime($max)
+    {
+        $max = intval($max);
+        if ($max < 0) {
+            throw new \InvalidArgumentException('Maximum query time cannot be negative.');
+        }
+
+        $this->maxquerytime = $max;
+
+        return $this;
+    }
+
+    /**
+     * Set matching mode
+     *
+     * @param integer $mode
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When match mode is invalid
+     */
+    public function setMatchMode($mode)
+    {
+        if (!in_array(
+            $mode,
+            array(
+                self::SPH_MATCH_ALL,
+                self::SPH_MATCH_ANY,
+                self::SPH_MATCH_PHRASE,
+                self::SPH_MATCH_BOOLEAN,
+                self::SPH_MATCH_EXTENDED,
+                self::SPH_MATCH_FULLSCAN,
+                self::SPH_MATCH_EXTENDED2
+            )
+        )) {
+            throw new \InvalidArgumentException('Matching mode is invalid.');
+        }
+
+        $this->mode = $mode;
+
+        return $this;
+    }
+
+    /**
+     * Set ranking mode
+     *
+     * @param integer $ranker
+     * @param string  $rankexpr
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When ranking mode or expression is invalid
+     */
+    public function setRankingMode($ranker, $rankexpr = '')
+    {
+        if (!in_array(
+            $ranker,
+            array(
+                self::SPH_RANK_PROXIMITY_BM25,
+                self::SPH_RANK_BM25,
+                self::SPH_RANK_NONE,
+                self::SPH_RANK_WORDCOUNT,
+                self::SPH_RANK_PROXIMITY,
+                self::SPH_RANK_MATCHANY,
+                self::SPH_RANK_FIELDMASK,
+                self::SPH_RANK_SPH04,
+                self::SPH_RANK_EXPR,
+                self::SPH_RANK_TOTAL
+            )
+        )) {
+            throw new \InvalidArgumentException('Ranking mode is invalid.');
+        }
+
+        if (!is_string($rankexpr)) {
+            throw new \InvalidArgumentException('Ranking expression must be a string.');
+        }
+
+        if ($ranker === self::SPH_RANK_EXPR && !$rankexpr) {
+            throw new \InvalidArgumentException('Current ranking mode must have a ranking expression.');
+        }
+
+        $this->ranker   = $ranker;
+        $this->rankexpr = $rankexpr;
+
+        return $this;
+    }
+
+    /**
+     * Set matches sorting mode
+     *
+     * @param integer $mode
+     * @param string  $sortby
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When sorting mode or expression is invalid
+     */
+    public function setSortMode($mode, $sortby = '')
+    {
+        if (!in_array(
+            $mode,
+            array(
+                self::SPH_SORT_RELEVANCE,
+                self::SPH_SORT_ATTR_DESC,
+                self::SPH_SORT_ATTR_ASC,
+                self::SPH_SORT_TIME_SEGMENTS,
+                self::SPH_SORT_EXTENDED,
+                self::SPH_SORT_EXPR
+            )
+        )) {
+            throw new \InvalidArgumentException('Sorting mode is invalid.');
+        }
+
+        if (!is_string($sortby)) {
+            throw new \InvalidArgumentException('Sorting expression must be a string.');
+        }
+
+        if ($mode !== self::SPH_SORT_RELEVANCE && !$sortby) {
+            throw new \InvalidArgumentException('Current sorting mode must have a sorting expression.');
+        }
+
+        $this->sort   = $mode;
+        $this->sortby = $sortby;
+
+        return $this;
+    }
+
+    /**
+     * Bind per-field weights by order
+     *
+     * DEPRECATED; use SetFieldWeights() instead
+     *
+     * @param array $weights
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When weight is invalid
+     */
+    public function setWeights(array $weights)
+    {
+        foreach ($weights as $weight) {
+            if (!is_int($weight)) {
+                throw new \InvalidArgumentException('Weight must be an integer.');
+            }
+        }
+
+        $this->weights = $weights;
+
+        return $this;
+    }
+
+    /**
+     * Bind per-field weights by name
+     *
+     * @param array $weights
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When field name or weight is invalid
+     */
+    public function setFieldWeights(array $weights)
+    {
+        foreach ($weights as $name => $weight) {
+            if (!is_string($name)) {
+                throw new \InvalidArgumentException('Field name must be a string.');
+            }
+
+            if (!is_int($weight)) {
+                throw new \InvalidArgumentException('Field weight must be an integer.');
+            }
+        }
+
+        $this->fieldweights = $weights;
+
+        return $this;
+    }
+
+    /**
+     * Bind per-index weights by name
+     *
+     * @param array $weights
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When index name or weight is invalid
+     */
+    public function setIndexWeights(array $weights)
+    {
+        foreach ($weights as $index => $weight) {
+            if (!is_string($index)) {
+                throw new \InvalidArgumentException('Index name must be a string.');
+            }
+
+            if (!is_int($weight)) {
+                throw new \InvalidArgumentException('Index weight must be an integer.');
+            }
+        }
+
+        $this->indexweights = $weights;
+
+        return $this;
+    }
+
+    /**
+     * Limit the ID range; only match records if document ID is between $min and $max (inclusive)
+     *
+     * @param integer $min minimum document ID
+     * @param integer $max maximum document ID
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When $min or $max are invalid
+     */
+    public function setIdRange($min, $max)
+    {
+        if (!is_numeric($min)) {
+            throw new \InvalidArgumentException('Minimum ID must be numeric.');
+        }
+
+        if (!is_numeric($max)) {
+            throw new \InvalidArgumentException('Maximum ID must be numeric.');
+        }
+
+        if ($min > $max) {
+            throw new \InvalidArgumentException('Minimum ID cannot be larger than maximum ID.');
+        }
+
+        $this->minid = $min;
+        $this->maxid = $max;
+
+        return $this;
+    }
+
+    /**
+     * Set values filter; only match records where $attribute value is in (or not in) the given set
+     *
+     * @param string  $attribute attribute name
+     * @param array   $values    value set
+     * @param boolean $exclude   whether the filter is exclusive or inclusive
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When attribute name or value array is invalid
+     */
+    public function setFilter($attribute, array $values, $exclude = false)
+    {
+        if (!is_string($attribute)) {
+            throw new \InvalidArgumentException('Attribute name must be a string.');
+        }
+
+        if (!count($values)) {
+            throw new \InvalidArgumentException('Values array must not be empty.');
+        }
+
+        foreach ($values as $value) {
+            if (!is_numeric($value)) {
+                throw new \InvalidArgumentException('Value must be numeric.');
+            }
+        }
+
+        $exclude = (Boolean) $exclude;
+        $this->filters[] = array(
+            'type' => self::SPH_FILTER_VALUES,
+            'attr' => $attribute,
+            'exclude' => $exclude,
+            'values' => $values
+        );
+
+        return $this;
+    }
+
+    /**
+     * Set range filter; only match records if $attribute value between $min and $max (inclusive)
+     *
+     * @param string  $attribute attribute name
+     * @param integer $min       minimum attribute value
+     * @param integer $max       maximum attribute value
+     * @param boolean $exclude   whether the filter is exclusive or inclusive
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When $attribute, $min, $max or $exclude is invalid
+     */
+    public function setFilterRange($attribute, $min, $max, $exclude = false)
+    {
+        if (!is_string($attribute)) {
+            throw new \InvalidArgumentException('Attribute name must be a string.');
+        }
+
+        if (!is_numeric($min)) {
+            throw new \InvalidArgumentException('Minimum value must be numeric.');
+        }
+
+        if (!is_numeric($max)) {
+            throw new \InvalidArgumentException('Maximum value must be numeric.');
+        }
+
+        if ($min > $max) {
+            throw new \InvalidArgumentException('Minimum value cannot be larger than maximum value.');
+        }
+
+        $exclude = (Boolean) $exclude;
+        $this->filters[] = array(
+            'type' => self::SPH_FILTER_RANGE,
+            'attr' => $attribute,
+            'exclude' => $exclude,
+            'min' => $min,
+            'max' => $max
+        );
+
+        return $this;
+    }
+
+    /**
+     * Set float range filter; only match records if $attribute value between $min and $max (inclusive)
+     *
+     * @param string  $attribute attribute name
+     * @param float   $min       minimum attribute value
+     * @param float   $max       maximum attribute value
+     * @param boolean $exclude   whether the filter is exclusive or inclusive
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When $attribute, $min, $max or $exclude is invalid
+     */
+    public function setFilterFloatRange($attribute, $min, $max, $exclude = false)
+    {
+        if (!is_string($attribute)) {
+            throw new \InvalidArgumentException('Attribute name must be a string.');
+        }
+
+        if (!is_numeric($min)) {
+            throw new \InvalidArgumentException('Minimum value must be a float.');
+        }
+
+        if (!is_numeric($max)) {
+            throw new \InvalidArgumentException('Maximum value must be a float.');
+        }
+
+        if ($min > $max) {
+            throw new \InvalidArgumentException('Minimum value cannot be larger than maximum value.');
+        }
+
+        $exclude = (Boolean) $exclude;
+        $this->filters[] = array(
+            'type' => self::SPH_FILTER_FLOATRANGE,
+            'attr' => $attribute,
+            'exclude' => $exclude,
+            'min' => $min,
+            'max' => $max
+        );
+
+        return $this;
+    }
+
+    /**
+     * Set up anchor point for geosphere distance calculations. Required to use @geodist in filters and sorting
+     *
+     * @param string $attrlat  latitude attribute name
+     * @param string $attrlong longitude attribute name
+     * @param float  $lat      anchor point latitude (in radians)
+     * @param float  $long     anchor point longitude (in radians)
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When attribute names or coordinates are invalid
+     */
+    public function setGeoAnchor($attrlat, $attrlong, $lat, $long)
+    {
+        if (!is_string($attrlat)) {
+            throw new \InvalidArgumentException('Latitude attribute name must be a string.');
+        }
+
+        if (!is_string($attrlong)) {
+            throw new \InvalidArgumentException('Longitude attribute name must be a string.');
+        }
+
+        if (!is_numeric($lat)) {
+            throw new \InvalidArgumentException('Latitude must be a float.');
+        }
+
+        if (!is_numeric($long)) {
+            throw new \InvalidArgumentException('Longitude must be a float.');
+        }
+
+        $this->anchor = array(
+            'attrlat' => $attrlat,
+            'attrlong' => $attrlong,
+            'lat' => $lat,
+            'long' => $long
+        );
+
+        return $this;
+    }
+
+    /**
+     * Set grouping attribute and function
+     *
+     * @param string  $attribute attribute name
+     * @param integer $func      grouping function
+     * @param string  $groupsort group sorting clause
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When attribute name, group clause or function is invalid
+     */
+    public function setGroupBy($attribute, $func, $groupsort = '@group desc')
+    {
+        if (!is_string($attribute)) {
+            throw new \InvalidArgumentException('Attribute name must be a string.');
+        }
+
+        if (!is_string($groupsort)) {
+            throw new \InvalidArgumentException('Group sorting clause must be a string.');
+        }
+
+        if (!in_array(
+            $func,
+            array(
+                self::SPH_GROUPBY_DAY,
+                self::SPH_GROUPBY_WEEK,
+                self::SPH_GROUPBY_MONTH,
+                self::SPH_GROUPBY_YEAR,
+                self::SPH_GROUPBY_ATTR,
+                self::SPH_GROUPBY_ATTRPAIR
+            )
+        )) {
+            throw new \InvalidArgumentException('Grouping function is invalid.');
+        }
+
+        $this->groupby   = $attribute;
+        $this->groupfunc = $func;
+        $this->groupsort = $groupsort;
+
+        return $this;
+    }
+
+    /**
+     * Set count-distinct attribute for group-by queries
+     *
+     * @param string $attribute attribute name
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When attribute name is invalid
+     */
+    public function setGroupDistinct($attribute)
+    {
+        if (!is_string($attribute)) {
+            throw new \InvalidArgumentException('Attribute name must be a string.');
+        }
+
+        $this->groupdistinct = $attribute;
+
+        return $this;
+    }
+
+    /**
+     * Set distributed retries count and delay
+     *
+     * @param integer $count
+     * @param integer $delay
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When retry count or delay is negative
+     */
+    public function setRetries($count, $delay = 0)
+    {
+        $count = intval($count);
+        $delay = intval($delay);
+
+        if ($count < 0) {
+            throw new \InvalidArgumentException('Retry count cannot be negative.');
+        }
+
+        if ($delay < 0) {
+            throw new \InvalidArgumentException('Retry delay cannot be negative.');
+        }
+
+        $this->retrycount = $count;
+        $this->retrydelay = $delay;
+
+        return $this;
+    }
+
+    /**
+     * Set resultset format to either hash or array; hash is the default format
+     *
+     * PHP specific; needed for group-by-MVA result sets that may contain duplicate IDs
+     *
+     * @param boolean $arrayresult whether to return results as array keyed by ID
+     *
+     * @return SphinxClient
+     */
+    public function setArrayResult($arrayresult)
+    {
+        $this->arrayresult = (Boolean) $arrayresult;
+
+        return $this;
+    }
+
+    /**
+     * Set attribute values override. Only one override per attribute
+     *
+     * @param string  $attrname attribute name
+     * @param integer $attrtype attribute type
+     * @param array   $values   hash that maps document IDs to attribute values
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When attribute name or type is invalid
+     */
+    public function setOverride($attrname, $attrtype, array $values)
+    {
+        if (!is_string($attrname)) {
+            throw new \InvalidArgumentException('Attribute name must be a string.');
+        }
+
+        if (!in_array(
+            $attrtype,
+            array(
+                self::SPH_ATTR_INTEGER,
+                self::SPH_ATTR_TIMESTAMP,
+                self::SPH_ATTR_BOOL,
+                self::SPH_ATTR_FLOAT,
+                self::SPH_ATTR_BIGINT
+            )
+        )) {
+            throw new \InvalidArgumentException('Attribute type is invalid.');
+        }
+
+        $this->overrides[$attrname] = array(
+            'attr' => $attrname,
+            'type' => $attrtype,
+            'values' => $values
+        );
+
+        return $this;
+    }
+
+    /**
+     * Set select-list (attributes or expressions), SQL-like syntax
+     *
+     * @param string $select select list
+     *
+     * @return SphinxClient
+     * @throws \InvalidArgumentException When select list is invalid
+     */
+    public function setSelect($select)
+    {
+        if (!is_string($select)) {
+            throw new \InvalidArgumentException('Select list must be a string.');
+        }
+
+        $this->select = $select;
+
+        return $this;
+    }
+
+    /**
+     * Clear all filters (for multi-queries)
+     *
+     * @return SphinxClient
+     */
+    public function resetFilters()
+    {
+        $this->filters = array();
+        $this->anchor  = array();
+
+        return $this;
+    }
+
+    /**
+     * Clear groupby settings (for multi-queries)
+     *
+     * @return SphinxClient
+     */
+    public function resetGroupBy()
+    {
+        $this->groupby       = '';
+        $this->groupfunc     = self::SPH_GROUPBY_DAY;
+        $this->groupsort     = '@group desc';
+        $this->groupdistinct = '';
+
+        return $this;
+    }
+
+    /**
+     * Clear all attribute value overrides (for multi-queries)
+     *
+     * @return SphinxClient
+     */
+    public function resetOverrides()
+    {
+        $this->overrides = array();
+
+        return $this;
+    }
+
+    /**
+     * Connect to searchd server, run given search query through given indexes, and return the results
+     *
+     * @param string $query   query string
+     * @param string $index   index name
+     * @param string $comment optional comment
+     *
+     * @return array|false Results array, or false upon error.
+     * @throws \ErrorException When request array is not empty initially
+     */
+    public function query($query, $index = '*', $comment = '')
+    {
+        if (!empty($this->reqs)) {
+            throw new \ErrorException('Request array must be empty.');
+        }
+
+        $this->addQuery($query, $index, $comment);
+        $results = $this->runQueries();
+
+        // just in case it failed too early
+        $this->reqs = array();
+
+        if (!is_array($results)) {
+            // probably network error; error message should be already filled
+            return false;
+        }
+
+        $this->error   = $results[0]['error'];
+        $this->warning = $results[0]['warning'];
+
+        if ($results[0]['status'] === self::SEARCHD_ERROR) {
+            return false;
+        } else {
+            return $results[0];
+        }
+    }
+
+    /**
+     * Helper to pack floats in network byte order
+     *
+     * @param float $float
+     *
+     * @return string
+     */
+    private function packFloat($float)
+    {
+        // machine order
+        $t1 = pack('f', $float);
+
+        // int in machine order
+        list(, $t2) = unpack('L*', $t1);
+
+        return pack('N', $t2);
+    }
+
+    /**
+     * Add a query to a multi-query batch. Returns index into results array from runQueries() call
+     *
+     * @param string $query
+     * @param string $index
+     * @param string $comment
+     *
+     * @return integer Results array index.
+     * @throws \InvalidArgumentException When filter type, document ID or attribute value is invalid
+     */
+    public function addQuery($query, $index = '*', $comment = '')
+    {
+        // mbstring workaround
+        $this->mbPush();
+
+        // build request
+        $req = pack('NNNN', $this->offset, $this->limit, $this->mode, $this->ranker);
+        if ($this->ranker === self::SPH_RANK_EXPR) {
+            $req .= pack('N', strlen($this->rankexpr)) . $this->rankexpr;
+        }
+
+        // (deprecated) sort mode
+        $req .= pack('N', $this->sort);
+        $req .= pack('N', strlen($this->sortby)) . $this->sortby;
+        $req .= pack('N', strlen($query)) . $query;
+        $req .= pack('N', count($this->weights));
+
+        foreach ($this->weights as $weight) {
+            $req .= pack('N', (int) $weight);
+        }
+
+        $req .= pack('N', strlen($index)) . $index;
+        // id64 range marker
+        $req .= pack('N', 1);
+        // id64 range
+        $req .= $this->packU64($this->minid) . $this->packU64($this->maxid);
+
+        // filters
+        $req .= pack('N', count($this->filters));
+        foreach ($this->filters as $filter) {
+            $req .= pack('N', strlen($filter['attr'])) . $filter['attr'];
+            $req .= pack('N', $filter['type']);
+            switch ($filter['type']) {
+                case self::SPH_FILTER_VALUES:
+                    $req .= pack('N', count($filter['values']));
+                    foreach ($filter['values'] as $value) {
+                        $req .= $this->packI64($value);
+                    }
+                    break;
+                case self::SPH_FILTER_RANGE:
+                    $req .= $this->packI64($filter['min']) . $this->packI64($filter['max']);
+                    break;
+                case self::SPH_FILTER_FLOATRANGE:
+                    $req .= $this->packFloat($filter['min']) . $this->packFloat($filter['max']);
+                    break;
+                default:
+                    throw new \InvalidArgumentException('internal error: unhandled filter type');
+            }
+
+            $req .= pack('N', $filter['exclude']);
+        }
+
+        // group-by clause, max-matches count, group-sort clause, cutoff count
+        $req .= pack('NN', $this->groupfunc, strlen($this->groupby)) . $this->groupby;
+        $req .= pack('N', $this->maxmatches);
+        $req .= pack('N', strlen($this->groupsort)) . $this->groupsort;
+        $req .= pack('NNN', $this->cutoff, $this->retrycount, $this->retrydelay);
+        $req .= pack('N', strlen($this->groupdistinct)) . $this->groupdistinct;
+
+        // anchor point
+        if (empty($this->anchor)) {
+            $req .= pack('N', 0);
+        } else {
+            $a    =& $this->anchor;
+            $req .= pack('N', 1);
+            $req .= pack('N', strlen($a['attrlat'])) . $a['attrlat'];
+            $req .= pack('N', strlen($a['attrlong'])) . $a['attrlong'];
+            $req .= $this->packFloat($a['lat']) . $this->packFloat($a['long']);
+        }
+
+        // per-index weights
+        $req .= pack('N', count($this->indexweights));
+        foreach ($this->indexweights as $idx => $weight) {
+            $req .= pack('N', strlen($idx)) . $idx . pack('N', $weight);
+        }
+
+        // max query time
+        $req .= pack('N', $this->maxquerytime);
+
+        // per-field weights
+        $req .= pack('N', count($this->fieldweights));
+        foreach ($this->fieldweights as $field => $weight) {
+            $req .= pack('N', strlen($field)) . $field . pack('N', $weight);
+        }
+
+        // comment
+        $req .= pack('N', strlen($comment)) . $comment;
+
+        // attribute overrides
+        $req .= pack('N', count($this->overrides));
+        foreach ($this->overrides as $key => $entry) {
+            $req .= pack('N', strlen($entry['attr'])) . $entry['attr'];
+            $req .= pack('NN', $entry['type'], count($entry['values']));
+            foreach ($entry['values'] as $id => $val) {
+                if (!is_numeric($id)) {
+                    throw new \InvalidArgumentException('Document ID must be numeric.');
+                }
+
+                if (!is_numeric($val)) {
+                    throw new \InvalidArgumentException('Attribute value must be numeric.');
+                }
+
+                $req .= $this->packU64($id);
+                switch ($entry['type']) {
+                    case self::SPH_ATTR_FLOAT:
+                        $req .= $this->packFloat($val);
+                        break;
+                    case self::SPH_ATTR_BIGINT:
+                        $req .= $this->packI64($val);
+                        break;
+                    default:
+                        $req .= pack('N', $val);
+                        break;
+                }
+            }
+        }
+
+        // select-list
+        $req .= pack('N', strlen($this->select)) . $this->select;
+
+        // mbstring workaround
+        $this->mbPop();
+
+        // store request to requests array
+        $this->reqs[] = $req;
+
+        return count($this->reqs) - 1;
+    }
+
+    /**
+     * Connect to searchd, run batch queries, and return an array of results
+     *
+     * @return array Result array.
+     */
+    public function runQueries()
+    {
+        if (empty($this->reqs)) {
+            $this->error = 'no queries defined, issue addQuery() first';
+
+            return false;
+        }
+
+        // mbstring workaround
+        $this->mbPush();
+
+        if (!($fp = $this->connect())) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // send query, get response
+        $nreqs = count($this->reqs);
+
+        $req = implode('', $this->reqs);
+        $len = 8 + strlen($req);
+
+        // add header
+        $req = pack('nnNNN', self::SEARCHD_COMMAND_SEARCH, self::VER_COMMAND_SEARCH, $len, 0, $nreqs) . $req;
+
+        if (!($this->send($fp, $req, $len + 8)) || !($response = $this->getResponse($fp, self::VER_COMMAND_SEARCH))) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // query sent ok; we can reset reqs now
+        $this->reqs = array();
+
+        // parse and return response
+        return $this->parseSearchResponse($response, $nreqs);
+    }
+
+    /**
+     * Parse and return search query (or queries) response
+     *
+     * @param string  $response raw response
+     * @param integer $nreqs    number of queries
+     *
+     * @return array Result array.
+     */
+    private function parseSearchResponse($response, $nreqs)
+    {
+        // current position
+        $p = 0;
+        // max position for checks, to protect against broken responses
+        $max = strlen($response);
+
+        $results = array();
+        for ($ires = 0; $ires < $nreqs && $p < $max; $ires++) {
+            $results[] = array();
+
+            $result =& $results[$ires];
+
+            $result['error']   = '';
+            $result['warning'] = '';
+
+            // extract status
+            list(, $status) = unpack('N*', substr($response, $p, 4));
+            $p += 4;
+
+            $result['status'] = $status;
+
+            if ($status !== self::SEARCHD_OK) {
+                list(, $len) = unpack('N*', substr($response, $p, 4));
+                $p += 4;
+
+                $message = substr($response, $p, $len);
+                $p += $len;
+
+                if ($status === self::SEARCHD_WARNING) {
+                    $result['warning'] = $message;
+                } else {
+                    $result['error'] = $message;
+                    continue;
+                }
+            }
+
+            // read schema
+            $fields = array();
+            $attrs  = array();
+
+            list(, $nfields) = unpack('N*', substr($response, $p, 4));
+            $p += 4;
+
+            while ($nfields-- > 0 && $p < $max) {
+                list(, $len) = unpack('N*', substr($response, $p, 4));
+                $p += 4;
+
+                $fields[] = substr($response, $p, $len);
+                $p += $len;
+            }
+
+            $result['fields'] = $fields;
+
+            list(, $nattrs) = unpack('N*', substr($response, $p, 4));
+            $p += 4;
+            while ($nattrs-- > 0 && $p < $max) {
+                list(, $len) = unpack('N*', substr($response, $p, 4));
+                $p += 4;
+
+                $attr = substr($response, $p, $len);
+                $p += $len;
+
+                list(, $type) = unpack('N*', substr($response, $p, 4));
+                $p += 4;
+
+                $attrs[$attr] = $type;
+            }
+
+            $result['attrs'] = $attrs;
+
+            // read match count
+            list(, $count) = unpack('N*', substr($response, $p, 4));
+            $p += 4;
+
+            list(, $id64) = unpack('N*', substr($response, $p, 4));
+            $p += 4;
+
+            // read matches
+            $idx = -1;
+            while ($count-- > 0 && $p < $max) {
+                // index into result array
+                $idx++;
+
+                // parse document id and weight
+                if ($id64) {
+                    $doc = $this->unpackU64(substr($response, $p, 8));
+                    $p += 8;
+
+                    list(, $weight) = unpack('N*', substr($response, $p, 4));
+                    $p += 4;
+                } else {
+                    list($doc, $weight) = array_values(unpack('N*N*', substr($response, $p, 8)));
+                    $p += 8;
+
+                    $doc = $this->fixUint($doc);
+                }
+
+                $weight = sprintf('%u', $weight);
+
+                // create match entry
+                if ($this->arrayresult) {
+                    $result['matches'][$idx] = array('id' => $doc, 'weight' => $weight);
+                } else {
+                    $result['matches'][$doc]['weight'] = $weight;
+                }
+
+                // parse and create attributes
+                $attrvals = array();
+                foreach ($attrs as $attr => $type) {
+                    // handle 64bit ints
+                    if ($type === self::SPH_ATTR_BIGINT) {
+                        $attrvals[$attr] = $this->unpackI64(substr($response, $p, 8));
+                        $p += 8;
+                        continue;
+                    }
+
+                    // handle floats
+                    if ($type === self::SPH_ATTR_FLOAT) {
+                        list(, $uval) = unpack('N*', substr($response, $p, 4));
+                        $p += 4;
+
+                        list(, $fval) = unpack('f*', pack('L', $uval));
+
+                        $attrvals[$attr] = $fval;
+                        continue;
+                    }
+
+                    // handle everything else as unsigned ints
+                    list(, $val) = unpack('N*', substr($response, $p, 4));
+                    $p += 4;
+                    if ($type === self::SPH_ATTR_MULTI) {
+                        $attrvals[$attr] = array();
+                        $nvalues = $val;
+                        while ($nvalues-- > 0 && $p < $max) {
+                            list(, $val) = unpack('N*', substr($response, $p, 4));
+                            $p += 4;
+
+                            $attrvals[$attr][] = $this->fixUint($val);
+                        }
+                    } elseif ($type === self::SPH_ATTR_MULTI64) {
+                        $attrvals[$attr] = array();
+                        $nvalues = $val;
+                        while ($nvalues > 0 && $p < $max) {
+                            $attrvals[$attr][] = $this->unpackI64(substr($response, $p, 8));
+                            $p += 8;
+                            $nvalues -= 2;
+                        }
+                    } elseif ($type === self::SPH_ATTR_STRING) {
+                        $attrvals[$attr] = substr($response, $p, $val);
+                        $p += $val;
+                    } else {
+                        $attrvals[$attr] = $this->fixUint($val);
+                    }
+                }
+
+                if ($this->arrayresult) {
+                    $result['matches'][$idx]['attrs'] = $attrvals;
+                } else {
+                    $result['matches'][$doc]['attrs'] = $attrvals;
+                }
+            }
+
+            list($total, $totalFound, $msecs, $words) = array_values(unpack('N*N*N*N*', substr($response, $p, 16)));
+            $result['total'] = sprintf('%u', $total);
+            $result['total_found'] = sprintf('%u', $totalFound);
+            $result['time'] = sprintf('%.3f', $msecs / 1000);
+            $p += 16;
+
+            while ($words-- > 0 && $p < $max) {
+                list(, $len) = unpack('N*', substr($response, $p, 4));
+                $p += 4;
+
+                $word = substr($response, $p, $len);
+                $p += $len;
+
+                list($docs, $hits) = array_values(unpack('N*N*', substr($response, $p, 8)));
+                $p += 8;
+
+                $result['words'][$word] = array(
+                    'docs' => sprintf('%u', $docs),
+                    'hits' => sprintf('%u', $hits)
+                );
+            }
+        }
+
+        $this->mbPop();
+
+        return $results;
+    }
+
+    /**
+     * Connect to searchd and generate excerpts (snippets) from given documents for a given query
+     *
+     * @param array  $docs  array of strings that carry the document contents
+     * @param string $index name of the index
+     * @param string $words string that contains the keywords to highlight
+     * @param array  $opts  hash which contains additional optional highlighting parameters
+     *
+     * @return array|false Array of snippets, or false on failure.
+     * @throws \InvalidArgumentException When documents, index name or keywords are invalid
+     */
+    public function buildExcerpts(array $docs, $index, $words, array $opts = array())
+    {
+        foreach ($docs as $doc) {
+            if (!is_string($doc)) {
+                throw new \InvalidArgumentException('Document must be a string.');
+            }
+        }
+
+        if (!is_string($index)) {
+            throw new \InvalidArgumentException('Index name must be a string.');
+        }
+
+        if (!is_string($words)) {
+            throw new \InvalidArgumentException('Keywords must be a string.');
+        }
+
+        $this->mbPush();
+
+        if (!($fp = $this->connect())) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // default options
+        $defaults = array(
+            'before_match' => '<b>',
+            'after_match' => '</b>',
+            'chunk_separator' => ' ... ',
+            'limit' => 256,
+            'limit_passages' => 0,
+            'limit_words' => 0,
+            'around' => 5,
+            'exact_phrase' => false,
+            'single_passage' => false,
+            'use_boundaries' => false,
+            'weight_order' => false,
+            'query_mode' => false,
+            'force_all_words' => false,
+            'start_passage_id' => 1,
+            'load_files' => false,
+            'html_strip_mode' => 'index',
+            'allow_empty' => false,
+            'passage_boundary' => 'none',
+            'emit_zones' => false,
+            'load_files_scattered' => false
+        );
+
+        foreach ($defaults as $opt => $default) {
+            if (!isset($opts[$opt])) {
+                $opts[$opt] = $default;
+            }
+        }
+
+        // build request
+        // v.1.2 req
+
+        $flags = 1;
+        foreach (array(
+            2 => 'exact_phrase',
+            4 => 'single_passage',
+            8 => 'use_boundaries',
+            16 => 'weight_order',
+            32 => 'query_mode',
+            64 => 'force_all_words',
+            128 => 'load_files',
+            256 => 'allow_empty',
+            512 => 'emit_zones',
+            1024 => 'load_files_scattered'
+        ) as $flag => $opt) {
+            if ((Boolean) $opts[$opt]) {
+                $flags |= $flag;
+            }
+        }
+
+        // mode=0, flags=$flags
+        $req  = pack('NN', 0, $flags);
+        $req .= pack('N', strlen($index)) . $index;
+        $req .= pack('N', strlen($words)) . $words;
+
+        // options
+        $req .= pack('N', strlen($opts['before_match'])) . $opts['before_match'];
+        $req .= pack('N', strlen($opts['after_match'])) . $opts['after_match'];
+        $req .= pack('N', strlen($opts['chunk_separator'])) . $opts['chunk_separator'];
+        $req .= pack('NN', (int) $opts['limit'], (int) $opts['around']);
+        // v.1.2
+        $req .= pack('NNN', (int) $opts['limit_passages'], (int) $opts['limit_words'], (int) $opts['start_passage_id']);
+        $req .= pack('N', strlen($opts['html_strip_mode'])) . $opts['html_strip_mode'];
+        $req .= pack('N', strlen($opts['passage_boundary'])) . $opts['passage_boundary'];
+
+        // documents
+        $req .= pack('N', count($docs));
+        foreach ($docs as $doc) {
+            $req .= pack('N', strlen($doc)) . $doc;
+        }
+
+        // send query, get response
+        $len = strlen($req);
+        // add header
+        $req = pack('nnN', self::SEARCHD_COMMAND_EXCERPT, self::VER_COMMAND_EXCERPT, $len) . $req;
+
+        if (!($this->send($fp, $req, $len + 8)) || !($response = $this->getResponse($fp, self::VER_COMMAND_EXCERPT))) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // parse response
+        $pos  = 0;
+        $res  = array();
+        $rlen = strlen($response);
+        $ndoc = count($docs);
+
+        for ($i = 0; $i < $ndoc; $i++) {
+            list(, $len) = unpack('N*', substr($response, $pos, 4));
+
+            $pos += 4;
+
+            if ($pos + $len > $rlen) {
+                $this->error = 'incomplete reply';
+                $this->mbPop();
+
+                return false;
+            }
+
+            $res[] = $len ? substr($response, $pos, $len) : '';
+            $pos  += $len;
+        }
+
+        $this->mbPop();
+
+        return $res;
+    }
+
+    /**
+     * Extracts keywords from query using tokenizer settings for a given index
+     *
+     * @param string  $query query to extract keywords from
+     * @param string  $index name of the index to get tokenizing settings and keyword occurrence statistics from
+     * @param boolean $hits  whether keyword occurrence statistics are required
+     *
+     * @return array|false Array of hashes with per-keyword information, or false on failure.
+     * @throws \InvalidArgumentException When query or index name is not valid string
+     */
+    public function buildKeywords($query, $index, $hits)
+    {
+        if (!is_string($query)) {
+            throw new \InvalidArgumentException('Query must be a string.');
+        }
+
+        if (!is_string($index)) {
+            throw new \InvalidArgumentException('Index name must be a string.');
+        }
+
+        $hits = (Boolean) $hits;
+
+        $this->mbPush();
+
+        if (!($fp = $this->connect())) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // build request
+        // v.1.0 req
+
+        $req  = pack('N', strlen($query)) . $query;
+        $req .= pack('N', strlen($index)) . $index;
+        $req .= pack('N', (int) $hits);
+
+        // send query, get response
+        $len = strlen($req);
+        // add header
+        $req = pack('nnN', self::SEARCHD_COMMAND_KEYWORDS, self::VER_COMMAND_KEYWORDS, $len) . $req;
+        if (!($this->send($fp, $req, $len + 8)) || !($response = $this->getResponse($fp, self::VER_COMMAND_KEYWORDS))) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // parse response
+        $pos = 0;
+        $res = array();
+        $rlen = strlen($response);
+        list(, $nwords) = unpack('N*', substr($response, $pos, 4));
+        $pos += 4;
+
+        for ($i = 0; $i < $nwords; $i++) {
+            list(, $len) = unpack('N*', substr($response, $pos, 4));
+            $pos += 4;
+
+            $tokenized = $len ? substr($response, $pos, $len) : '';
+            $pos += $len;
+
+            list(, $len) = unpack('N*', substr($response, $pos, 4));
+            $pos += 4;
+
+            $normalized = $len ? substr($response, $pos, $len) : '';
+            $pos += $len;
+
+            $res[] = array('tokenized' => $tokenized, 'normalized' => $normalized);
+
+            if ($hits) {
+                list($ndocs, $nhits) = array_values(unpack('N*N*', substr($response, $pos, 8)));
+                $pos += 8;
+
+                $res[$i]['docs'] = $ndocs;
+                $res[$i]['hits'] = $nhits;
+            }
+
+            if ($pos > $rlen) {
+                $this->error = 'incomplete reply';
+                $this->mbPop();
+
+                return false;
+            }
+        }
+
+        $this->mbPop();
+
+        return $res;
+    }
+
+    /**
+     * Escapes characters that are treated as special operators by the query language parser
+     *
+     * @param string $string unescaped string
+     *
+     * @return string Escaped string.
+     */
+    public function escapeString($string)
+    {
+        $from = array('\\', '(', ')', '|', '-', '!', '@', '~', '"', '&', '/', '^', '$', '=');
+        $to   = array('\\\\', '\(', '\)', '\|', '\-', '\!', '\@', '\~', '\"', '\&', '\/', '\^', '\$', '\=');
+
+        return str_replace($from, $to, $string);
+    }
+
+    /**
+     * Batch update given attributes in given documents
+     *
+     * @param string  $index  search index
+     * @param array   $attrs  array of attribute names
+     * @param array   $values hash of arrays of new attribute values keyed by document ID
+     * @param boolean $mva    whether to treat attributes as MVAs
+     *
+     * @return integer Amount of updated documents (0 or more) on success, -1 on failure
+     * @throws \InvalidArgumentException When inputs do not match required types
+     */
+    public function updateAttributes($index, array $attrs, array $values, $mva = false)
+    {
+        // verify everything
+        $index = strval($index);
+        $mva   = (Boolean) $mva;
+
+        foreach ($attrs as $attr) {
+            if (!is_string($attr)) {
+                throw new \InvalidArgumentException('Attribute name must be a string.');
+            }
+        }
+
+        foreach ($values as $id => $entry) {
+            if (!is_numeric($id)) {
+                throw new \InvalidArgumentException('Document ID must be numeric.');
+            }
+
+            if (!is_array($entry)) {
+                throw new \InvalidArgumentException('Document must be an array of attribute values.');
+            }
+
+            if (count($entry) !== count($attrs)) {
+                throw new \InvalidArgumentException('Number of attributes do not match.');
+            }
+
+            foreach ($entry as $v) {
+                if ($mva) {
+                    if (!is_array($v)) {
+                        throw new \InvalidArgumentException('MVA must be an array.');
+                    }
+
+                    foreach ($v as $vv) {
+                        if (!is_int($vv)) {
+                            throw new \InvalidArgumentException('Attribute value must be an integer.');
+                        }
+                    }
+                } else {
+                    if (!is_int($v)) {
+                        throw new \InvalidArgumentException('Attribute value must be an integer.');
+                    }
+                }
+            }
+        }
+
+        // build request
+        $this->mbPush();
+        $req = pack('N', strlen($index)) . $index;
+
+        $req .= pack('N', count($attrs));
+        foreach ($attrs as $attr) {
+            $req .= pack('N', strlen($attr)) . $attr;
+            $req .= pack('N', $mva ? 1 : 0);
+        }
+
+        $req .= pack('N', count($values));
+        foreach ($values as $id => $entry) {
+            $req .= $this->packU64($id);
+            foreach ($entry as $v) {
+                $req .= pack('N', $mva ? count($v) : $v);
+                if ($mva) {
+                    foreach ($v as $vv) {
+                        $req .= pack('N', $vv);
+                    }
+                }
+            }
+        }
+
+        // connect, send query, get response
+        if (!($fp = $this->connect())) {
+            $this->mbPop();
+
+            return -1;
+        }
+
+        $len = strlen($req);
+        $req = pack('nnN', self::SEARCHD_COMMAND_UPDATE, self::VER_COMMAND_UPDATE, $len) . $req; // add header
+        if (!$this->send($fp, $req, $len + 8)) {
+            $this->mbPop();
+
+            return -1;
+        }
+
+        if (!($response = $this->getResponse($fp, self::VER_COMMAND_UPDATE))) {
+            $this->mbPop();
+
+            return -1;
+        }
+
+        // parse response
+        list(, $updated) = unpack('N*', substr($response, 0, 4));
+        $this->mbPop();
+
+        return $updated;
+    }
+
+    /**
+     * Open a persistent connection
+     *
+     * @return boolean
+     */
+    public function open()
+    {
+        if ($this->socket !== false) {
+            $this->error = 'already connected';
+
+            return false;
+        }
+
+        if (!$fp = $this->connect()) {
+            return false;
+        }
+
+        // command, command version = 0, body length = 4, body = 1
+        $req = pack('nnNN', self::SEARCHD_COMMAND_PERSIST, 0, 4, 1);
+        if (!$this->send($fp, $req, 12)) {
+            return false;
+        }
+
+        $this->socket = $fp;
+
+        return true;
+    }
+
+    /**
+     * Close a persistent connection
+     *
+     * @return boolean
+     */
+    public function close()
+    {
+        if ($this->socket === false) {
+            $this->error = 'not connected';
+
+            return false;
+        }
+
+        fclose($this->socket);
+        $this->socket = false;
+
+        return true;
+    }
+
+    /**
+     * Queries searchd status
+     *
+     * @return array|false Status variable name and value pairs, false on error.
+     */
+    public function status()
+    {
+        $this->mbPush();
+        if (!($fp = $this->connect())) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // len=4, body=1
+        $req = pack('nnNN', self::SEARCHD_COMMAND_STATUS, self::VER_COMMAND_STATUS, 4, 1);
+        if (!( $this->send($fp, $req, 12)) || !($response = $this->getResponse($fp, self::VER_COMMAND_STATUS))) {
+            $this->mbPop();
+
+            return false;
+        }
+
+        // just ignore length, error handling, etc
+        $res = substr($response, 4);
+        $p = 0;
+        list($rows, $cols) = array_values(unpack('N*N*', substr($response, $p, 8)));
+        $p += 8;
+
+        $res = array();
+        for ($i = 0; $i < $rows; $i++) {
+            for ($j = 0; $j < $cols; $j++) {
+                list(, $len) = unpack('N*', substr($response, $p, 4));
+                $p += 4;
+                $res[$i][] = substr($response, $p, $len);
+                $p += $len;
+            }
+        }
+
+        $this->mbPop();
+
+        return $res;
+    }
+
+    /**
+     * Forces searchd to flush pending attribute updates to disk, and blocks until completion
+     *
+     * @return integer Flush tag, -1 on error.
+     */
+    public function flushAttributes()
+    {
+        $this->mbPush();
+        if (!($fp = $this->connect())) {
+            $this->mbPop();
+
+            return -1;
+        }
+
+        // len=0
+        $req = pack('nnN', self::SEARCHD_COMMAND_FLUSHATTRS, self::VER_COMMAND_FLUSHATTRS, 0);
+        if (!($this->send($fp, $req, 8)) || !($response = $this->getResponse($fp, self::VER_COMMAND_FLUSHATTRS))) {
+            $this->mbPop();
+
+            return -1;
+        }
+
+        $tag = -1;
+        if (strlen($response) === 4) {
+            list(, $tag) = unpack('N*', $response);
+        } else {
+            $this->error = 'unexpected response length';
+        }
+
+        $this->mbPop();
+
+        return $tag;
+    }
+
+    /**
+     * important properties of PHP's integers:
+     *  - always signed (one bit short of PHP_INT_SIZE)
+     *  - conversion from string to int is saturated
+     *  - float is double
+     *  - div converts arguments to floats
+     *  - mod converts arguments to ints
+     *
+     * the packing code below works as follows:
+     *  - when we got an int, just pack it
+     *    if performance is a problem, this is the branch users should aim for
+     *
+     *  - otherwise, we got a number in string form
+     *    this might be due to different reasons, but we assume that this is
+     *    because it didn't fit into PHP int
+     *
+     *  - factor the string into high and low ints for packing
+     *    - if we have bcmath, then it is used
+     *    - if we don't, we have to do it manually (this is the fun part)
+     *
+     *    - x64 branch does factoring using ints
+     *    - x32 (ab)uses floats, since we can't fit unsigned 32-bit number into an int
+     *
+     * unpacking routines are pretty much the same.
+     *  - return ints if we can
+     *  - otherwise format number into a string
+     */
+
+    /**
+     * Pack 64-bit signed
+     *
+     * @param integer|string $v
+     *
+     * @return string
+     * @throws \InvalidArgumentException When $v is not numeric
+     */
+    public function packI64($v)
+    {
+        if (!is_numeric($v)) {
+            throw new \InvalidArgumentException('Input must be numeric.');
+        }
+
+        // x64
+        if (PHP_INT_SIZE >= 8) {
+            $v = (int) $v;
+
+            return pack('NN', $v >> 32, $v & 0xFFFFFFFF);
+        }
+
+        // x32, int
+        if (is_int($v)) {
+            return pack('NN', $v < 0 ? -1 : 0, $v);
+        }
+
+        // x32, bcmath
+        if (function_exists('bcmul')) {
+            if (bccomp($v, 0) == -1) {
+                $v = bcadd('18446744073709551616', $v);
+            }
+
+            $h = bcdiv($v, '4294967296', 0);
+            $l = bcmod($v, '4294967296');
+
+            // conversion to float is intentional; int would lose 31st bit
+            return pack('NN', (float) $h, (float) $l);
+        }
+
+        // x32, no-bcmath
+        $p  = max(0, strlen($v) - 13);
+        $lo = abs((float) substr($v, $p));
+        $hi = abs((float) substr($v, 0, $p));
+
+        // (10 ^ 13) % (1 << 32) = 1316134912
+        $m = $lo + $hi * 1316134912.0;
+        $q = floor($m / 4294967296.0);
+        $l = $m - ($q * 4294967296.0);
+        // (10 ^ 13) / (1 << 32) = 2328
+        $h = $hi * 2328.0 + $q;
+
+        if ($v < 0) {
+            if ($l == 0) {
+                $h = 4294967296.0 - $h;
+            } else {
+                $h = 4294967295.0 - $h;
+                $l = 4294967296.0 - $l;
+            }
+        }
+
+        return pack('NN', $h, $l);
+    }
+
+    /**
+     * Pack 64-bit unsigned
+     *
+     * @param integer|string $v
+     *
+     * @return string
+     * @throws \InvalidArgumentException When $v is not numeric
+     */
+    public function packU64($v)
+    {
+        if (!is_numeric($v)) {
+            throw new \InvalidArgumentException('Input must be numeric.');
+        }
+
+        // x64
+        if (PHP_INT_SIZE >= 8) {
+            if ($v < 0) {
+                throw new \InvalidArgumentException('Input must be positive.');
+            }
+
+            // x64, int
+            if (is_int($v)) {
+                return pack('NN', $v >> 32, $v & 0xFFFFFFFF);
+            }
+
+            // x64, bcmath
+            if (function_exists('bcmul')) {
+                $h = bcdiv($v, 4294967296, 0);
+                $l = bcmod($v, 4294967296);
+
+                return pack('NN', $h, $l);
+            }
+
+            // x64, no-bcmath
+            $p  = max(0, strlen($v) - 13);
+            $lo = (int) substr($v, $p);
+            $hi = (int) substr($v, 0, $p);
+
+            $m = $lo + $hi * 1316134912;
+            $l = $m % 4294967296;
+            $h = $hi * 2328 + (int) ($m / 4294967296);
+
+            return pack('NN', $h, $l);
+        }
+
+        // x32, int
+        if (is_int($v)) {
+            return pack('NN', 0, $v);
+        }
+
+        // x32, bcmath
+        if (function_exists('bcmul')) {
+            $h = bcdiv($v, '4294967296', 0);
+            $l = bcmod($v, '4294967296');
+
+            // conversion to float is intentional; int would lose 31st bit
+            return pack('NN', (float) $h, (float) $l);
+        }
+
+        // x32, no-bcmath
+        $p  = max(0, strlen($v) - 13);
+        $lo = (float) substr($v, $p);
+        $hi = (float) substr($v, 0, $p);
+
+        $m = $lo + $hi * 1316134912.0;
+        $q = floor($m / 4294967296.0);
+        $l = $m - ($q * 4294967296.0);
+        $h = $hi * 2328.0 + $q;
+
+        return pack('NN', $h, $l);
+    }
+
+    /**
+     * Unpack 64-bit unsigned
+     *
+     * @param string $v
+     *
+     * @return integer|string
+     */
+    public function unpackU64($v)
+    {
+        list($hi, $lo) = array_values(unpack('N*N*', $v));
+
+        if (PHP_INT_SIZE >= 8) {
+            if ($hi < 0) {
+                // because php 5.2.2 to 5.2.5 is totally fucked up again
+                $hi += (1 << 32);
+            }
+
+            if ($lo < 0) {
+                $lo += (1 << 32);
+            }
+
+            // x64, int
+            if ($hi <= 2147483647) {
+                return ($hi << 32) + $lo;
+            }
+
+            // x64, bcmath
+            if (function_exists('bcmul')) {
+                return bcadd($lo, bcmul($hi, '4294967296'));
+            }
+
+            // x64, no-bcmath
+            $c = 100000;
+            $h = ((int) ($hi / $c) << 32) + (int) ($lo / $c);
+            $l = (($hi % $c) << 32) + ($lo % $c);
+            if ($l > $c) {
+                $h += (int) ($l / $c);
+                $l  = $l % $c;
+            }
+
+            if ($h == 0) {
+                return $l;
+            }
+
+            return sprintf('%d%05d', $h, $l);
+        }
+
+        // x32, int
+        if ($hi == 0) {
+            if ($lo > 0) {
+                return $lo;
+            }
+
+            return sprintf('%u', $lo);
+        }
+
+        $hi = sprintf('%u', $hi);
+        $lo = sprintf('%u', $lo);
+
+        // x32, bcmath
+        if (function_exists('bcmul')) {
+            return bcadd($lo, bcmul($hi, '4294967296'));
+        }
+
+        // x32, no-bcmath
+        $hi = (float) $hi;
+        $lo = (float) $lo;
+
+        $q  = floor($hi / 10000000.0);
+        $r  = $hi - $q * 10000000.0;
+        $m  = $lo + $r * 4967296.0;
+        $mq = floor($m / 10000000.0);
+        $l  = $m - $mq * 10000000.0;
+        $h  = $q * 4294967296.0 + $r * 429.0 + $mq;
+
+        $h = sprintf('%.0f', $h);
+        $l = sprintf('%07.0f', $l);
+        if ($h == '0') {
+            return sprintf('%.0f', (float) $l);
+        }
+
+        return $h . $l;
+    }
+
+    /**
+     * Unpack 64-bit signed
+     *
+     * @param string $v
+     *
+     * @return integer|string
+     */
+    public function unpackI64($v)
+    {
+        list($hi, $lo) = array_values(unpack('N*N*', $v));
+
+        // x64
+        if (PHP_INT_SIZE >= 8) {
+            if ($hi < 0) {
+                // because php 5.2.2 to 5.2.5 is totally fucked up again
+                $hi += (1 << 32);
+            }
+
+            if ($lo < 0) {
+                $lo += (1 << 32);
+            }
+
+            return ($hi << 32) + $lo;
+        }
+
+        // x32, int
+        if ($hi == 0) {
+            if ($lo > 0) {
+                return $lo;
+            }
+
+            return sprintf('%u', $lo);
+        } elseif ($hi == -1) {
+            // x32, int
+            if ($lo < 0) {
+                return $lo;
+            }
+
+            return sprintf('%.0f', $lo - 4294967296.0);
+        }
+
+        $neg = '';
+        $c   = 0;
+        if ($hi < 0) {
+            $hi  = ~$hi;
+            $lo  = ~$lo;
+            $c   = 1;
+            $neg = '-';
+        }
+
+        $hi = sprintf('%u', $hi);
+        $lo = sprintf('%u', $lo);
+
+        // x32, bcmath
+        if (function_exists('bcmul')) {
+            return $neg . bcadd(bcadd($lo, bcmul($hi, '4294967296')), $c);
+        }
+
+        // x32, no-bcmath
+        $hi = (float) $hi;
+        $lo = (float) $lo;
+
+        $q  = floor($hi / 10000000.0);
+        $r  = $hi - $q * 10000000.0;
+        $m  = $lo + $r * 4967296.0;
+        $mq = floor($m / 10000000.0);
+        $l  = $m - $mq * 10000000.0 + $c;
+        $h  = $q * 4294967296.0 + $r * 429.0 + $mq;
+        if ($l == 10000000) {
+            $l = 0;
+            $h++;
+        }
+
+        $h = sprintf('%.0f', $h);
+        $l = sprintf('%07.0f', $l);
+        if ($h == '0') {
+            return $neg . sprintf('%.0f', (float) $l);
+        }
+
+        return $neg . $h . $l;
+    }
+
+    /**
+     * Fix broken unsigned int
+     *
+     * @param integer $value
+     *
+     * @return integer
+     */
+    public function fixUint($value)
+    {
+        if (PHP_INT_SIZE >= 8) {
+            // x64 route, workaround broken unpack() in 5.2.2+
+            if ($value < 0) {
+                $value += (1 << 32);
+            }
+
+            return $value;
+        } else {
+            // x32 route, workaround php signed/unsigned braindamage
+            return sprintf('%u', $value);
+        }
+    }
+}
Index: vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/data/.gitignore
===================================================================
--- vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/data/.gitignore	(nonexistent)
+++ vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/data/.gitignore	(revision 57)
@@ -0,0 +1,2 @@
+*
+!.gitignore
\ No newline at end of file
Index: vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/log/.gitignore
===================================================================
--- vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/log/.gitignore	(nonexistent)
+++ vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/log/.gitignore	(revision 57)
@@ -0,0 +1,2 @@
+*
+!.gitignore
\ No newline at end of file
Index: vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/sphinxtest.conf
===================================================================
--- vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/sphinxtest.conf	(nonexistent)
+++ vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/sphinxtest.conf	(revision 57)
@@ -0,0 +1,35 @@
+source sphinxtest_src
+{
+    type = mysql
+    sql_host = 127.0.0.1
+    sql_user = travis
+    sql_pass =
+    sql_db = sphinx
+    sql_port = 3306
+    sql_query_pre = SET CHARACTER_SET_RESULTS=utf8
+    sql_query_pre = SET NAMES utf8
+    sql_query = SELECT * FROM sphinxtest
+    sql_attr_uint = attr1
+    sql_attr_float = lat
+    sql_attr_float = long
+    sql_attr_string = stringattr
+    sql_query_info = SELECT * FROM sphinxtest WHERE id=$id
+}
+
+index sphinxtest
+{
+    source = sphinxtest_src
+    path = /etc/sphinxtest
+    html_strip = 0
+    min_word_len = 1
+    charset_type = utf-8
+    charset_table = 0..9, a..z, A..Z->a..z, U+3041->U+30A2, U+3042->U+30A2, U+3043->U+30A4, U+3044->U+30A4, U+3045->U+30A6, U+3046->U+30A6, U+3047->U+30A8, U+3048->U+30A8, U+3049->U+30AA, U+304A->U+30AA, U+304B..U+3062->U+30AB..U+30C2, U+3063->U+30C4, U+3064..U+3082->U+30C4..U+30E2, U+3083->U+30E4, U+3084->U+30E4, U+3085->U+30E6, U+3086->U+30E6, U+3087->U+30E8, U+3088->U+30E8, U+3089..U+308D->U+30E9..U+30ED, U+308E->U+30EF, U+308F..U+3094->U+30EF..U+30F4, U+3095->U+30AB, U+3096->U+30B1, U+309F->U+30FF, U+30A1->U+30A2, U+30A2, U+30A3->U+30A4, U+30A4, U+30A5->U+30A6, U+30A6, U+30A7->U+30A8, U+30A8, U+30A9->U+30AA, U+30AA, U+30AB..U+30C2, U+30C3->U+30C4, U+30C4..U+30E2, U+30E3->U+30E4, U+30E4, U+30E5->U+30E6, U+30E6, U+30E7->U+30E8, U+30E8..U+30ED, U+30EE->U+30EF, U+30EF..U+30F4, U+30F5->U+30AB, U+30F6->U+30B1, U+30FA, U+30FF, U+31F0->U+30AF, U+31F1->U+30B7, U+31F2->U+30B9, U+31F3->U+30C8, U+31F4->U+30CC, U+31F5->U+30CF, U+31F6->U+30D2, U+31F7->U+30D5, U+31F8->U+30D8, U+31F9->U+30DB, U+31FA->U+30E0, U+31FB..U+31FF->U+30E9..U+30ED, U+3400..U+4DB5, U+4E00..U+9FC3, U+F900..U+FAD9, U+FF10..U+FF19->0..9, U+FF21..U+FF3A->a..z, U+FF41..U+FF5A->a..z, U+FF66->U+30F2, U+FF67->U+30A2, U+FF68->U+30A4, U+FF69->U+30A6, U+FF6A->U+30A8, U+FF6B->U+30AA, U+FF6C->U+30E4, U+FF6D->U+30E6, U+FF6E->U+30E8, U+FF6F->U+30C4, U+FF71->U+30A2, U+FF72->U+30A4, U+FF73->U+30A6, U+FF74->U+30A8, U+FF75->U+30AA, U+FF76->U+30AD, U+FF78->U+30AF, U+FF79->U+30B1, U+FF7A->U+30B3, U+FF7B->U+30B5, U+FF7C->U+30B7, U+FF7D->U+30B9, U+FF7E->U+30BB, U+FF7F->U+30BD, U+FF80->U+30BF, U+FF81->U+30C1, U+FF82->U+30C4, U+FF83->U+30C6, U+FF84->U+30C8, U+FF85..U+FF8A->U+30CA..U+30CF, U+FF8B->U+30D2, U+FF8C->U+30D5, U+FF8D->U+30D8, U+FF8E->U+30DB, U+FF8F..U+FF93->U+30DE..U+30E2, U+FF94->U+30E4, U+FF95->U+30E6, U+FF96..U+FF9B->U+30E8..U+30ED, U+FF9C->U+30EF, U+FF9D->U+30F3, U+20000..U+2A6D6, U+2F800..U+2FA1D
+}
+
+searchd
+{
+    listen = 9312
+    log = /etc/searchd.log
+    query_log = /etc/query.log
+    pid_file = /etc/searchd.pid
+}
\ No newline at end of file
Index: vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/sphinxtest.sql
===================================================================
--- vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/sphinxtest.sql	(nonexistent)
+++ vendor/gigablah/sphinxphp/tests/Sphinx/Tests/Fixtures/sphinxtest.sql	(revision 57)
@@ -0,0 +1,22 @@
+SET NAMES utf8;
+
+DROP TABLE IF EXISTS `sphinx`.`sphinxtest`;
+
+CREATE TABLE `sphinx`.`sphinxtest` (
+`id` BIGINT UNSIGNED NOT NULL auto_increment,
+`field1` TEXT,
+`field2` TEXT,
+`attr1` INT NOT NULL,
+`lat` FLOAT NOT NULL,
+`long` FLOAT NOT NULL,
+`stringattr` VARCHAR(100),
+PRIMARY KEY (`id`)) DEFAULT CHARSET=utf8 COLLATE=utf8_bin;
+
+INSERT INTO `sphinx`.`sphinxtest` (`id`,`field1`,`field2`,`attr1`,`lat`,`long`,`stringattr`) VALUES
+(1, 'a', 'bb', 2, 0.35, 0.70, ''),
+(2, 'a', 'bb ccc', 4, 0.70, 0.35, ''),
+(3, 'a', 'bb ccc dddd', 1, 0.35, 0.70, ''),
+(4, 'a bb', 'bb ccc dddd', 5, 0.35, 0.70, ''),
+(5, 'bb', 'bb bb ccc dddd', 3, 1.5, 1.5, 'new string attribute'),
+('9223372036854775807', 'xx', 'xx', 9000, 150, 150, ''),
+(6, _ucs2 x'65e5672c8a9e', '', 0, 0, 0, '');
\ No newline at end of file
Index: vendor/gigablah/sphinxphp/tests/Sphinx/Tests/SphinxClientTest.php
===================================================================
--- vendor/gigablah/sphinxphp/tests/Sphinx/Tests/SphinxClientTest.php	(nonexistent)
+++ vendor/gigablah/sphinxphp/tests/Sphinx/Tests/SphinxClientTest.php	(revision 57)
@@ -0,0 +1,806 @@
+<?php
+
+namespace Sphinx\Tests;
+
+use Sphinx\SphinxClient;
+
+/**
+ * SphinxClient test cases.
+ * Some test cases are ported from Perl Sphinx::Search, (c) Jon Schutz.
+ *
+ * @author Chris Heng <hengkuanyen@gmail.com>
+ */
+class SphinxClientTest extends \PHPUnit_Framework_TestCase
+{
+    public function testConstructorDefaults()
+    {
+        $sphinx = new SphinxClient();
+        $this->assertSame($sphinx->host, 'localhost');
+        $this->assertSame($sphinx->port, 9312);
+        $this->assertSame($sphinx->path, false);
+        $this->assertSame($sphinx->socket, false);
+        $this->assertSame($sphinx->offset, 0);
+        $this->assertSame($sphinx->limit, 20);
+        $this->assertSame($sphinx->mode, SphinxClient::SPH_MATCH_ALL);
+        $this->assertSame($sphinx->weights, array());
+        $this->assertSame($sphinx->sort, SphinxClient::SPH_SORT_RELEVANCE);
+        $this->assertSame($sphinx->sortby, '');
+        $this->assertSame($sphinx->minid, 0);
+        $this->assertSame($sphinx->maxid, 0);
+        $this->assertSame($sphinx->filters, array());
+        $this->assertSame($sphinx->groupby, '');
+        $this->assertSame($sphinx->groupfunc, SphinxClient::SPH_GROUPBY_DAY);
+        $this->assertSame($sphinx->groupsort, '@group desc');
+        $this->assertSame($sphinx->groupdistinct, '');
+        $this->assertSame($sphinx->maxmatches, 1000);
+        $this->assertSame($sphinx->cutoff, 0);
+        $this->assertSame($sphinx->retrycount, 0);
+        $this->assertSame($sphinx->retrydelay, 0);
+        $this->assertSame($sphinx->anchor, array());
+        $this->assertSame($sphinx->indexweights, array());
+        $this->assertSame($sphinx->ranker, SphinxClient::SPH_RANK_PROXIMITY_BM25);
+        $this->assertSame($sphinx->rankexpr, '');
+        $this->assertSame($sphinx->maxquerytime, 0);
+        $this->assertSame($sphinx->fieldweights, array());
+        $this->assertSame($sphinx->overrides, array());
+        $this->assertSame($sphinx->select, '*');
+        $this->assertSame($sphinx->error, '');
+        $this->assertSame($sphinx->warning, '');
+        $this->assertSame($sphinx->connerror, false);
+        $this->assertSame($sphinx->reqs, array());
+        $this->assertSame($sphinx->mbenc, '');
+        $this->assertSame($sphinx->arrayresult, false);
+        $this->assertSame($sphinx->timeout, 0);
+    }
+
+    /**
+     * @dataProvider provideBigintUnsigned
+     */
+    public function testPackBigintUnsigned($bigint)
+    {
+        $sphinx = new SphinxClient();
+        // packing and unpacking may not preserve data type
+        $this->assertEquals($sphinx->unpackU64($sphinx->packU64($bigint)), $bigint);
+    }
+
+    public function provideBigintUnsigned()
+    {
+        return array(
+            array(0),
+            array(1),
+            array(0x7FFFFFFF),
+            array(0x80000000),
+            array(0xFFFFFFFF),
+            array('4294967296'),
+            array('9223372036854775807'),
+            array('9223372036854775808'),
+            array('18446744073709551615')
+        );
+    }
+
+    /**
+     * @dataProvider provideBigintSigned
+     */
+    public function testPackBigintSigned($bigint)
+    {
+        $sphinx = new SphinxClient();
+        // packing and unpacking may not preserve data type
+        $this->assertEquals($sphinx->unpackI64($sphinx->packI64($bigint)), $bigint);
+    }
+
+    public function provideBigintSigned()
+    {
+        return array(
+            array(0),
+            array(1),
+            array(-1),
+            array(0x7FFFFFFF),
+            array(0x80000000),
+            array(0xFFFFFFFF),
+            array(-0x7FFFFFFF),
+            array(-0xFFFFFFFF),
+            array('-4294967296'),
+            array('-9223372036854775807')
+        );
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetServerWithInvalidHostShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setServer(123);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetServerWithNegativePortShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setServer('localhost', -1);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetServerWithInvalidPortShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setServer('localhost', 65536);
+    }
+
+    public function testSetServerWithSocketShouldSetPath()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setServer('/tmp/searchd.sock');
+        $this->assertSame($sphinx->path, 'unix:///tmp/searchd.sock');
+
+        $sphinx = new SphinxClient();
+        $sphinx->setServer('unix:///tmp/searchd.sock');
+        $this->assertSame($sphinx->path, 'unix:///tmp/searchd.sock');
+    }
+
+    public function testSetServerWithAddressShouldSetHostAndPort()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setServer('localhost', 3312);
+        $this->assertSame($sphinx->host, 'localhost');
+        $this->assertSame($sphinx->port, 3312);
+    }
+
+    public function testSetServerWithoutPortShouldSetDefaultPort()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setServer('localhost');
+        $this->assertSame($sphinx->port, 9312);
+    }
+
+    public function testSetConnectTimeout()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setConnectTimeout(10);
+        $this->assertSame($sphinx->timeout, 10);
+    }
+
+    public function testSetLimits()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setLimits(100, 50, 2000, 5000);
+        $this->assertSame($sphinx->offset, 100);
+        $this->assertSame($sphinx->limit, 50);
+        $this->assertSame($sphinx->maxmatches, 2000);
+        $this->assertSame($sphinx->cutoff, 5000);
+    }
+
+    public function testSetMaxQueryTime()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setMaxQueryTime(10);
+        $this->assertSame($sphinx->maxquerytime, 10);
+    }
+
+    public function testSetMatchMode()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED2);
+        $this->assertSame($sphinx->mode, SphinxClient::SPH_MATCH_EXTENDED2);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetMatchModeWithInvalidModeShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setMatchMode(7);
+    }
+
+    public function testSetRankingMode()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setRankingMode(SphinxClient::SPH_RANK_EXPR, '@count asc');
+        $this->assertSame($sphinx->ranker, SphinxClient::SPH_RANK_EXPR);
+        $this->assertSame($sphinx->rankexpr, '@count asc');
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetRankingModeWithInvalidRankerShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setRankingMode(10);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetRankingModeWithExpressionRankerWithoutExpressionShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setRankingMode(SphinxClient::SPH_RANK_EXPR);
+    }
+
+    public function testSetSortMode()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setSortMode(SphinxClient::SPH_SORT_RELEVANCE);
+        $this->assertSame($sphinx->sort, SphinxClient::SPH_SORT_RELEVANCE);
+
+        $sphinx = new SphinxClient();
+        $sphinx->setSortMode(SphinxClient::SPH_SORT_EXPR, '@count asc');
+        $this->assertSame($sphinx->sort, SphinxClient::SPH_SORT_EXPR);
+        $this->assertSame($sphinx->sortby, '@count asc');
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetSortModeWithInvalidSortModeShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setSortMode(6);
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetSortModeWithNonRelevanceSortWithoutExpressionShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setSortMode(SphinxClient::SPH_SORT_EXPR);
+    }
+
+    public function testSetFieldWeights()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFieldWeights(array('field1' => 10, 'field2' => 200));
+        $this->assertSame($sphinx->fieldweights, array('field1' => 10, 'field2' => 200));
+    }
+
+    public function testSetIndexWeights()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setIndexWeights(array('index1' => 20, 'index2' => 5));
+        $this->assertSame($sphinx->indexweights, array('index1' => 20, 'index2' => 5));
+    }
+
+    public function testSetIdRange()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setIdRange(1337, 9001);
+        $this->assertSame($sphinx->minid, 1337);
+        $this->assertSame($sphinx->maxid, 9001);
+
+        $sphinx = new SphinxClient();
+        $sphinx->setIdRange('184467440737095516160', '200000000000000000000');
+        $this->assertSame($sphinx->minid, '184467440737095516160');
+        $this->assertSame($sphinx->maxid, '200000000000000000000');
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetIdRangeWithMinLargerThanMaxShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setIdRange('200000000000000000000', '184467440737095516160');
+    }
+
+    public function testSetFilter()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilter('attr', array(9001, '184467440737095516160'), true);
+        $this->assertSame($sphinx->filters[0], array(
+            'type' => SphinxClient::SPH_FILTER_VALUES,
+            'attr' => 'attr',
+            'exclude' => true,
+            'values' => array(9001, '184467440737095516160')
+        ));
+    }
+
+    public function testSetFilterRange()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterRange('attr', 9001, '184467440737095516160', true);
+        $this->assertSame($sphinx->filters[0], array(
+            'type' => SphinxClient::SPH_FILTER_RANGE,
+            'attr' => 'attr',
+            'exclude' => true,
+            'min' => 9001,
+            'max' => '184467440737095516160'
+        ));
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetFilterRangeWithMinLargerThanMaxShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterRange('attr', 9001, 1337, true);
+    }
+
+    public function testSetFilterFloatRange()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterFloatRange('attr', 12.34, 23.456, true);
+        $this->assertSame($sphinx->filters[0], array(
+            'type' => SphinxClient::SPH_FILTER_FLOATRANGE,
+            'attr' => 'attr',
+            'exclude' => true,
+            'min' => 12.34,
+            'max' => 23.456
+        ));
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetFilterFloatRangeWithMinLargerThanMaxShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterFloatRange('attr', 23.456, 12.34, true);
+    }
+
+    public function testSetGeoAnchor()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGeoAnchor('lat', 'lng', 37.332, -122.031);
+        $this->assertSame($sphinx->anchor, array(
+            'attrlat' => 'lat',
+            'attrlong' => 'lng',
+            'lat' => 37.332,
+            'long' => -122.031
+        ));
+    }
+
+    public function testSetGroupBy()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGroupBy('attr', SphinxClient::SPH_GROUPBY_ATTR, '@group asc');
+        $this->assertSame($sphinx->groupby, 'attr');
+        $this->assertSame($sphinx->groupfunc, SphinxClient::SPH_GROUPBY_ATTR);
+        $this->assertSame($sphinx->groupsort, '@group asc');
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetGroupByWithInvalidGroupByShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGroupBy('attr', 6);
+    }
+
+    public function testSetGroupDistinct()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGroupDistinct('id');
+        $this->assertSame($sphinx->groupdistinct, 'id');
+    }
+
+    public function testSetRetries()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setRetries(3, 10);
+        $this->assertSame($sphinx->retrycount, 3);
+        $this->assertSame($sphinx->retrydelay, 10);
+    }
+
+    public function testSetArrayResult()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setArrayResult(true);
+        $this->assertTrue($sphinx->arrayresult);
+    }
+
+    public function testSetOverride()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setOverride('attr', SphinxClient::SPH_ATTR_INTEGER, array(1337 => 9001));
+        $this->assertSame($sphinx->overrides['attr'], array(
+            'attr' => 'attr',
+            'type' => SphinxClient::SPH_ATTR_INTEGER,
+            'values' => array(1337 => 9001)
+        ));
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     */
+    public function testSetOverrideWithInvalidAttributeTypeShouldThrowException()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setOverride('attr', 7, array());
+    }
+
+    public function testSetSelect()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setSelect('*, @weight + 10 as myweight');
+        $this->assertSame($sphinx->select, '*, @weight + 10 as myweight');
+    }
+
+    public function testResetFilters()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilter('attr', array(9001, '184467440737095516160'), true);
+        $sphinx->setGeoAnchor('lat', 'lng', 37.332, -122.031);
+        $sphinx->resetFilters();
+        $this->assertSame($sphinx->filters, array());
+        $this->assertSame($sphinx->anchor, array());
+    }
+
+    public function testResetGroupBy()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGroupBy('attr', SphinxClient::SPH_GROUPBY_ATTR, '@group asc');
+        $sphinx->setGroupDistinct('id');
+        $sphinx->resetGroupBy();
+        $this->assertSame($sphinx->groupby, '');
+        $this->assertSame($sphinx->groupfunc, SphinxClient::SPH_GROUPBY_DAY);
+        $this->assertSame($sphinx->groupsort, '@group desc');
+        $this->assertSame($sphinx->groupdistinct, '');
+    }
+
+    public function testResetOverrides()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setOverride('attr', SphinxClient::SPH_ATTR_INTEGER, array(1337 => 9001));
+        $sphinx->resetOverrides();
+        $this->assertSame($sphinx->overrides, array());
+    }
+
+    public function testEscapeString()
+    {
+        $sphinx = new SphinxClient();
+        $input = '\\()|#-!1@~ab"cde&/^$=';
+        $expected = '\\\\\(\)\|#\-\!1\@\~ab\"cde\&\/\^\$\=';
+        $this->assertSame($sphinx->escapeString($input), $expected);
+    }
+
+    /**
+     * The following tests require a working Sphinx setup
+     */
+
+    /**
+     * @dataProvider provideQuery
+     */
+    public function testQuery($query, $sphinx, $expected)
+    {
+        $results = $sphinx->query($query);
+        foreach ($expected as $key => $value) {
+            if ($key === 'matches') {
+                $this->assertEquals(array_keys($results['matches']), $value);
+            } else {
+                $this->assertEquals($results[$key], $value);
+            }
+        }
+    }
+
+    private function getSphinxClient()
+    {
+        return SphinxClient::create()
+            ->setMatchMode(SphinxClient::SPH_MATCH_ANY)
+            ->setSortMode(SphinxClient::SPH_SORT_RELEVANCE)
+            ->setRankingMode(SphinxClient::SPH_RANK_PROXIMITY_BM25)
+            ->setConnectTimeout(2);
+    }
+
+    public function provideQuery()
+    {
+        return array(
+            array(
+                'a',
+                $this->getSphinxClient()
+                     ->setMatchMode(SphinxClient::SPH_MATCH_ALL),
+                array(
+                    'fields' => array('field1', 'field2'),
+                    'attrs' => array('attr1' => 1, 'lat' => 5, 'long' => 5, 'stringattr' => 7),
+                    'matches' => array('1', '2', '3', '4'),
+                    'total' => 4,
+                    'total_found' => 4,
+                    'words' => array('a' => array('docs' => 4, 'hits' => 4))
+                )
+            ),
+            array(
+                'bb',
+                $this->getSphinxClient(),
+                array(
+                    'matches' => array('4', '5', '1', '2', '3')
+                )
+            ),
+            array(
+                'ccc dddd',
+                $this->getSphinxClient()
+                     ->setMatchMode(SphinxClient::SPH_MATCH_PHRASE)
+                     ->setSortMode(SphinxClient::SPH_SORT_ATTR_ASC, 'attr1'),
+                array(
+                    'matches' => array('3', '5', '4')
+                )
+            ),
+            array(
+                'bb ccc',
+                $this->getSphinxClient()
+                     ->setMatchMode(SphinxClient::SPH_MATCH_BOOLEAN)
+                     ->setSortMode(SphinxClient::SPH_SORT_ATTR_DESC, 'attr1'),
+                array(
+                    'matches' => array('4', '2', '5', '3')
+                )
+            ),
+            array(
+                'bb ccc',
+                $this->getSphinxClient()
+                     ->setSortMode(SphinxClient::SPH_SORT_EXTENDED, '@relevance DESC, attr1 ASC'),
+                array(
+                    'matches' => array('5', '4', '3', '2', '1')
+                )
+            ),
+            array(
+                'bb',
+                $this->getSphinxClient()
+                     ->setLimits(0, 2),
+                array(
+                    'matches' => array('4', '5')
+                )
+            ),
+            array(
+                '@field1 bb @field2 ccc',
+                $this->getSphinxClient()
+                     ->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED)
+                     ->setLimits(0, 20),
+                array(
+                    'matches' => array('4', '5')
+                )
+            ),
+            array(
+                'bb ccc',
+                $this->getSphinxClient()
+                     ->setWeights(array(10, 2)),
+                array(
+                    'matches' => array('4', '5', '2', '3', '1')
+                )
+            ),
+            array(
+                'bb ccc',
+                $this->getSphinxClient()
+                     ->setIndexWeights(array('sphinxtest' => 2)),
+                array(
+                    'matches' => array('4', '5', '2', '3', '1')
+                )
+            ),
+            array(
+                'bb ccc',
+                $this->getSphinxClient()
+                     ->setFieldWeights(array('field1' => 10, 'field2' => 2)),
+                array(
+                    'matches' => array('4', '5', '2', '3', '1')
+                )
+            ),
+            array(
+                'xx',
+                $this->getSphinxClient()
+                     ->setIdRange(0, '18446744073709551615'),
+                array(
+                    'matches' => array('9223372036854775807')
+                )
+            ),
+            array(
+                'bb' . $this->utf16to8('2122'),
+                $this->getSphinxClient()
+                     ->setIdRange(0, 0xFFFFFFFF),
+                array(
+                    'matches' => array('4', '5', '1', '2', '3'),
+                    'words' => array('bb' => array('docs' => 5, 'hits' => 8))
+                )
+            ),
+            array(
+                $keyword = $this->utf16to8('65e5672c8a9e'),
+                $this->getSphinxClient()
+                     ->setIdRange(0, 0xFFFFFFFF),
+                array(
+                    'matches' => array('6'),
+                    'words' => array($keyword => array('docs' => 1, 'hits' => 1))
+                )
+            )
+        );
+    }
+
+    public function testBuildExcerpts()
+    {
+        $sphinx = new SphinxClient();
+        $results = $sphinx->buildExcerpts(
+            array('bb bb ccc dddd', 'bb ccc dddd'),
+            'sphinxtest',
+            'ccc dddd'
+        );
+        $this->assertEquals($results, array(
+            'bb bb <b>ccc</b> <b>dddd</b>',
+            'bb <b>ccc</b> <b>dddd</b>'
+        ));
+    }
+
+    public function testBuildExcerptsWithUnicode()
+    {
+        $sphinx = new SphinxClient();
+        $keyword = $this->utf16to8('65e5672c8a9e');
+        $results = $sphinx->buildExcerpts(
+            array($keyword),
+            'sphinxtest',
+            $keyword
+        );
+        $this->assertEquals($results, array(
+            "<b>$keyword</b>"
+        ));
+    }
+
+    public function testBuildKeywords()
+    {
+        $sphinx = new SphinxClient();
+        $results = $sphinx->buildKeywords('bb-dddd', 'sphinxtest', 1);
+        $this->assertEquals($results, array(
+            array(
+                'tokenized' => 'bb',
+                'normalized' => 'bb',
+                'docs' => 5,
+                'hits' => 8
+            ),
+            array(
+                'tokenized' => 'dddd',
+                'normalized' => 'dddd',
+                'docs' => 3,
+                'hits' => 3
+            )
+        ));
+    }
+
+    public function testBuildKeywordsWithUnicode()
+    {
+        $sphinx = new SphinxClient();
+        $keyword = $this->utf16to8('65e5672c8a9e');
+        $results = $sphinx->buildKeywords($keyword, 'sphinxtest', 1);
+        $this->assertEquals($results, array(
+            array(
+                'tokenized' => $keyword,
+                'normalized' => $keyword,
+                'docs' => 1,
+                'hits' => 1
+            )
+        ));
+    }
+
+    public function testGroupBy()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGroupBy('lat', SphinxClient::SPH_GROUPBY_ATTR);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 3);
+        $sphinx->setGroupBy('attr1', SphinxClient::SPH_GROUPBY_ATTR);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 5);
+    }
+
+    public function testUpdateAttributes()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGroupBy('attr1', SphinxClient::SPH_GROUPBY_ATTR);
+        $sphinx->updateAttributes('sphinxtest', array('attr1'), array(
+            1 => array(10),
+            2 => array(10),
+            3 => array(20),
+            4 => array(20)
+        ));
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 3);
+
+        // restore attributes
+        $sphinx->updateAttributes('sphinxtest', array('attr1'), array(
+            1 => array(2),
+            2 => array(4),
+            3 => array(1),
+            4 => array(5)
+        ));
+    }
+
+    public function testFilter()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilter('attr1', array(1, 2, 3));
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 3);
+    }
+
+    public function testFilterExclude()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilter('attr1', array(1, 2, 3), true);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 2);
+    }
+
+    public function testFilterRange()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterRange('attr1', 4, 5);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 2);
+    }
+
+    public function testFilterRangeExclude()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterRange('attr1', 4, 5, true);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 3);
+    }
+
+    public function testFilterFloatRange()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterFloatRange('lat', 0.2, 0.4);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 3);
+    }
+
+    public function testFilterFloatRangeExclude()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setFilterFloatRange('lat', 0.2, 0.4, true);
+        $results = $sphinx->query('bb');
+        $this->assertEquals($results['total'], 2);
+    }
+
+    public function testFilterIdRange()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setIdRange(2, 4);
+        $results = $sphinx->query('bb');
+        $this->assertEquals(array_keys($results['matches']), array('4', '2', '3'));
+    }
+
+    public function testGeoAnchor()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setGeoAnchor('lat', 'long', 0.4, 0.4)
+               ->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED)
+               ->setSortMode(SphinxClient::SPH_SORT_EXTENDED, '@geodist desc')
+               ->setFilterFloatRange('@geodist', 0, 1934127);
+        $results = $sphinx->query('a');
+        $this->assertEquals(array_keys($results['matches']), array('1', '3', '4'));
+    }
+
+    public function testAddQuery()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->addQuery('ccc');
+        $sphinx->addQuery('dddd');
+        $results = $sphinx->runQueries();
+        $this->assertEquals(count($results), 2);
+    }
+
+    public function testAddQueryWithError()
+    {
+        $sphinx = new SphinxClient();
+        $sphinx->setMatchMode(SphinxClient::SPH_MATCH_EXTENDED);
+        $sphinx->addQuery('@ccc');
+        $sphinx->addQuery('dddd');
+        $results = $sphinx->runQueries();
+        $this->assertEquals(count($results), 2);
+        $this->assertGreaterThan(0, strlen($results[0]['error']));
+    }
+
+    public function testStatus()
+    {
+        $sphinx = new SphinxClient();
+        $status = $sphinx->status();
+        $this->assertGreaterThan(0, count($status));
+    }
+
+    private function utf16to8($code)
+    {
+        return mb_convert_encoding(pack('H*', $code), 'UTF-8', 'UTF-16BE');
+    }
+}
Index: vendor/gigablah/sphinxphp/tests/bootstrap.php
===================================================================
--- vendor/gigablah/sphinxphp/tests/bootstrap.php	(nonexistent)
+++ vendor/gigablah/sphinxphp/tests/bootstrap.php	(revision 57)
@@ -0,0 +1,8 @@
+<?php
+
+if (!is_file($autoloader = dirname(__DIR__) . '/vendor/autoload.php')) {
+    throw new \RuntimeException('Run "composer install --dev" to create the autoloader.');
+}
+
+$loader = require $autoloader;
+$loader->add('Sphinx\\Tests', __DIR__);
Index: vendor/guzzlehttp/guzzle/.travis.yml
===================================================================
--- vendor/guzzlehttp/guzzle/.travis.yml	(revision 55)
+++ vendor/guzzlehttp/guzzle/.travis.yml	(nonexistent)
@@ -1,41 +0,0 @@
-language: php
-
-sudo: false
-
-php:
-  - 5.5
-  - 5.6
-  - 7.0
-  - 7.1
-  - hhvm
-
-before_script:
-  - curl --version
-  - composer install --no-interaction --prefer-source --dev
-  - ~/.nvm/nvm.sh install v0.6.14
-  - ~/.nvm/nvm.sh run v0.6.14
-  - '[ "$TRAVIS_PHP_VERSION" != "7.0" ] || echo "xdebug.overload_var_dump = 1" >> ~/.phpenv/versions/$(phpenv version-name)/etc/php.ini'
-
-script: make test
-
-matrix:
-  allow_failures:
-    - php: hhvm
-  fast_finish: true
-
-before_deploy:
-  - rvm 1.9.3 do gem install mime-types -v 2.6.2
-  - make package
-
-deploy:
-  provider: releases
-  api_key:
-    secure: UpypqlYgsU68QT/x40YzhHXvzWjFwCNo9d+G8KAdm7U9+blFfcWhV1aMdzugvPMl6woXgvJj7qHq5tAL4v6oswCORhpSBfLgOQVFaica5LiHsvWlAedOhxGmnJqMTwuepjBCxXhs3+I8Kof1n4oUL9gKytXjOVCX/f7XU1HiinU=
-  file:
-    - build/artifacts/guzzle.phar
-    - build/artifacts/guzzle.zip
-  on:
-    repo: guzzle/guzzle
-    tags: true
-    all_branches: true
-    php: 5.5
Index: vendor/guzzlehttp/guzzle/CHANGELOG.md
===================================================================
--- vendor/guzzlehttp/guzzle/CHANGELOG.md	(revision 55)
+++ vendor/guzzlehttp/guzzle/CHANGELOG.md	(revision 57)
@@ -1,5 +1,26 @@
 # CHANGELOG
 
+## 6.3.0 - 2017-06-22
+
+* Feature: force IP resolution (ipv4 or ipv6) [#1608](https://github.com/guzzle/guzzle/pull/1608), [#1659](https://github.com/guzzle/guzzle/pull/1659)
+* Improvement: Don't include summary in exception message when body is empty [#1621](https://github.com/guzzle/guzzle/pull/1621)
+* Improvement: Handle `on_headers` option in MockHandler [#1580](https://github.com/guzzle/guzzle/pull/1580)
+* Improvement: Added SUSE Linux CA path [#1609](https://github.com/guzzle/guzzle/issues/1609)
+* Improvement: Use class reference for getting the name of the class instead of using hardcoded strings [#1641](https://github.com/guzzle/guzzle/pull/1641)
+* Feature: Added `read_timeout` option [#1611](https://github.com/guzzle/guzzle/pull/1611)
+* Bug fix: PHP 7.x fixes [#1685](https://github.com/guzzle/guzzle/pull/1685), [#1686](https://github.com/guzzle/guzzle/pull/1686), [#1811](https://github.com/guzzle/guzzle/pull/1811)
+* Deprecation: BadResponseException instantiation without a response [#1642](https://github.com/guzzle/guzzle/pull/1642)
+* Feature: Added NTLM auth [#1569](https://github.com/guzzle/guzzle/pull/1569)
+* Feature: Track redirect HTTP status codes [#1711](https://github.com/guzzle/guzzle/pull/1711)
+* Improvement: Check handler type during construction [#1745](https://github.com/guzzle/guzzle/pull/1745)
+* Improvement: Always include the Content-Length if there's a body [#1721](https://github.com/guzzle/guzzle/pull/1721)
+* Feature: Added convenience method to access a cookie by name [#1318](https://github.com/guzzle/guzzle/pull/1318)
+* Bug fix: Fill `CURLOPT_CAPATH` and `CURLOPT_CAINFO` properly [#1684](https://github.com/guzzle/guzzle/pull/1684)
+* Improvement:  	Use `\GuzzleHttp\Promise\rejection_for` function instead of object init [#1827](https://github.com/guzzle/guzzle/pull/1827)
+
+
++ Minor code cleanups, documentation fixes and clarifications.
+
 ## 6.2.3 - 2017-02-28
 
 * Fix deprecations with guzzle/psr7 version 1.4
Index: vendor/guzzlehttp/guzzle/README.md
===================================================================
--- vendor/guzzlehttp/guzzle/README.md	(revision 55)
+++ vendor/guzzlehttp/guzzle/README.md	(revision 57)
@@ -19,15 +19,13 @@
 
 ```php
 $client = new \GuzzleHttp\Client();
-$res = $client->request('GET', 'https://api.github.com/user', [
-    'auth' => ['user', 'pass']
-]);
+$res = $client->request('GET', 'https://api.github.com/repos/guzzle/guzzle');
 echo $res->getStatusCode();
 // 200
 echo $res->getHeaderLine('content-type');
 // 'application/json; charset=utf8'
 echo $res->getBody();
-// {"type":"User"...'
+// '{"id": 1420053, "name": "guzzle", ...}'
 
 // Send an asynchronous request.
 $request = new \GuzzleHttp\Psr7\Request('GET', 'http://httpbin.org');
@@ -40,7 +38,7 @@
 ## Help and docs
 
 - [Documentation](http://guzzlephp.org/)
-- [stackoverflow](http://stackoverflow.com/questions/tagged/guzzle)
+- [Stack Overflow](http://stackoverflow.com/questions/tagged/guzzle)
 - [Gitter](https://gitter.im/guzzle/guzzle)
 
 
@@ -75,14 +73,15 @@
 
 ## Version Guidance
 
-| Version | Status      | Packagist           | Namespace    | Repo                | Docs                | PSR-7 |
-|---------|-------------|---------------------|--------------|---------------------|---------------------|-------|
-| 3.x     | EOL         | `guzzle/guzzle`     | `Guzzle`     | [v3][guzzle-3-repo] | [v3][guzzle-3-docs] | No    |
-| 4.x     | EOL         | `guzzlehttp/guzzle` | `GuzzleHttp` | N/A                 | N/A                 | No    |
-| 5.x     | Maintained  | `guzzlehttp/guzzle` | `GuzzleHttp` | [v5][guzzle-5-repo] | [v5][guzzle-5-docs] | No    |
-| 6.x     | Latest      | `guzzlehttp/guzzle` | `GuzzleHttp` | [v6][guzzle-6-repo] | [v6][guzzle-6-docs] | Yes   |
+| Version | Status     | Packagist           | Namespace    | Repo                | Docs                | PSR-7 | PHP Version |
+|---------|------------|---------------------|--------------|---------------------|---------------------|-------|-------------|
+| 3.x     | EOL        | `guzzle/guzzle`     | `Guzzle`     | [v3][guzzle-3-repo] | [v3][guzzle-3-docs] | No    | >= 5.3.3    |
+| 4.x     | EOL        | `guzzlehttp/guzzle` | `GuzzleHttp` | [v4][guzzle-4-repo] | N/A                 | No    | >= 5.4      |
+| 5.x     | Maintained | `guzzlehttp/guzzle` | `GuzzleHttp` | [v5][guzzle-5-repo] | [v5][guzzle-5-docs] | No    | >= 5.4      |
+| 6.x     | Latest     | `guzzlehttp/guzzle` | `GuzzleHttp` | [v6][guzzle-6-repo] | [v6][guzzle-6-docs] | Yes   | >= 5.5      |
 
 [guzzle-3-repo]: https://github.com/guzzle/guzzle3
+[guzzle-4-repo]: https://github.com/guzzle/guzzle/tree/4.x
 [guzzle-5-repo]: https://github.com/guzzle/guzzle/tree/5.3
 [guzzle-6-repo]: https://github.com/guzzle/guzzle
 [guzzle-3-docs]: http://guzzle3.readthedocs.org/en/latest/
Index: vendor/guzzlehttp/guzzle/composer.json
===================================================================
--- vendor/guzzlehttp/guzzle/composer.json	(revision 55)
+++ vendor/guzzlehttp/guzzle/composer.json	(revision 57)
@@ -19,7 +19,7 @@
     },
     "require-dev": {
         "ext-curl": "*",
-        "phpunit/phpunit": "^4.0",
+        "phpunit/phpunit": "^4.0 || ^5.0",
         "psr/log": "^1.0"
     },
     "autoload": {
@@ -33,6 +33,9 @@
             "GuzzleHttp\\Tests\\": "tests/"
         }
     },
+    "suggest": {
+        "psr/log": "Required for using the Log middleware"
+    },
     "extra": {
         "branch-alias": {
             "dev-master": "6.2-dev"
Index: vendor/guzzlehttp/guzzle/src/Client.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Client.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Client.php	(revision 57)
@@ -63,6 +63,8 @@
     {
         if (!isset($config['handler'])) {
             $config['handler'] = HandlerStack::create();
+        } elseif (!is_callable($config['handler'])) {
+            throw new \InvalidArgumentException('handler must be a callable');
         }
 
         // Convert the base_uri to a UriInterface
@@ -350,6 +352,10 @@
                     $options['curl'][CURLOPT_HTTPAUTH] = CURLAUTH_DIGEST;
                     $options['curl'][CURLOPT_USERPWD] = "$value[0]:$value[1]";
                     break;
+                case 'ntlm':
+                    $options['curl'][CURLOPT_HTTPAUTH] = CURLAUTH_NTLM;
+                    $options['curl'][CURLOPT_USERPWD] = "$value[0]:$value[1]";
+                    break;
             }
         }
 
@@ -402,7 +408,7 @@
         throw new \InvalidArgumentException('Passing in the "body" request '
             . 'option as an array to send a POST request has been deprecated. '
             . 'Please use the "form_params" request option to send a '
-            . 'application/x-www-form-urlencoded request, or a the "multipart" '
+            . 'application/x-www-form-urlencoded request, or the "multipart" '
             . 'request option to send a multipart/form-data request.');
     }
 }
Index: vendor/guzzlehttp/guzzle/src/Cookie/CookieJar.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Cookie/CookieJar.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Cookie/CookieJar.php	(revision 57)
@@ -86,6 +86,25 @@
         return false;
     }
 
+    /**
+     * Finds and returns the cookie based on the name
+     *
+     * @param string $name cookie name to search for
+     * @return SetCookie|null cookie that was found or null if not found
+     */
+    public function getCookieByName($name)
+    {
+        // don't allow a null name
+        if($name === null) {
+            return null;
+        }
+        foreach($this->cookies as $cookie) {
+            if($cookie->getName() !== null && strcasecmp($cookie->getName(), $name) === 0) {
+                return $cookie;
+            }
+        }
+    }
+
     public function toArray()
     {
         return array_map(function (SetCookie $cookie) {
@@ -216,11 +235,41 @@
                 if (!$sc->getDomain()) {
                     $sc->setDomain($request->getUri()->getHost());
                 }
+                if (0 !== strpos($sc->getPath(), '/')) {
+                    $sc->setPath($this->getCookiePathFromRequest($request));
+                }
                 $this->setCookie($sc);
             }
         }
     }
 
+    /**
+     * Computes cookie path following RFC 6265 section 5.1.4
+     *
+     * @link https://tools.ietf.org/html/rfc6265#section-5.1.4
+     *
+     * @param RequestInterface $request
+     * @return string
+     */
+    private function getCookiePathFromRequest(RequestInterface $request)
+    {
+        $uriPath = $request->getUri()->getPath();
+        if (''  === $uriPath) {
+            return '/';
+        }
+        if (0 !== strpos($uriPath, '/')) {
+            return '/';
+        }
+        if ('/' === $uriPath) {
+            return '/';
+        }
+        if (0 === $lastSlashPos = strrpos($uriPath, '/')) {
+            return '/';
+        }
+
+        return substr($uriPath, 0, $lastSlashPos);
+    }
+
     public function withCookieHeader(RequestInterface $request)
     {
         $values = [];
Index: vendor/guzzlehttp/guzzle/src/Exception/BadResponseException.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Exception/BadResponseException.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Exception/BadResponseException.php	(revision 57)
@@ -1,7 +1,27 @@
 <?php
 namespace GuzzleHttp\Exception;
 
+use Psr\Http\Message\RequestInterface;
+use Psr\Http\Message\ResponseInterface;
+
 /**
  * Exception when an HTTP error occurs (4xx or 5xx error)
  */
-class BadResponseException extends RequestException {}
+class BadResponseException extends RequestException
+{
+    public function __construct(
+        $message,
+        RequestInterface $request,
+        ResponseInterface $response = null,
+        \Exception $previous = null,
+        array $handlerContext = []
+    ) {
+        if (null === $response) {
+            @trigger_error(
+                'Instantiating the ' . __CLASS__ . ' class without a Response is deprecated since version 6.3 and will be removed in 7.0.',
+                E_USER_DEPRECATED
+            );
+        }
+        parent::__construct($message, $request, $response, $previous, $handlerContext);
+    }
+}
Index: vendor/guzzlehttp/guzzle/src/Exception/RequestException.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Exception/RequestException.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Exception/RequestException.php	(revision 57)
@@ -81,10 +81,10 @@
         $level = (int) floor($response->getStatusCode() / 100);
         if ($level === 4) {
             $label = 'Client error';
-            $className = __NAMESPACE__ . '\\ClientException';
+            $className = ClientException::class;
         } elseif ($level === 5) {
             $label = 'Server error';
-            $className = __NAMESPACE__ . '\\ServerException';
+            $className = ServerException::class;
         } else {
             $label = 'Unsuccessful request';
             $className = __CLASS__;
@@ -93,13 +93,15 @@
         $uri = $request->getUri();
         $uri = static::obfuscateUri($uri);
 
-        // Server Error: `GET /` resulted in a `404 Not Found` response:
+        // Client Error: `GET /` resulted in a `404 Not Found` response:
         // <html> ... (truncated)
         $message = sprintf(
-            '%s: `%s` resulted in a `%s` response',
+            '%s: `%s %s` resulted in a `%s %s` response',
             $label,
-            $request->getMethod() . ' ' . $uri,
-            $response->getStatusCode() . ' ' . $response->getReasonPhrase()
+            $request->getMethod(),
+            $uri,
+            $response->getStatusCode(),
+            $response->getReasonPhrase()
         );
 
         $summary = static::getResponseBodySummary($response);
@@ -129,6 +131,11 @@
         }
 
         $size = $body->getSize();
+
+        if ($size === 0) {
+            return null;
+        }
+
         $summary = $body->read(120);
         $body->rewind();
 
Index: vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Handler/CurlFactory.php	(revision 57)
@@ -16,7 +16,7 @@
 class CurlFactory implements CurlFactoryInterface
 {
     /** @var array */
-    private $handles;
+    private $handles = [];
 
     /** @var int Total number of idle handles to keep in cache */
     private $maxHandles;
@@ -163,7 +163,7 @@
         // If an exception was encountered during the onHeaders event, then
         // return a rejected promise that wraps that exception.
         if ($easy->onHeadersException) {
-            return new RejectedPromise(
+            return \GuzzleHttp\Promise\rejection_for(
                 new RequestException(
                     'An error was encountered during the on_headers event',
                     $easy->request,
@@ -186,7 +186,7 @@
             ? new ConnectException($message, $easy->request, null, $ctx)
             : new RequestException($message, $easy->request, $easy->response, null, $ctx);
 
-        return new RejectedPromise($error);
+        return \GuzzleHttp\Promise\rejection_for($error);
     }
 
     private function getDefaultConf(EasyHandle $easy)
@@ -326,12 +326,20 @@
                 $conf[CURLOPT_SSL_VERIFYHOST] = 2;
                 $conf[CURLOPT_SSL_VERIFYPEER] = true;
                 if (is_string($options['verify'])) {
-                    $conf[CURLOPT_CAINFO] = $options['verify'];
+                    // Throw an error if the file/folder/link path is not valid or doesn't exist.
                     if (!file_exists($options['verify'])) {
                         throw new \InvalidArgumentException(
                             "SSL CA bundle not found: {$options['verify']}"
                         );
                     }
+                    // If it's a directory or a link to a directory use CURLOPT_CAPATH.
+                    // If not, it's probably a file, or a link to a file, so use CURLOPT_CAINFO.
+                    if (is_dir($options['verify']) ||
+                        (is_link($options['verify']) && is_dir(readlink($options['verify'])))) {
+                        $conf[CURLOPT_CAPATH] = $options['verify'];
+                    } else {
+                        $conf[CURLOPT_CAINFO] = $options['verify'];
+                    }
                 }
             }
         }
@@ -370,15 +378,30 @@
             $conf[CURLOPT_FILE] = fopen('php://temp', 'w+');
             $easy->sink = Psr7\stream_for($conf[CURLOPT_FILE]);
         }
-
+        $timeoutRequiresNoSignal = false;
         if (isset($options['timeout'])) {
+            $timeoutRequiresNoSignal |= $options['timeout'] < 1;
             $conf[CURLOPT_TIMEOUT_MS] = $options['timeout'] * 1000;
         }
 
+        // CURL default value is CURL_IPRESOLVE_WHATEVER
+        if (isset($options['force_ip_resolve'])) {
+            if ('v4' === $options['force_ip_resolve']) {
+                $conf[CURLOPT_IPRESOLVE] = CURL_IPRESOLVE_V4;
+            } else if ('v6' === $options['force_ip_resolve']) {
+                $conf[CURLOPT_IPRESOLVE] = CURL_IPRESOLVE_V6;
+            }
+        }
+
         if (isset($options['connect_timeout'])) {
+            $timeoutRequiresNoSignal |= $options['connect_timeout'] < 1;
             $conf[CURLOPT_CONNECTTIMEOUT_MS] = $options['connect_timeout'] * 1000;
         }
 
+        if ($timeoutRequiresNoSignal && strtoupper(substr(PHP_OS, 0, 3)) !== 'WIN') {
+            $conf[CURLOPT_NOSIGNAL] = true;
+        }
+
         if (isset($options['proxy'])) {
             if (!is_array($options['proxy'])) {
                 $conf[CURLOPT_PROXY] = $options['proxy'];
Index: vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Handler/MockHandler.php	(revision 57)
@@ -1,6 +1,7 @@
 <?php
 namespace GuzzleHttp\Handler;
 
+use GuzzleHttp\Exception\RequestException;
 use GuzzleHttp\HandlerStack;
 use GuzzleHttp\Promise\PromiseInterface;
 use GuzzleHttp\Promise\RejectedPromise;
@@ -13,7 +14,7 @@
  */
 class MockHandler implements \Countable
 {
-    private $queue;
+    private $queue = [];
     private $lastRequest;
     private $lastOptions;
     private $onFulfilled;
@@ -73,12 +74,24 @@
         $this->lastOptions = $options;
         $response = array_shift($this->queue);
 
+        if (isset($options['on_headers'])) {
+            if (!is_callable($options['on_headers'])) {
+                throw new \InvalidArgumentException('on_headers must be callable');
+            }
+            try {
+                $options['on_headers']($response);
+            } catch (\Exception $e) {
+                $msg = 'An error was encountered during the on_headers event';
+                $response = new RequestException($msg, $request, $response, $e);
+            }
+        }
+
         if (is_callable($response)) {
             $response = call_user_func($response, $request, $options);
         }
 
         $response = $response instanceof \Exception
-            ? new RejectedPromise($response)
+            ? \GuzzleHttp\Promise\rejection_for($response)
             : \GuzzleHttp\Promise\promise_for($response);
 
         return $response->then(
@@ -107,7 +120,7 @@
                 if ($this->onRejected) {
                     call_user_func($this->onRejected, $reason);
                 }
-                return new RejectedPromise($reason);
+                return \GuzzleHttp\Promise\rejection_for($reason);
             }
         );
     }
@@ -145,7 +158,7 @@
     /**
      * Get the last received request options.
      *
-     * @return RequestInterface
+     * @return array
      */
     public function getLastOptions()
     {
Index: vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Handler/StreamHandler.php	(revision 57)
@@ -67,7 +67,7 @@
             $e = RequestException::wrapException($request, $e);
             $this->invokeStats($options, $request, $startTime, null, $e);
 
-            return new RejectedPromise($e);
+            return \GuzzleHttp\Promise\rejection_for($e);
         }
     }
 
@@ -119,7 +119,7 @@
             } catch (\Exception $e) {
                 $msg = 'An error was encountered during the on_headers event';
                 $ex = new RequestException($msg, $request, $response, $e);
-                return new RejectedPromise($ex);
+                return \GuzzleHttp\Promise\rejection_for($ex);
             }
         }
 
@@ -301,6 +301,18 @@
             );
         }
 
+        // Microsoft NTLM authentication only supported with curl handler
+        if (isset($options['auth'])
+            && is_array($options['auth'])
+            && isset($options['auth'][2])
+            && 'ntlm' == $options['auth'][2]
+        ) {
+
+            throw new \InvalidArgumentException('Microsoft NTLM authentication only supported with curl handler');
+        }
+
+        $uri = $this->resolveHost($request, $options);
+
         $context = $this->createResource(
             function () use ($context, $params) {
                 return stream_context_create($context, $params);
@@ -308,14 +320,45 @@
         );
 
         return $this->createResource(
-            function () use ($request, &$http_response_header, $context) {
-                $resource = fopen((string) $request->getUri()->withFragment(''), 'r', null, $context);
+            function () use ($uri, &$http_response_header, $context, $options) {
+                $resource = fopen((string) $uri, 'r', null, $context);
                 $this->lastHeaders = $http_response_header;
+
+                if (isset($options['read_timeout'])) {
+                    $readTimeout = $options['read_timeout'];
+                    $sec = (int) $readTimeout;
+                    $usec = ($readTimeout - $sec) * 100000;
+                    stream_set_timeout($resource, $sec, $usec);
+                }
+
                 return $resource;
             }
         );
     }
 
+    private function resolveHost(RequestInterface $request, array $options)
+    {
+        $uri = $request->getUri();
+
+        if (isset($options['force_ip_resolve']) && !filter_var($uri->getHost(), FILTER_VALIDATE_IP)) {
+            if ('v4' === $options['force_ip_resolve']) {
+                $records = dns_get_record($uri->getHost(), DNS_A);
+                if (!isset($records[0]['ip'])) {
+                    throw new ConnectException(sprintf("Could not resolve IPv4 address for host '%s'", $uri->getHost()), $request);
+                }
+                $uri = $uri->withHost($records[0]['ip']);
+            } elseif ('v6' === $options['force_ip_resolve']) {
+                $records = dns_get_record($uri->getHost(), DNS_AAAA);
+                if (!isset($records[0]['ipv6'])) {
+                    throw new ConnectException(sprintf("Could not resolve IPv6 address for host '%s'", $uri->getHost()), $request);
+                }
+                $uri = $uri->withHost('[' . $records[0]['ipv6'] . ']');
+            }
+        }
+
+        return $uri;
+    }
+
     private function getDefaultContext(RequestInterface $request)
     {
         $headers = '';
Index: vendor/guzzlehttp/guzzle/src/Middleware.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/Middleware.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/Middleware.php	(revision 57)
@@ -102,7 +102,7 @@
                             'error'    => $reason,
                             'options'  => $options
                         ];
-                        return new RejectedPromise($reason);
+                        return \GuzzleHttp\Promise\rejection_for($reason);
                     }
                 );
             };
Index: vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/PrepareBodyMiddleware.php	(revision 57)
@@ -14,9 +14,6 @@
     /** @var callable  */
     private $nextHandler;
 
-    /** @var array */
-    private static $skipMethods = ['GET' => true, 'HEAD' => true];
-
     /**
      * @param callable $nextHandler Next handler to invoke.
      */
@@ -36,9 +33,7 @@
         $fn = $this->nextHandler;
 
         // Don't do anything if the request has no body.
-        if (isset(self::$skipMethods[$request->getMethod()])
-            || $request->getBody()->getSize() === 0
-        ) {
+        if ($request->getBody()->getSize() === 0) {
             return $fn($request, $options);
         }
 
@@ -54,8 +49,7 @@
         }
 
         // Add a default content-length or transfer-encoding header.
-        if (!isset(self::$skipMethods[$request->getMethod()])
-            && !$request->hasHeader('Content-Length')
+        if (!$request->hasHeader('Content-Length')
             && !$request->hasHeader('Transfer-Encoding')
         ) {
             $size = $request->getBody()->getSize();
Index: vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/RedirectMiddleware.php	(revision 57)
@@ -19,6 +19,8 @@
 {
     const HISTORY_HEADER = 'X-Guzzle-Redirect-History';
 
+    const STATUS_HISTORY_HEADER = 'X-Guzzle-Redirect-Status-History';
+
     public static $defaultSettings = [
         'max'             => 5,
         'protocols'       => ['http', 'https'],
@@ -108,23 +110,27 @@
         if (!empty($options['allow_redirects']['track_redirects'])) {
             return $this->withTracking(
                 $promise,
-                (string) $nextRequest->getUri()
+                (string) $nextRequest->getUri(),
+                $response->getStatusCode()
             );
         }
 
         return $promise;
     }
 
-    private function withTracking(PromiseInterface $promise, $uri)
+    private function withTracking(PromiseInterface $promise, $uri, $statusCode)
     {
         return $promise->then(
-            function (ResponseInterface $response) use ($uri) {
+            function (ResponseInterface $response) use ($uri, $statusCode) {
                 // Note that we are pushing to the front of the list as this
                 // would be an earlier response than what is currently present
                 // in the history header.
-                $header = $response->getHeader(self::HISTORY_HEADER);
-                array_unshift($header, $uri);
-                return $response->withHeader(self::HISTORY_HEADER, $header);
+                $historyHeader = $response->getHeader(self::HISTORY_HEADER);
+                $statusHeader = $response->getHeader(self::STATUS_HISTORY_HEADER);
+                array_unshift($historyHeader, $uri);
+                array_unshift($statusHeader, $statusCode);
+                return $response->withHeader(self::HISTORY_HEADER, $historyHeader)
+                                ->withHeader(self::STATUS_HISTORY_HEADER, $statusHeader);
             }
         );
     }
Index: vendor/guzzlehttp/guzzle/src/RequestOptions.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/RequestOptions.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/RequestOptions.php	(revision 57)
@@ -238,7 +238,18 @@
     const TIMEOUT = 'timeout';
 
     /**
+     * read_timeout: (float, default=default_socket_timeout ini setting) Float describing
+     * the body read timeout, for stream requests.
+     */
+    const READ_TIMEOUT = 'read_timeout';
+
+    /**
      * version: (float) Specifies the HTTP protocol version to attempt to use.
      */
     const VERSION = 'version';
+
+    /**
+     * force_ip_resolve: (bool) Force client to use only ipv4 or ipv6 protocol
+     */
+    const FORCE_IP_RESOLVE = 'force_ip_resolve';
 }
Index: vendor/guzzlehttp/guzzle/src/RetryMiddleware.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/RetryMiddleware.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/RetryMiddleware.php	(revision 57)
@@ -97,7 +97,7 @@
                 null,
                 $reason
             )) {
-                return new RejectedPromise($reason);
+                return \GuzzleHttp\Promise\rejection_for($reason);
             }
             return $this->doRetry($req, $options);
         };
Index: vendor/guzzlehttp/guzzle/src/functions.php
===================================================================
--- vendor/guzzlehttp/guzzle/src/functions.php	(revision 55)
+++ vendor/guzzlehttp/guzzle/src/functions.php	(revision 57)
@@ -167,6 +167,8 @@
         '/etc/ssl/certs/ca-certificates.crt',
         // FreeBSD (provided by the ca_root_nss package)
         '/usr/local/share/certs/ca-root-nss.crt',
+        // SLES 12 (provided by the ca-certificates package)
+        '/var/lib/ca-certificates/ca-bundle.pem',
         // OS X provided by homebrew (using the default path)
         '/usr/local/etc/openssl/cert.pem',
         // Google app engine
Index: vendor/intervention/image/composer.json
===================================================================
--- vendor/intervention/image/composer.json	(revision 55)
+++ vendor/intervention/image/composer.json	(revision 57)
@@ -7,8 +7,8 @@
     "authors": [
         {
             "name": "Oliver Vogel",
-            "email": "oliver@olivervogel.net",
-            "homepage": "http://olivervogel.net/"
+            "email": "oliver@olivervogel.com",
+            "homepage": "http://olivervogel.com/"
         }
     ],
     "require": {
@@ -17,7 +17,7 @@
         "guzzlehttp/psr7": "~1.1"
     },
     "require-dev": {
-        "phpunit/phpunit": "3.*",
+        "phpunit/phpunit": "^4.8 || ^5.7",
         "mockery/mockery": "~0.9.2"
     },
     "suggest": {
@@ -33,6 +33,14 @@
     "extra": {
         "branch-alias": {
             "dev-master": "2.3-dev"
+        },
+        "laravel": {
+            "providers": [
+                "Intervention\\Image\\ImageServiceProvider"
+            ],
+            "aliases": {
+                "Image": "Intervention\\Image\\Facades\\Image"
+            }
         }
     },
     "minimum-stability": "stable"
Index: vendor/intervention/image/src/Intervention/Image/AbstractDecoder.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/AbstractDecoder.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/AbstractDecoder.php	(revision 57)
@@ -2,6 +2,9 @@
 
 namespace Intervention\Image;
 
+use GuzzleHttp\Psr7\Stream;
+use Psr\Http\Message\StreamInterface;
+
 abstract class AbstractDecoder
 {
     /**
@@ -85,22 +88,35 @@
     /**
      * Init from given stream
      *
-     * @param $stream
+     * @param StreamInterface|resource $stream
      * @return \Intervention\Image\Image
      */
     public function initFromStream($stream)
     {
-        $offset = ftell($stream);
-        $shouldAndCanSeek = $offset !== 0 && $this->isStreamSeekable($stream);
+        if (!$stream instanceof StreamInterface) {
+            $stream = new Stream($stream);
+        }
+
+        try {
+            $offset = $stream->tell();
+        } catch (\RuntimeException $e) {
+            $offset = 0;
+        }
+
+        $shouldAndCanSeek = $offset !== 0 && $stream->isSeekable();
 
         if ($shouldAndCanSeek) {
-            rewind($stream);
+            $stream->rewind();
         }
 
-        $data = @stream_get_contents($stream);
+        try {
+            $data = $stream->getContents();
+        } catch (\RuntimeException $e) {
+            $data = null;
+        }
 
         if ($shouldAndCanSeek) {
-            fseek($stream, $offset);
+            $stream->seek($offset);
         }
 
         if ($data) {
@@ -113,18 +129,6 @@
     }
 
     /**
-     * Checks if we can move the pointer for this stream
-     *
-     * @param resource $stream
-     * @return bool
-     */
-    private function isStreamSeekable($stream)
-    {
-        $metadata = stream_get_meta_data($stream);
-        return $metadata['seekable'];
-    }
-
-    /**
      * Determines if current source data is GD resource
      *
      * @return boolean
@@ -213,6 +217,7 @@
      */
     public function isStream()
     {
+        if ($this->data instanceof StreamInterface) return true;
         if (!is_resource($this->data)) return false;
         if (get_resource_type($this->data) !== 'stream') return false;
 
@@ -332,6 +337,7 @@
             case $this->isFilePath():
                 return $this->initFromPath($this->data);
 
+            // isBase64 has to be after isFilePath to prevent false positives
             case $this->isBase64():
                 return $this->initFromBinary(base64_decode($this->data));
 
Index: vendor/intervention/image/src/Intervention/Image/AbstractEncoder.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/AbstractEncoder.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/AbstractEncoder.php	(revision 57)
@@ -75,6 +75,13 @@
     abstract protected function processIco();
 
     /**
+     * Processes and returns image as WebP encoded string
+     *
+     * @return string
+     */
+    abstract protected function processWebp();
+
+    /**
      * Process a given image
      *
      * @param  Image   $image
@@ -145,6 +152,12 @@
             case 'image/vnd.adobe.photoshop':
                 $this->result = $this->processPsd();
                 break;
+
+            case 'webp':
+            case 'image/webp':
+            case 'image/x-webp':
+                $this->result = $this->processWebp();
+                break;
                 
             default:
                 throw new \Intervention\Image\Exception\NotSupportedException(
Index: vendor/intervention/image/src/Intervention/Image/Constraint.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/Constraint.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/Constraint.php	(revision 57)
@@ -50,6 +50,7 @@
 
     /**
      * Fix the given argument in current constraint
+     *
      * @param  integer $type
      * @return void
      */
Index: vendor/intervention/image/src/Intervention/Image/Gd/Decoder.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/Gd/Decoder.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/Gd/Decoder.php	(revision 57)
@@ -14,37 +14,54 @@
      */
     public function initFromPath($path)
     {
-        $info = @getimagesize($path);
-
-        if ($info === false) {
+        if ( ! file_exists($path)) {
             throw new \Intervention\Image\Exception\NotReadableException(
-                "Unable to read image from file ({$path})."
+                "Unable to find file ({$path})."
             );
         }
 
+        // get mime type of file
+        $mime = finfo_file(finfo_open(FILEINFO_MIME_TYPE), $path);
+
         // define core
-        switch ($info[2]) {
-            case IMAGETYPE_PNG:
+        switch (strtolower($mime)) {
+            case 'image/png':
+            case 'image/x-png':
                 $core = @imagecreatefrompng($path);
                 break;
 
-            case IMAGETYPE_JPEG:
-                $core = @imagecreatefromjpeg($path);
+            case 'image/jpg':
+            case 'image/jpeg':
+            case 'image/pjpeg':
+                $core = @imagecreatefromjpeg($path); 
+                if (!$core) { 
+                    $core= @imagecreatefromstring(file_get_contents($path)); 
+                }
                 break;
 
-            case IMAGETYPE_GIF:
+            case 'image/gif':
                 $core = @imagecreatefromgif($path);
                 break;
 
+            case 'image/webp':
+            case 'image/x-webp':
+                if ( ! function_exists('imagecreatefromwebp')) {
+                    throw new \Intervention\Image\Exception\NotReadableException(
+                        "Unsupported image type. GD/PHP installation does not support WebP format."
+                    );
+                }
+                $core = @imagecreatefromwebp($path);
+                break;
+
             default:
                 throw new \Intervention\Image\Exception\NotReadableException(
-                    "Unable to read image type. GD driver is only able to decode JPG, PNG or GIF files."
+                    "Unsupported image type. GD driver is only able to decode JPG, PNG, GIF or WebP files."
                 );
         }
 
         if (empty($core)) {
             throw new \Intervention\Image\Exception\NotReadableException(
-                "Unable to read image from file ({$path})."
+                "Unable to decode image from file ({$path})."
             );
         }
 
@@ -52,7 +69,7 @@
 
         // build image
         $image = $this->initFromGdResource($core);
-        $image->mime = $info['mime'];
+        $image->mime = $mime;
         $image->setFileInfoFromPath($path);
 
         return $image;
Index: vendor/intervention/image/src/Intervention/Image/Gd/Encoder.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/Gd/Encoder.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/Gd/Encoder.php	(revision 57)
@@ -55,6 +55,23 @@
         return $buffer;
     }
 
+    protected function processWebp()
+    {
+        if ( ! function_exists('imagewebp')) {
+            throw new \Intervention\Image\Exception\NotSupportedException(
+                "Webp format is not supported by PHP installation."
+            );
+        }
+
+        ob_start();
+        imagewebp($this->image->getCore(), null, $this->quality);
+        $this->image->mime = defined('IMAGETYPE_WEBP') ? image_type_to_mime_type(IMAGETYPE_WEBP) : 'image/webp';
+        $buffer = ob_get_contents();
+        ob_end_clean();
+        
+        return $buffer;
+    }
+
     /**
      * Processes and returns encoded image as TIFF string
      *
Index: vendor/intervention/image/src/Intervention/Image/Image.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/Image.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/Image.php	(revision 57)
@@ -43,7 +43,7 @@
  * @method \Intervention\Image\Image resize(integer $width, integer $height, \Closure $callback = null)                                                                   Resizes current image based on given width and/or height. To contraint the resize command, pass an optional Closure callback as third parameter.
  * @method \Intervention\Image\Image resizeCanvas(integer $width, integer $height, string $anchor = 'center', boolean $relative = false, mixed $bgcolor = null)           Resize the boundaries of the current image to given width and height. An anchor can be defined to determine from what point of the image the resizing is going to happen. Set the mode to relative to add or subtract the given width or height to the actual image dimensions. You can also pass a background color for the emerging area of the image.
  * @method mixed                     response(string $format = null, integer $quality = 90)                                                                               Sends HTTP response with current image in given format and quality.
- * @method \Intervention\Image\Image rotate(float $angle, string $bgcolor = '#000000')                                                                                    Rotate the current image counter-clockwise by a given angle. Optionally define a background color for the uncovered zone after the rotation.
+ * @method \Intervention\Image\Image rotate(float $angle, mixed $bgcolor = null)                                                                                          Rotate the current image counter-clockwise by a given angle. Optionally define a background color for the uncovered zone after the rotation.
  * @method \Intervention\Image\Image sharpen(integer $amount = 10)                                                                                                        Sharpen current image with an optional amount. Use values between 0 and 100.
  * @method \Intervention\Image\Image text(string $text, integer $x = 0, integer $y = 0, \Closure $callback = null)                                                        Write a text string to the current image at an optional x,y basepoint position. You can define more details like font-size, font-file and alignment via a callback as the fourth parameter.
  * @method \Intervention\Image\Image trim(string $base = 'top-left', array $away = array('top', 'bottom', 'left', 'right'), integer $tolerance = 0, integer $feather = 0) Trim away image space in given color. Define an optional base to pick a color at a certain position and borders that should be trimmed away. You can also set an optional tolerance level, to trim similar colors and add a feathering border around the trimed image.
Index: vendor/intervention/image/src/Intervention/Image/ImageServiceProvider.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/ImageServiceProvider.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/ImageServiceProvider.php	(revision 57)
@@ -40,7 +40,9 @@
      */
     public function boot()
     {
-        return $this->provider->boot();
+        if (method_exists($this->provider, 'boot')) {
+            return $this->provider->boot();
+        }
     }
 
     /**
Index: vendor/intervention/image/src/Intervention/Image/ImageServiceProviderLaravel5.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/ImageServiceProviderLaravel5.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/ImageServiceProviderLaravel5.php	(revision 57)
@@ -77,7 +77,7 @@
         // imagecache route
         if (is_string(config('imagecache.route'))) {
 
-            $filename_pattern = '[ \w\\.\\/\\-\\@]+';
+            $filename_pattern = '[ \w\\.\\/\\-\\@\(\)]+';
 
             // route to access template applied image file
             $app['router']->get(config('imagecache.route').'/{template}/{filename}', array(
Index: vendor/intervention/image/src/Intervention/Image/Imagick/Encoder.php
===================================================================
--- vendor/intervention/image/src/Intervention/Image/Imagick/Encoder.php	(revision 55)
+++ vendor/intervention/image/src/Intervention/Image/Imagick/Encoder.php	(revision 57)
@@ -66,6 +66,28 @@
         return $imagick->getImagesBlob();
     }
 
+    protected function processWebp()
+    {
+        if ( ! \Imagick::queryFormats('WEBP')) {
+            throw new \Intervention\Image\Exception\NotSupportedException(
+                "Webp format is not supported by Imagick installation."
+            );
+        }
+
+        $format = 'webp';
+        $compression = \Imagick::COMPRESSION_JPEG;
+
+        $imagick = $this->image->getCore();
+        $imagick = $imagick->mergeImageLayers(\Imagick::LAYERMETHOD_MERGE);
+        $imagick->setFormat($format);
+        $imagick->setImageFormat($format);
+        $imagick->setCompression($compression);
+        $imagick->setImageCompression($compression);
+        $imagick->setImageCompressionQuality($this->quality);
+
+        return $imagick->getImagesBlob();
+    }
+
     /**
      * Processes and returns encoded image as TIFF string
      *
Index: vendor/monolog/monolog/CHANGELOG.md
===================================================================
--- vendor/monolog/monolog/CHANGELOG.md	(revision 55)
+++ vendor/monolog/monolog/CHANGELOG.md	(revision 57)
@@ -1,3 +1,12 @@
+### 1.23.0 (2017-06-19)
+
+  * Improved SyslogUdpHandler's support for RFC5424 and added optional `$ident` argument
+  * Fixed GelfHandler truncation to be per field and not per message
+  * Fixed compatibility issue with PHP <5.3.6
+  * Fixed support for headless Chrome in ChromePHPHandler
+  * Fixed support for latest Aws SDK in DynamoDbHandler
+  * Fixed support for SwiftMailer 6.0+ in SwiftMailerHandler
+
 ### 1.22.1 (2017-03-13)
 
   * Fixed lots of minor issues in the new Slack integrations
Index: vendor/monolog/monolog/composer.json
===================================================================
--- vendor/monolog/monolog/composer.json	(revision 55)
+++ vendor/monolog/monolog/composer.json	(revision 57)
@@ -24,7 +24,7 @@
         "doctrine/couchdb": "~1.0@dev",
         "aws/aws-sdk-php": "^2.4.9 || ^3.0",
         "php-amqplib/php-amqplib": "~2.4",
-        "swiftmailer/swiftmailer": "~5.3",
+        "swiftmailer/swiftmailer": "^5.3|^6.0",
         "php-console/php-console": "^3.1.3",
         "phpunit/phpunit-mock-objects": "2.3.0",
         "jakub-onderka/php-parallel-lint": "0.9"
Index: vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php	(revision 57)
@@ -22,7 +22,7 @@
  */
 class GelfMessageFormatter extends NormalizerFormatter
 {
-    const MAX_LENGTH = 32766;
+    const DEFAULT_MAX_LENGTH = 32766;
 
     /**
      * @var string the name of the system for the Gelf log message
@@ -40,6 +40,11 @@
     protected $contextPrefix;
 
     /**
+     * @var int max length per field
+     */
+    protected $maxLength;
+
+    /**
      * Translates Monolog log levels to Graylog2 log priorities.
      */
     private $logLevels = array(
@@ -53,7 +58,7 @@
         Logger::EMERGENCY => 0,
     );
 
-    public function __construct($systemName = null, $extraPrefix = null, $contextPrefix = 'ctxt_')
+    public function __construct($systemName = null, $extraPrefix = null, $contextPrefix = 'ctxt_', $maxLength = null)
     {
         parent::__construct('U.u');
 
@@ -61,6 +66,7 @@
 
         $this->extraPrefix = $extraPrefix;
         $this->contextPrefix = $contextPrefix;
+        $this->maxLength = is_null($maxLength) ? self::DEFAULT_MAX_LENGTH : $maxLength;
     }
 
     /**
@@ -81,35 +87,30 @@
             ->setHost($this->systemName)
             ->setLevel($this->logLevels[$record['level']]);
 
-        // start count with message length + system name length + 200 for padding / metadata
+        // message length + system name length + 200 for padding / metadata 
         $len = 200 + strlen((string) $record['message']) + strlen($this->systemName);
 
-        if ($len > self::MAX_LENGTH) {
-            $message->setShortMessage(substr($record['message'], 0, self::MAX_LENGTH - 200));
-
-            return $message;
+        if ($len > $this->maxLength) {
+            $message->setShortMessage(substr($record['message'], 0, $this->maxLength));
         }
 
         if (isset($record['channel'])) {
             $message->setFacility($record['channel']);
-            $len += strlen($record['channel']);
         }
         if (isset($record['extra']['line'])) {
             $message->setLine($record['extra']['line']);
-            $len += 10;
             unset($record['extra']['line']);
         }
         if (isset($record['extra']['file'])) {
             $message->setFile($record['extra']['file']);
-            $len += strlen($record['extra']['file']);
             unset($record['extra']['file']);
         }
 
         foreach ($record['extra'] as $key => $val) {
             $val = is_scalar($val) || null === $val ? $val : $this->toJson($val);
-            $len += strlen($this->extraPrefix . $key . $val);
-            if ($len > self::MAX_LENGTH) {
-                $message->setAdditional($this->extraPrefix . $key, substr($val, 0, self::MAX_LENGTH - $len));
+            $len = strlen($this->extraPrefix . $key . $val);
+            if ($len > $this->maxLength) {
+                $message->setAdditional($this->extraPrefix . $key, substr($val, 0, $this->maxLength));
                 break;
             }
             $message->setAdditional($this->extraPrefix . $key, $val);
@@ -117,9 +118,9 @@
 
         foreach ($record['context'] as $key => $val) {
             $val = is_scalar($val) || null === $val ? $val : $this->toJson($val);
-            $len += strlen($this->contextPrefix . $key . $val);
-            if ($len > self::MAX_LENGTH) {
-                $message->setAdditional($this->contextPrefix . $key, substr($val, 0, self::MAX_LENGTH - $len));
+            $len = strlen($this->contextPrefix . $key . $val);
+            if ($len > $this->maxLength) {
+                $message->setAdditional($this->contextPrefix . $key, substr($val, 0, $this->maxLength));
                 break;
             }
             $message->setAdditional($this->contextPrefix . $key, $val);
Index: vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php	(revision 57)
@@ -28,6 +28,7 @@
 
     protected $batchMode;
     protected $appendNewline;
+
     /**
      * @var bool
      */
@@ -35,6 +36,7 @@
 
     /**
      * @param int $batchMode
+     * @param bool $appendNewline
      */
     public function __construct($batchMode = self::BATCH_MODE_JSON, $appendNewline = true)
     {
Index: vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php	(revision 57)
@@ -36,7 +36,7 @@
     /**
      * Regular expression to detect supported browsers (matches any Chrome, or Firefox 43+)
      */
-    const USER_AGENT_REGEX = '{\b(?:Chrome/\d+(?:\.\d+)*|Firefox/(?:4[3-9]|[5-9]\d|\d{3,})(?:\.\d)*)\b}';
+    const USER_AGENT_REGEX = '{\b(?:Chrome/\d+(?:\.\d+)*|HeadlessChrome|Firefox/(?:4[3-9]|[5-9]\d|\d{3,})(?:\.\d)*)\b}';
 
     protected static $initialized = false;
 
Index: vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php	(revision 57)
@@ -11,7 +11,7 @@
 
 namespace Monolog\Handler;
 
-use Aws\Common\Aws;
+use Aws\Sdk;
 use Aws\DynamoDb\DynamoDbClient;
 use Aws\DynamoDb\Marshaler;
 use Monolog\Formatter\ScalarFormatter;
@@ -55,7 +55,7 @@
      */
     public function __construct(DynamoDbClient $client, $table, $level = Logger::DEBUG, $bubble = true)
     {
-        if (defined('Aws\Common\Aws::VERSION') && version_compare(Aws::VERSION, '3.0', '>=')) {
+        if (defined('Aws\Sdk::VERSION') && version_compare(Sdk::VERSION, '3.0', '>=')) {
             $this->version = 3;
             $this->marshaler = new Marshaler;
         } else {
Index: vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php	(revision 57)
@@ -16,15 +16,17 @@
 /**
  * This simple wrapper class can be used to extend handlers functionality.
  *
- * Example: A filtering handle. Inherit from this class, override isHandling() like this
+ * Example: A custom filtering that can be applied to any handler.
  *
- * public function isHandling(array $record)
- * {
- *      if ($record meets certain conditions) {
- *          return false;
- *      }
- *      return $this->handler->isHandling($record);
- * }
+ * Inherit from this class and override handle() like this:
+ *
+ *   public function handle(array $record)
+ *   {
+ *        if ($record meets certain conditions) {
+ *            return false;
+ *        }
+ *        return $this->handler->handle($record);
+ *   }
  *
  * @author Alexey Karapetov <alexey@karapetov.com>
  */
Index: vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php	(revision 57)
@@ -97,6 +97,7 @@
         ));
 
         if (isset($context['exception']) && $context['exception'] instanceof Exception) {
+            $payload['level'] = $context['level'];
             $exception = $context['exception'];
             unset($context['exception']);
 
Index: vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php	(revision 57)
@@ -144,6 +144,17 @@
     protected function write(array $record)
     {
         parent::write($record);
+        $this->finalizeWrite();
+    }
+
+    /**
+     * Finalizes the request by reading some bytes and then closing the socket
+     *
+     * If we do not read some but close the socket too early, slack sometimes
+     * drops the request entirely.
+     */
+    protected function finalizeWrite()
+    {
         $res = $this->getResource();
         if (is_resource($res)) {
             @fread($res, 2048);
Index: vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php	(revision 57)
@@ -81,13 +81,18 @@
         $postString = json_encode($postData);
 
         $ch = curl_init();
-        curl_setopt($ch, CURLOPT_URL, $this->webhookUrl);
-        curl_setopt($ch, CURLOPT_POST, true);
-        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
+        $options = array(
+            CURLOPT_URL => $this->webhookUrl,
+            CURLOPT_POST => true,
+            CURLOPT_RETURNTRANSFER => true,
+            CURLOPT_HTTPHEADER => array('Content-type: application/json'),
+            CURLOPT_POSTFIELDS => $postString
+        );
         if (defined('CURLOPT_SAFE_UPLOAD')) {
-            curl_setopt($ch, CURLOPT_SAFE_UPLOAD, true);
+            $options[CURLOPT_SAFE_UPLOAD] = true;
         }
-        curl_setopt($ch, CURLOPT_POSTFIELDS, array('payload' => $postString));
+
+        curl_setopt_array($ch, $options);
 
         Curl\Util::execute($ch);
     }
Index: vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php	(revision 57)
@@ -13,6 +13,7 @@
 
 use Monolog\Logger;
 use Monolog\Formatter\LineFormatter;
+use Swift;
 
 /**
  * SwiftMailerHandler uses Swift_Mailer to send the emails
@@ -73,7 +74,11 @@
         }
 
         $message->setBody($content);
-        $message->setDate(time());
+        if (version_compare(Swift::VERSION, '6.0.0', '>=')) {
+            $message->setDate(new \DateTimeImmutable());
+        } else {
+            $message->setDate(time());
+        }
 
         return $message;
     }
Index: vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php	(revision 57)
@@ -22,6 +22,7 @@
 class SyslogUdpHandler extends AbstractSyslogHandler
 {
     protected $socket;
+    protected $ident;
 
     /**
      * @param string  $host
@@ -29,11 +30,14 @@
      * @param mixed   $facility
      * @param int     $level    The minimum logging level at which this handler will be triggered
      * @param Boolean $bubble   Whether the messages that are handled can bubble up the stack or not
+     * @param string  $ident    Program name or tag for each log message.
      */
-    public function __construct($host, $port = 514, $facility = LOG_USER, $level = Logger::DEBUG, $bubble = true)
+    public function __construct($host, $port = 514, $facility = LOG_USER, $level = Logger::DEBUG, $bubble = true, $ident = 'php')
     {
         parent::__construct($facility, $level, $bubble);
 
+        $this->ident = $ident;
+
         $this->socket = new UdpSocket($host, $port ?: 514);
     }
 
@@ -69,7 +73,24 @@
     {
         $priority = $severity + $this->facility;
 
-        return "<$priority>1 ";
+        if (!$pid = getmypid()) {
+            $pid = '-';
+        }
+
+        if (!$hostname = gethostname()) {
+            $hostname = '-';
+        }
+
+        return "<$priority>1 " .
+            $this->getDateTime() . " " .
+            $hostname . " " .
+            $this->ident . " " .
+            $pid . " - - ";
+    }
+
+    protected function getDateTime()
+    {
+        return date(\DateTime::RFC3339);
     }
 
     /**
Index: vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php
===================================================================
--- vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php	(revision 55)
+++ vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php	(revision 57)
@@ -55,7 +55,12 @@
             return $record;
         }
 
-        $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
+        /*
+        * http://php.net/manual/en/function.debug-backtrace.php
+        * As of 5.3.6, DEBUG_BACKTRACE_IGNORE_ARGS option was added.
+        * Any version less than 5.3.6 must use the DEBUG_BACKTRACE_IGNORE_ARGS constant value '2'.
+        */
+        $trace = debug_backtrace((PHP_VERSION_ID < 50306) ? 2 : DEBUG_BACKTRACE_IGNORE_ARGS);
 
         // skip first since it's always the current method
         array_shift($trace);
Index: vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php	(revision 55)
+++ vendor/monolog/monolog/tests/Monolog/Formatter/GelfMessageFormatterTest.php	(revision 57)
@@ -221,10 +221,34 @@
             }
         }
 
-        // in graylog2/gelf-php before 1.4.1 empty strings are filtered and won't be included in the message
-        // though it should be sufficient to ensure that the entire message length does not exceed the maximum
-        // length being allowed
-        $this->assertLessThanOrEqual(32766, $length, 'The message length is no longer than the maximum allowed length');
+        $this->assertLessThanOrEqual(65792, $length, 'The message length is no longer than the maximum allowed length');
+    }
+
+    public function testFormatWithUnlimitedLength()
+    {
+        $formatter = new GelfMessageFormatter('LONG_SYSTEM_NAME', null, 'ctxt_', PHP_INT_MAX);
+        $record = array(
+            'level' => Logger::ERROR,
+            'level_name' => 'ERROR',
+            'channel' => 'meh',
+            'context' => array('exception' => str_repeat(' ', 32767 * 2)),
+            'datetime' => new \DateTime("@0"),
+            'extra' => array('key' => str_repeat(' ', 32767 * 2)),
+            'message' => 'log'
+        );
+        $message = $formatter->format($record);
+        $messageArray = $message->toArray();
+
+        // 200 for padding + metadata
+        $length = 200;
+
+        foreach ($messageArray as $key => $value) {
+            if (!in_array($key, array('level', 'timestamp'))) {
+                $length += strlen($value);
+            }
+        }
+
+        $this->assertGreaterThanOrEqual(131289, $length, 'The message should not be truncated');
     }
 
     private function isLegacy()
Index: vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php	(revision 55)
+++ vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php	(revision 57)
@@ -25,8 +25,13 @@
         $_SERVER['HTTP_USER_AGENT'] = 'Monolog Test; Chrome/1.0';
     }
 
-    public function testHeaders()
+    /**
+     * @dataProvider agentsProvider
+     */
+    public function testHeaders($agent)
     {
+        $_SERVER['HTTP_USER_AGENT'] = $agent;
+
         $handler = new TestChromePHPHandler();
         $handler->setFormatter($this->getIdentityFormatter());
         $handler->handle($this->getRecord(Logger::DEBUG));
@@ -47,6 +52,16 @@
         $this->assertEquals($expected, $handler->getHeaders());
     }
 
+    public static function agentsProvider()
+    {
+        return array(
+            array('Monolog Test; Chrome/1.0'),
+            array('Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0'),
+            array('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/56.0.2924.76 Chrome/56.0.2924.76 Safari/537.36'),
+            array('Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome Safari/537.36'),
+        );
+    }
+
     public function testHeadersOverflow()
     {
         $handler = new TestChromePHPHandler();
Index: vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php	(revision 55)
+++ vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php	(revision 57)
@@ -52,13 +52,20 @@
         $handler = new DynamoDbHandler($this->client, 'foo');
         $handler->setFormatter($formatter);
 
+        $isV3 = defined('Aws\Sdk::VERSION') && version_compare(\Aws\Sdk::VERSION, '3.0', '>=');
+        if ($isV3) {
+            $expFormatted = array('foo' => array('N' => 1), 'bar' => array('N' => 2));
+        } else {
+            $expFormatted = $formatted;
+        }
+
         $formatter
              ->expects($this->once())
              ->method('format')
              ->with($record)
              ->will($this->returnValue($formatted));
         $this->client
-             ->expects($this->once())
+             ->expects($isV3 ? $this->never() : $this->once())
              ->method('formatAttributes')
              ->with($this->isType('array'))
              ->will($this->returnValue($formatted));
@@ -67,7 +74,7 @@
              ->method('__call')
              ->with('putItem', array(array(
                  'TableName' => 'foo',
-                 'Item' => $formatted,
+                 'Item' => $expFormatted,
              )));
 
         $handler->handle($record);
Index: vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php	(nonexistent)
+++ vendor/monolog/monolog/tests/Monolog/Handler/RollbarHandlerTest.php	(revision 57)
@@ -0,0 +1,84 @@
+<?php
+
+/*
+ * This file is part of the Monolog package.
+ *
+ * (c) Jordi Boggiano <j.boggiano@seld.be>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Monolog\Handler;
+
+use Exception;
+use Monolog\TestCase;
+use Monolog\Logger;
+use PHPUnit_Framework_MockObject_MockObject as MockObject;
+
+/**
+ * @author Erik Johansson <erik.pm.johansson@gmail.com>
+ * @see    https://rollbar.com/docs/notifier/rollbar-php/
+ *
+ * @coversDefaultClass Monolog\Handler\RollbarHandler
+ */
+class RollbarHandlerTest extends TestCase
+{
+    /**
+     * @var MockObject
+     */
+    private $rollbarNotifier;
+
+    /**
+     * @var array
+     */
+    public $reportedExceptionArguments = null;
+
+    protected function setUp()
+    {
+        parent::setUp();
+
+        $this->setupRollbarNotifierMock();
+    }
+
+    /**
+     * When reporting exceptions to Rollbar the
+     * level has to be set in the payload data
+     */
+    public function testExceptionLogLevel()
+    {
+        $handler = $this->createHandler();
+
+        $handler->handle($this->createExceptionRecord(Logger::DEBUG));
+
+        $this->assertEquals('debug', $this->reportedExceptionArguments['payload']['level']);
+    }
+
+    private function setupRollbarNotifierMock()
+    {
+        $this->rollbarNotifier = $this->getMockBuilder('RollbarNotifier')
+            ->setMethods(array('report_message', 'report_exception', 'flush'))
+            ->getMock();
+
+        $that = $this;
+
+        $this->rollbarNotifier
+            ->expects($this->any())
+            ->method('report_exception')
+            ->willReturnCallback(function ($exception, $context, $payload) use ($that) {
+                $that->reportedExceptionArguments = compact('exception', 'context', 'payload');
+            });
+    }
+
+    private function createHandler()
+    {
+        return new RollbarHandler($this->rollbarNotifier, Logger::DEBUG);
+    }
+
+    private function createExceptionRecord($level = Logger::DEBUG, $message = 'test', $exception = null)
+    {
+        return $this->getRecord($level, $message, array(
+            'exception' => $exception ?: new Exception()
+        ));
+    }
+}
Index: vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php	(revision 55)
+++ vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php	(revision 57)
@@ -111,10 +111,10 @@
             return $now + 86400 * $ago;
         };
         $monthCallback = function($ago) {
-            return gmmktime(0, 0, 0, date('n') + $ago, date('d'), date('Y'));
+            return gmmktime(0, 0, 0, date('n') + $ago, 1, date('Y'));
         };
         $yearCallback = function($ago) {
-            return gmmktime(0, 0, 0, date('n'), date('d'), date('Y') + $ago);
+            return gmmktime(0, 0, 0, 1, 1, date('Y') + $ago);
         };
 
         return array(
Index: vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php	(revision 55)
+++ vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php	(revision 57)
@@ -98,7 +98,7 @@
 
     public function testMessageHaveUniqueId()
     {
-        $messageTemplate = \Swift_Message::newInstance();
+        $messageTemplate = new \Swift_Message();
         $handler = new SwiftMailerHandler($this->mailer, $messageTemplate);
 
         $method = new \ReflectionMethod('Monolog\Handler\SwiftMailerHandler', 'buildMessage');
Index: vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php
===================================================================
--- vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php	(revision 55)
+++ vendor/monolog/monolog/tests/Monolog/Handler/SyslogUdpHandlerTest.php	(revision 57)
@@ -28,16 +28,27 @@
 
     public function testWeSplitIntoLines()
     {
-        $handler = new SyslogUdpHandler("127.0.0.1", 514, "authpriv");
+        $time = '2014-01-07T12:34';
+        $pid = getmypid();
+        $host = gethostname();
+
+        $handler = $this->getMockBuilder('\Monolog\Handler\SyslogUdpHandler')
+            ->setConstructorArgs(array("127.0.0.1", 514, "authpriv"))
+            ->setMethods(array('getDateTime'))
+            ->getMock();
+
+        $handler->method('getDateTime')
+            ->willReturn($time);
+
         $handler->setFormatter(new \Monolog\Formatter\ChromePHPFormatter());
 
         $socket = $this->getMock('\Monolog\Handler\SyslogUdp\UdpSocket', array('write'), array('lol', 'lol'));
         $socket->expects($this->at(0))
             ->method('write')
-            ->with("lol", "<".(LOG_AUTHPRIV + LOG_WARNING).">1 ");
+            ->with("lol", "<".(LOG_AUTHPRIV + LOG_WARNING).">1 $time $host php $pid - - ");
         $socket->expects($this->at(1))
             ->method('write')
-            ->with("hej", "<".(LOG_AUTHPRIV + LOG_WARNING).">1 ");
+            ->with("hej", "<".(LOG_AUTHPRIV + LOG_WARNING).">1 $time $host php $pid - - ");
 
         $handler->setSocket($socket);
 
Index: vendor/phpdocumentor/reflection-docblock/.gitignore
===================================================================
--- vendor/phpdocumentor/reflection-docblock/.gitignore	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/.gitignore	(revision 57)
@@ -1,2 +1,2 @@
-.idea
-vendor
+.idea
+vendor
Index: vendor/phpdocumentor/reflection-docblock/.travis.yml
===================================================================
--- vendor/phpdocumentor/reflection-docblock/.travis.yml	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/.travis.yml	(revision 57)
@@ -1,32 +1,32 @@
-language: php
-php:
-  - 5.3.3
-  - 5.3
-  - 5.4
-  - 5.5
-  - 5.6
-  - hhvm
-  - hhvm-nightly
-
-matrix:
-    allow_failures:
-        - php: hhvm
-        - php: hhvm-nightly
-
-script:
- - vendor/bin/phpunit
-
-before_script:
- - sudo apt-get -qq update > /dev/null
- - phpenv rehash > /dev/null
- - composer selfupdate --quiet
- - composer install --no-interaction --prefer-source --dev
- - vendor/bin/phpunit
- - composer update --no-interaction --prefer-source --dev
-
-notifications:
-  irc: "irc.freenode.org#phpdocumentor"
-  email:
-    - mike.vanriel@naenius.com
-    - ashnazg@php.net
-    - boen.robot@gmail.com
+language: php
+php:
+  - 5.3.3
+  - 5.3
+  - 5.4
+  - 5.5
+  - 5.6
+  - hhvm
+  - hhvm-nightly
+
+matrix:
+    allow_failures:
+        - php: hhvm
+        - php: hhvm-nightly
+
+script:
+ - vendor/bin/phpunit
+
+before_script:
+ - sudo apt-get -qq update > /dev/null
+ - phpenv rehash > /dev/null
+ - composer selfupdate --quiet
+ - composer install --no-interaction --prefer-source --dev
+ - vendor/bin/phpunit
+ - composer update --no-interaction --prefer-source --dev
+
+notifications:
+  irc: "irc.freenode.org#phpdocumentor"
+  email:
+    - mike.vanriel@naenius.com
+    - ashnazg@php.net
+    - boen.robot@gmail.com
Index: vendor/phpdocumentor/reflection-docblock/LICENSE
===================================================================
--- vendor/phpdocumentor/reflection-docblock/LICENSE	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/LICENSE	(revision 57)
@@ -1,21 +1,21 @@
-The MIT License (MIT)
-
-Copyright (c) 2010 Mike van Riel
-
-Permission is hereby granted, free of charge, to any person obtaining a copy
-of this software and associated documentation files (the "Software"), to deal
-in the Software without restriction, including without limitation the rights
-to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
-copies of the Software, and to permit persons to whom the Software is
-furnished to do so, subject to the following conditions:
-
-The above copyright notice and this permission notice shall be included in
-all copies or substantial portions of the Software.
-
-THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
-IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
-FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
-AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
-LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
-OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
-THE SOFTWARE.
+The MIT License (MIT)
+
+Copyright (c) 2010 Mike van Riel
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to deal
+in the Software without restriction, including without limitation the rights
+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
+THE SOFTWARE.
Index: vendor/phpdocumentor/reflection-docblock/README.md
===================================================================
--- vendor/phpdocumentor/reflection-docblock/README.md	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/README.md	(revision 57)
@@ -1,57 +1,57 @@
-The ReflectionDocBlock Component [![Build Status](https://secure.travis-ci.org/phpDocumentor/ReflectionDocBlock.png)](https://travis-ci.org/phpDocumentor/ReflectionDocBlock)
-================================
-
-Introduction
-------------
-
-The ReflectionDocBlock component of phpDocumentor provides a DocBlock parser
-that is 100% compatible with the [PHPDoc standard](http://phpdoc.org/docs/latest).
-
-With this component, a library can provide support for annotations via DocBlocks
-or otherwise retrieve information that is embedded in a DocBlock.
-
-> **Note**: *this is a core component of phpDocumentor and is constantly being
-> optimized for performance.*
-
-Installation
-------------
-
-You can install the component in the following ways:
-
-* Use the official Github repository (https://github.com/phpDocumentor/ReflectionDocBlock)
-* Via Composer (http://packagist.org/packages/phpdocumentor/reflection-docblock)
-
-Usage
------
-
-The ReflectionDocBlock component is designed to work in an identical fashion to
-PHP's own Reflection extension (http://php.net/manual/en/book.reflection.php).
-
-Parsing can be initiated by instantiating the
-`\phpDocumentor\Reflection\DocBlock()` class and passing it a string containing
-a DocBlock (including asterisks) or by passing an object supporting the
-`getDocComment()` method.
-
-> *Examples of objects having the `getDocComment()` method are the
-> `ReflectionClass` and the `ReflectionMethod` classes of the PHP
-> Reflection extension*
-
-Example:
-
-    $class = new ReflectionClass('MyClass');
-    $phpdoc = new \phpDocumentor\Reflection\DocBlock($class);
-
-or
-
-    $docblock = <<<DOCBLOCK
-    /**
-     * This is a short description.
-     *
-     * This is a *long* description.
-     *
-     * @return void
-     */
-    DOCBLOCK;
-
-    $phpdoc = new \phpDocumentor\Reflection\DocBlock($docblock);
-
+The ReflectionDocBlock Component [![Build Status](https://secure.travis-ci.org/phpDocumentor/ReflectionDocBlock.png)](https://travis-ci.org/phpDocumentor/ReflectionDocBlock)
+================================
+
+Introduction
+------------
+
+The ReflectionDocBlock component of phpDocumentor provides a DocBlock parser
+that is 100% compatible with the [PHPDoc standard](http://phpdoc.org/docs/latest).
+
+With this component, a library can provide support for annotations via DocBlocks
+or otherwise retrieve information that is embedded in a DocBlock.
+
+> **Note**: *this is a core component of phpDocumentor and is constantly being
+> optimized for performance.*
+
+Installation
+------------
+
+You can install the component in the following ways:
+
+* Use the official Github repository (https://github.com/phpDocumentor/ReflectionDocBlock)
+* Via Composer (http://packagist.org/packages/phpdocumentor/reflection-docblock)
+
+Usage
+-----
+
+The ReflectionDocBlock component is designed to work in an identical fashion to
+PHP's own Reflection extension (http://php.net/manual/en/book.reflection.php).
+
+Parsing can be initiated by instantiating the
+`\phpDocumentor\Reflection\DocBlock()` class and passing it a string containing
+a DocBlock (including asterisks) or by passing an object supporting the
+`getDocComment()` method.
+
+> *Examples of objects having the `getDocComment()` method are the
+> `ReflectionClass` and the `ReflectionMethod` classes of the PHP
+> Reflection extension*
+
+Example:
+
+    $class = new ReflectionClass('MyClass');
+    $phpdoc = new \phpDocumentor\Reflection\DocBlock($class);
+
+or
+
+    $docblock = <<<DOCBLOCK
+    /**
+     * This is a short description.
+     *
+     * This is a *long* description.
+     *
+     * @return void
+     */
+    DOCBLOCK;
+
+    $phpdoc = new \phpDocumentor\Reflection\DocBlock($docblock);
+
Index: vendor/phpdocumentor/reflection-docblock/composer.json
===================================================================
--- vendor/phpdocumentor/reflection-docblock/composer.json	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/composer.json	(revision 57)
@@ -1,26 +1,26 @@
-{
-    "name":    "phpdocumentor/reflection-docblock",
-    "type":    "library",
-    "license": "MIT",
-    "authors": [
-        {"name": "Mike van Riel", "email": "mike.vanriel@naenius.com"}
-    ],
-    "require": {
-        "php": ">=5.3.3"
-    },
-    "autoload": {
-        "psr-0": {"phpDocumentor": ["src/"]}
-    },
-    "require-dev": {
-        "phpunit/phpunit": "~4.0"
-    },
-    "suggest": {
-        "dflydev/markdown": "~1.0",
-        "erusev/parsedown": "~1.0"
-    },
-    "extra": {
-        "branch-alias": {
-            "dev-master": "2.0.x-dev"
-        }
-    }
-}
+{
+    "name":    "phpdocumentor/reflection-docblock",
+    "type":    "library",
+    "license": "MIT",
+    "authors": [
+        {"name": "Mike van Riel", "email": "mike.vanriel@naenius.com"}
+    ],
+    "require": {
+        "php": ">=5.3.3"
+    },
+    "autoload": {
+        "psr-0": {"phpDocumentor": ["src/"]}
+    },
+    "require-dev": {
+        "phpunit/phpunit": "~4.0"
+    },
+    "suggest": {
+        "dflydev/markdown": "~1.0",
+        "erusev/parsedown": "~1.0"
+    },
+    "extra": {
+        "branch-alias": {
+            "dev-master": "2.0.x-dev"
+        }
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/composer.lock
===================================================================
--- vendor/phpdocumentor/reflection-docblock/composer.lock	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/composer.lock	(revision 57)
@@ -1,827 +1,827 @@
-{
-    "_readme": [
-        "This file locks the dependencies of your project to a known state",
-        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
-        "This file is @generated automatically"
-    ],
-    "hash": "ea1734d11b8c878445c2c6e58de8b85f",
-    "packages": [],
-    "packages-dev": [
-        {
-            "name": "ocramius/instantiator",
-            "version": "1.1.2",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Ocramius/Instantiator.git",
-                "reference": "a7abbb5fc9df6e7126af741dd6c140d1a7369435"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Ocramius/Instantiator/zipball/a7abbb5fc9df6e7126af741dd6c140d1a7369435",
-                "reference": "a7abbb5fc9df6e7126af741dd6c140d1a7369435",
-                "shasum": ""
-            },
-            "require": {
-                "ocramius/lazy-map": "1.0.*",
-                "php": "~5.3"
-            },
-            "require-dev": {
-                "athletic/athletic": "~0.1.8",
-                "ext-pdo": "*",
-                "ext-phar": "*",
-                "phpunit/phpunit": "~4.0",
-                "squizlabs/php_codesniffer": "2.0.*@ALPHA"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.0.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Instantiator\\": "src"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Marco Pivetta",
-                    "email": "ocramius@gmail.com",
-                    "homepage": "http://ocramius.github.com/"
-                }
-            ],
-            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
-            "homepage": "https://github.com/Ocramius/Instantiator",
-            "keywords": [
-                "constructor",
-                "instantiate"
-            ],
-            "time": "2014-08-14 15:10:55"
-        },
-        {
-            "name": "ocramius/lazy-map",
-            "version": "1.0.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/Ocramius/LazyMap.git",
-                "reference": "7fe3d347f5e618bcea7d39345ff83f3651d8b752"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/Ocramius/LazyMap/zipball/7fe3d347f5e618bcea7d39345ff83f3651d8b752",
-                "reference": "7fe3d347f5e618bcea7d39345ff83f3651d8b752",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "athletic/athletic": "~0.1.6",
-                "phpmd/phpmd": "1.5.*",
-                "phpunit/phpunit": ">=3.7",
-                "satooshi/php-coveralls": "~0.6",
-                "squizlabs/php_codesniffer": "1.4.*"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0.x-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "LazyMap\\": "src"
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Marco Pivetta",
-                    "email": "ocramius@gmail.com",
-                    "homepage": "http://ocramius.github.com/",
-                    "role": "Developer"
-                }
-            ],
-            "description": "A library that provides lazy instantiation logic for a map of objects",
-            "homepage": "https://github.com/Ocramius/LazyMap",
-            "keywords": [
-                "lazy",
-                "lazy instantiation",
-                "lazy loading",
-                "map",
-                "service location"
-            ],
-            "time": "2013-11-09 22:30:54"
-        },
-        {
-            "name": "phpunit/php-code-coverage",
-            "version": "2.0.10",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
-                "reference": "6d196af48e8c100a3ae881940123e693da5a9217"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/6d196af48e8c100a3ae881940123e693da5a9217",
-                "reference": "6d196af48e8c100a3ae881940123e693da5a9217",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3",
-                "phpunit/php-file-iterator": "~1.3.1",
-                "phpunit/php-text-template": "~1.2.0",
-                "phpunit/php-token-stream": "~1.2.2",
-                "sebastian/environment": "~1.0.0",
-                "sebastian/version": "~1.0.3"
-            },
-            "require-dev": {
-                "ext-xdebug": ">=2.1.4",
-                "phpunit/phpunit": "~4.0.14"
-            },
-            "suggest": {
-                "ext-dom": "*",
-                "ext-xdebug": ">=2.2.1",
-                "ext-xmlwriter": "*"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.0.x-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                ""
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sb@sebastian-bergmann.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
-            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
-            "keywords": [
-                "coverage",
-                "testing",
-                "xunit"
-            ],
-            "time": "2014-08-06 06:39:42"
-        },
-        {
-            "name": "phpunit/php-file-iterator",
-            "version": "1.3.4",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
-                "reference": "acd690379117b042d1c8af1fafd61bde001bf6bb"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/acd690379117b042d1c8af1fafd61bde001bf6bb",
-                "reference": "acd690379117b042d1c8af1fafd61bde001bf6bb",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "autoload": {
-                "classmap": [
-                    "File/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                ""
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sb@sebastian-bergmann.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
-            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
-            "keywords": [
-                "filesystem",
-                "iterator"
-            ],
-            "time": "2013-10-10 15:34:57"
-        },
-        {
-            "name": "phpunit/php-text-template",
-            "version": "1.2.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/php-text-template.git",
-                "reference": "206dfefc0ffe9cebf65c413e3d0e809c82fbf00a"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/206dfefc0ffe9cebf65c413e3d0e809c82fbf00a",
-                "reference": "206dfefc0ffe9cebf65c413e3d0e809c82fbf00a",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "autoload": {
-                "classmap": [
-                    "Text/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                ""
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sb@sebastian-bergmann.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Simple template engine.",
-            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
-            "keywords": [
-                "template"
-            ],
-            "time": "2014-01-30 17:20:04"
-        },
-        {
-            "name": "phpunit/php-timer",
-            "version": "1.0.5",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/php-timer.git",
-                "reference": "19689d4354b295ee3d8c54b4f42c3efb69cbc17c"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/19689d4354b295ee3d8c54b4f42c3efb69cbc17c",
-                "reference": "19689d4354b295ee3d8c54b4f42c3efb69cbc17c",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "autoload": {
-                "classmap": [
-                    "PHP/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                ""
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sb@sebastian-bergmann.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Utility class for timing",
-            "homepage": "https://github.com/sebastianbergmann/php-timer/",
-            "keywords": [
-                "timer"
-            ],
-            "time": "2013-08-02 07:42:54"
-        },
-        {
-            "name": "phpunit/php-token-stream",
-            "version": "1.2.2",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/php-token-stream.git",
-                "reference": "ad4e1e23ae01b483c16f600ff1bebec184588e32"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/ad4e1e23ae01b483c16f600ff1bebec184588e32",
-                "reference": "ad4e1e23ae01b483c16f600ff1bebec184588e32",
-                "shasum": ""
-            },
-            "require": {
-                "ext-tokenizer": "*",
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.2-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "PHP/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                ""
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sb@sebastian-bergmann.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Wrapper around PHP's tokenizer extension.",
-            "homepage": "https://github.com/sebastianbergmann/php-token-stream/",
-            "keywords": [
-                "tokenizer"
-            ],
-            "time": "2014-03-03 05:10:30"
-        },
-        {
-            "name": "phpunit/phpunit",
-            "version": "4.2.2",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/phpunit.git",
-                "reference": "a33fa68ece9f8c68589bfc2da8d2794e27b820bc"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/a33fa68ece9f8c68589bfc2da8d2794e27b820bc",
-                "reference": "a33fa68ece9f8c68589bfc2da8d2794e27b820bc",
-                "shasum": ""
-            },
-            "require": {
-                "ext-dom": "*",
-                "ext-json": "*",
-                "ext-pcre": "*",
-                "ext-reflection": "*",
-                "ext-spl": "*",
-                "php": ">=5.3.3",
-                "phpunit/php-code-coverage": "~2.0",
-                "phpunit/php-file-iterator": "~1.3.1",
-                "phpunit/php-text-template": "~1.2",
-                "phpunit/php-timer": "~1.0.2",
-                "phpunit/phpunit-mock-objects": "~2.2",
-                "sebastian/comparator": "~1.0",
-                "sebastian/diff": "~1.1",
-                "sebastian/environment": "~1.0",
-                "sebastian/exporter": "~1.0",
-                "sebastian/version": "~1.0",
-                "symfony/yaml": "~2.0"
-            },
-            "suggest": {
-                "phpunit/php-invoker": "~1.1"
-            },
-            "bin": [
-                "phpunit"
-            ],
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "4.2.x-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                "",
-                "../../symfony/yaml/"
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "The PHP Unit Testing framework.",
-            "homepage": "http://www.phpunit.de/",
-            "keywords": [
-                "phpunit",
-                "testing",
-                "xunit"
-            ],
-            "time": "2014-08-18 05:12:30"
-        },
-        {
-            "name": "phpunit/phpunit-mock-objects",
-            "version": "2.2.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/phpunit-mock-objects.git",
-                "reference": "42e589e08bc86e3e9bdf20d385e948347788505b"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/42e589e08bc86e3e9bdf20d385e948347788505b",
-                "reference": "42e589e08bc86e3e9bdf20d385e948347788505b",
-                "shasum": ""
-            },
-            "require": {
-                "ocramius/instantiator": "~1.0",
-                "php": ">=5.3.3",
-                "phpunit/php-text-template": "~1.2"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "4.2.*@dev"
-            },
-            "suggest": {
-                "ext-soap": "*"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.2.x-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "include-path": [
-                ""
-            ],
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sb@sebastian-bergmann.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Mock Object library for PHPUnit",
-            "homepage": "https://github.com/sebastianbergmann/phpunit-mock-objects/",
-            "keywords": [
-                "mock",
-                "xunit"
-            ],
-            "time": "2014-08-02 13:50:58"
-        },
-        {
-            "name": "sebastian/comparator",
-            "version": "1.0.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/comparator.git",
-                "reference": "f7069ee51fa9fb6c038e16a9d0e3439f5449dcf2"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/f7069ee51fa9fb6c038e16a9d0e3439f5449dcf2",
-                "reference": "f7069ee51fa9fb6c038e16a9d0e3439f5449dcf2",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3",
-                "sebastian/diff": "~1.1",
-                "sebastian/exporter": "~1.0"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "~4.1"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0.x-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de",
-                    "role": "lead"
-                },
-                {
-                    "name": "Jeff Welch",
-                    "email": "whatthejeff@gmail.com"
-                },
-                {
-                    "name": "Volker Dusch",
-                    "email": "github@wallbash.com"
-                },
-                {
-                    "name": "Bernhard Schussek",
-                    "email": "bschussek@2bepublished.at"
-                }
-            ],
-            "description": "Provides the functionality to compare PHP values for equality",
-            "homepage": "http://www.github.com/sebastianbergmann/comparator",
-            "keywords": [
-                "comparator",
-                "compare",
-                "equality"
-            ],
-            "time": "2014-05-02 07:05:58"
-        },
-        {
-            "name": "sebastian/diff",
-            "version": "1.1.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/diff.git",
-                "reference": "1e091702a5a38e6b4c1ba9ca816e3dd343df2e2d"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/1e091702a5a38e6b4c1ba9ca816e3dd343df2e2d",
-                "reference": "1e091702a5a38e6b4c1ba9ca816e3dd343df2e2d",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.1-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de",
-                    "role": "lead"
-                },
-                {
-                    "name": "Kore Nordmann",
-                    "email": "mail@kore-nordmann.de"
-                }
-            ],
-            "description": "Diff implementation",
-            "homepage": "http://www.github.com/sebastianbergmann/diff",
-            "keywords": [
-                "diff"
-            ],
-            "time": "2013-08-03 16:46:33"
-        },
-        {
-            "name": "sebastian/environment",
-            "version": "1.0.0",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/environment.git",
-                "reference": "79517609ec01139cd7e9fded0dd7ce08c952ef6a"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/79517609ec01139cd7e9fded0dd7ce08c952ef6a",
-                "reference": "79517609ec01139cd7e9fded0dd7ce08c952ef6a",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "4.0.*@dev"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0.x-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Provides functionality to handle HHVM/PHP environments",
-            "homepage": "http://www.github.com/sebastianbergmann/environment",
-            "keywords": [
-                "Xdebug",
-                "environment",
-                "hhvm"
-            ],
-            "time": "2014-02-18 16:17:19"
-        },
-        {
-            "name": "sebastian/exporter",
-            "version": "1.0.1",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/exporter.git",
-                "reference": "1f9a98e6f5dfe0524cb8c6166f7c82f3e9ae1529"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/1f9a98e6f5dfe0524cb8c6166f7c82f3e9ae1529",
-                "reference": "1f9a98e6f5dfe0524cb8c6166f7c82f3e9ae1529",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "4.0.*@dev"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "1.0.x-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de",
-                    "role": "lead"
-                },
-                {
-                    "name": "Jeff Welch",
-                    "email": "whatthejeff@gmail.com"
-                },
-                {
-                    "name": "Volker Dusch",
-                    "email": "github@wallbash.com"
-                },
-                {
-                    "name": "Adam Harvey",
-                    "email": "aharvey@php.net",
-                    "role": "Lead"
-                },
-                {
-                    "name": "Bernhard Schussek",
-                    "email": "bschussek@2bepublished.at"
-                }
-            ],
-            "description": "Provides the functionality to export PHP variables for visualization",
-            "homepage": "http://www.github.com/sebastianbergmann/exporter",
-            "keywords": [
-                "export",
-                "exporter"
-            ],
-            "time": "2014-02-16 08:26:31"
-        },
-        {
-            "name": "sebastian/version",
-            "version": "1.0.3",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/version.git",
-                "reference": "b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43",
-                "reference": "b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43",
-                "shasum": ""
-            },
-            "type": "library",
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de",
-                    "role": "lead"
-                }
-            ],
-            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
-            "homepage": "https://github.com/sebastianbergmann/version",
-            "time": "2014-03-07 15:35:33"
-        },
-        {
-            "name": "symfony/yaml",
-            "version": "v2.5.3",
-            "target-dir": "Symfony/Component/Yaml",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/Yaml.git",
-                "reference": "5a75366ae9ca8b4792cd0083e4ca4dff9fe96f1f"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/Yaml/zipball/5a75366ae9ca8b4792cd0083e4ca4dff9fe96f1f",
-                "reference": "5a75366ae9ca8b4792cd0083e4ca4dff9fe96f1f",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=5.3.3"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "2.5-dev"
-                }
-            },
-            "autoload": {
-                "psr-0": {
-                    "Symfony\\Component\\Yaml\\": ""
-                }
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Symfony Community",
-                    "homepage": "http://symfony.com/contributors"
-                },
-                {
-                    "name": "Fabien Potencier",
-                    "email": "fabien@symfony.com"
-                }
-            ],
-            "description": "Symfony Yaml Component",
-            "homepage": "http://symfony.com",
-            "time": "2014-08-05 09:00:40"
-        }
-    ],
-    "aliases": [],
-    "minimum-stability": "stable",
-    "stability-flags": [],
-    "prefer-stable": false,
-    "platform": {
-        "php": ">=5.3.3"
-    },
-    "platform-dev": []
-}
+{
+    "_readme": [
+        "This file locks the dependencies of your project to a known state",
+        "Read more about it at http://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file",
+        "This file is @generated automatically"
+    ],
+    "hash": "ea1734d11b8c878445c2c6e58de8b85f",
+    "packages": [],
+    "packages-dev": [
+        {
+            "name": "ocramius/instantiator",
+            "version": "1.1.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/Ocramius/Instantiator.git",
+                "reference": "a7abbb5fc9df6e7126af741dd6c140d1a7369435"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/Ocramius/Instantiator/zipball/a7abbb5fc9df6e7126af741dd6c140d1a7369435",
+                "reference": "a7abbb5fc9df6e7126af741dd6c140d1a7369435",
+                "shasum": ""
+            },
+            "require": {
+                "ocramius/lazy-map": "1.0.*",
+                "php": "~5.3"
+            },
+            "require-dev": {
+                "athletic/athletic": "~0.1.8",
+                "ext-pdo": "*",
+                "ext-phar": "*",
+                "phpunit/phpunit": "~4.0",
+                "squizlabs/php_codesniffer": "2.0.*@ALPHA"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Instantiator\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Marco Pivetta",
+                    "email": "ocramius@gmail.com",
+                    "homepage": "http://ocramius.github.com/"
+                }
+            ],
+            "description": "A small, lightweight utility to instantiate objects in PHP without invoking their constructors",
+            "homepage": "https://github.com/Ocramius/Instantiator",
+            "keywords": [
+                "constructor",
+                "instantiate"
+            ],
+            "time": "2014-08-14 15:10:55"
+        },
+        {
+            "name": "ocramius/lazy-map",
+            "version": "1.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/Ocramius/LazyMap.git",
+                "reference": "7fe3d347f5e618bcea7d39345ff83f3651d8b752"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/Ocramius/LazyMap/zipball/7fe3d347f5e618bcea7d39345ff83f3651d8b752",
+                "reference": "7fe3d347f5e618bcea7d39345ff83f3651d8b752",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "athletic/athletic": "~0.1.6",
+                "phpmd/phpmd": "1.5.*",
+                "phpunit/phpunit": ">=3.7",
+                "satooshi/php-coveralls": "~0.6",
+                "squizlabs/php_codesniffer": "1.4.*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "LazyMap\\": "src"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Marco Pivetta",
+                    "email": "ocramius@gmail.com",
+                    "homepage": "http://ocramius.github.com/",
+                    "role": "Developer"
+                }
+            ],
+            "description": "A library that provides lazy instantiation logic for a map of objects",
+            "homepage": "https://github.com/Ocramius/LazyMap",
+            "keywords": [
+                "lazy",
+                "lazy instantiation",
+                "lazy loading",
+                "map",
+                "service location"
+            ],
+            "time": "2013-11-09 22:30:54"
+        },
+        {
+            "name": "phpunit/php-code-coverage",
+            "version": "2.0.10",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
+                "reference": "6d196af48e8c100a3ae881940123e693da5a9217"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/6d196af48e8c100a3ae881940123e693da5a9217",
+                "reference": "6d196af48e8c100a3ae881940123e693da5a9217",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "phpunit/php-file-iterator": "~1.3.1",
+                "phpunit/php-text-template": "~1.2.0",
+                "phpunit/php-token-stream": "~1.2.2",
+                "sebastian/environment": "~1.0.0",
+                "sebastian/version": "~1.0.3"
+            },
+            "require-dev": {
+                "ext-xdebug": ">=2.1.4",
+                "phpunit/phpunit": "~4.0.14"
+            },
+            "suggest": {
+                "ext-dom": "*",
+                "ext-xdebug": ">=2.2.1",
+                "ext-xmlwriter": "*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                ""
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sb@sebastian-bergmann.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Library that provides collection, processing, and rendering functionality for PHP code coverage information.",
+            "homepage": "https://github.com/sebastianbergmann/php-code-coverage",
+            "keywords": [
+                "coverage",
+                "testing",
+                "xunit"
+            ],
+            "time": "2014-08-06 06:39:42"
+        },
+        {
+            "name": "phpunit/php-file-iterator",
+            "version": "1.3.4",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
+                "reference": "acd690379117b042d1c8af1fafd61bde001bf6bb"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/acd690379117b042d1c8af1fafd61bde001bf6bb",
+                "reference": "acd690379117b042d1c8af1fafd61bde001bf6bb",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "File/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                ""
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sb@sebastian-bergmann.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "FilterIterator implementation that filters files based on a list of suffixes.",
+            "homepage": "https://github.com/sebastianbergmann/php-file-iterator/",
+            "keywords": [
+                "filesystem",
+                "iterator"
+            ],
+            "time": "2013-10-10 15:34:57"
+        },
+        {
+            "name": "phpunit/php-text-template",
+            "version": "1.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-text-template.git",
+                "reference": "206dfefc0ffe9cebf65c413e3d0e809c82fbf00a"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/206dfefc0ffe9cebf65c413e3d0e809c82fbf00a",
+                "reference": "206dfefc0ffe9cebf65c413e3d0e809c82fbf00a",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "Text/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                ""
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sb@sebastian-bergmann.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Simple template engine.",
+            "homepage": "https://github.com/sebastianbergmann/php-text-template/",
+            "keywords": [
+                "template"
+            ],
+            "time": "2014-01-30 17:20:04"
+        },
+        {
+            "name": "phpunit/php-timer",
+            "version": "1.0.5",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-timer.git",
+                "reference": "19689d4354b295ee3d8c54b4f42c3efb69cbc17c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/19689d4354b295ee3d8c54b4f42c3efb69cbc17c",
+                "reference": "19689d4354b295ee3d8c54b4f42c3efb69cbc17c",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "PHP/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                ""
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sb@sebastian-bergmann.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Utility class for timing",
+            "homepage": "https://github.com/sebastianbergmann/php-timer/",
+            "keywords": [
+                "timer"
+            ],
+            "time": "2013-08-02 07:42:54"
+        },
+        {
+            "name": "phpunit/php-token-stream",
+            "version": "1.2.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/php-token-stream.git",
+                "reference": "ad4e1e23ae01b483c16f600ff1bebec184588e32"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-token-stream/zipball/ad4e1e23ae01b483c16f600ff1bebec184588e32",
+                "reference": "ad4e1e23ae01b483c16f600ff1bebec184588e32",
+                "shasum": ""
+            },
+            "require": {
+                "ext-tokenizer": "*",
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.2-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "PHP/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                ""
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sb@sebastian-bergmann.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Wrapper around PHP's tokenizer extension.",
+            "homepage": "https://github.com/sebastianbergmann/php-token-stream/",
+            "keywords": [
+                "tokenizer"
+            ],
+            "time": "2014-03-03 05:10:30"
+        },
+        {
+            "name": "phpunit/phpunit",
+            "version": "4.2.2",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/phpunit.git",
+                "reference": "a33fa68ece9f8c68589bfc2da8d2794e27b820bc"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/a33fa68ece9f8c68589bfc2da8d2794e27b820bc",
+                "reference": "a33fa68ece9f8c68589bfc2da8d2794e27b820bc",
+                "shasum": ""
+            },
+            "require": {
+                "ext-dom": "*",
+                "ext-json": "*",
+                "ext-pcre": "*",
+                "ext-reflection": "*",
+                "ext-spl": "*",
+                "php": ">=5.3.3",
+                "phpunit/php-code-coverage": "~2.0",
+                "phpunit/php-file-iterator": "~1.3.1",
+                "phpunit/php-text-template": "~1.2",
+                "phpunit/php-timer": "~1.0.2",
+                "phpunit/phpunit-mock-objects": "~2.2",
+                "sebastian/comparator": "~1.0",
+                "sebastian/diff": "~1.1",
+                "sebastian/environment": "~1.0",
+                "sebastian/exporter": "~1.0",
+                "sebastian/version": "~1.0",
+                "symfony/yaml": "~2.0"
+            },
+            "suggest": {
+                "phpunit/php-invoker": "~1.1"
+            },
+            "bin": [
+                "phpunit"
+            ],
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.2.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                "",
+                "../../symfony/yaml/"
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "The PHP Unit Testing framework.",
+            "homepage": "http://www.phpunit.de/",
+            "keywords": [
+                "phpunit",
+                "testing",
+                "xunit"
+            ],
+            "time": "2014-08-18 05:12:30"
+        },
+        {
+            "name": "phpunit/phpunit-mock-objects",
+            "version": "2.2.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/phpunit-mock-objects.git",
+                "reference": "42e589e08bc86e3e9bdf20d385e948347788505b"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit-mock-objects/zipball/42e589e08bc86e3e9bdf20d385e948347788505b",
+                "reference": "42e589e08bc86e3e9bdf20d385e948347788505b",
+                "shasum": ""
+            },
+            "require": {
+                "ocramius/instantiator": "~1.0",
+                "php": ">=5.3.3",
+                "phpunit/php-text-template": "~1.2"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "4.2.*@dev"
+            },
+            "suggest": {
+                "ext-soap": "*"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.2.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "include-path": [
+                ""
+            ],
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sb@sebastian-bergmann.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Mock Object library for PHPUnit",
+            "homepage": "https://github.com/sebastianbergmann/phpunit-mock-objects/",
+            "keywords": [
+                "mock",
+                "xunit"
+            ],
+            "time": "2014-08-02 13:50:58"
+        },
+        {
+            "name": "sebastian/comparator",
+            "version": "1.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/comparator.git",
+                "reference": "f7069ee51fa9fb6c038e16a9d0e3439f5449dcf2"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/f7069ee51fa9fb6c038e16a9d0e3439f5449dcf2",
+                "reference": "f7069ee51fa9fb6c038e16a9d0e3439f5449dcf2",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3",
+                "sebastian/diff": "~1.1",
+                "sebastian/exporter": "~1.0"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "~4.1"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                },
+                {
+                    "name": "Jeff Welch",
+                    "email": "whatthejeff@gmail.com"
+                },
+                {
+                    "name": "Volker Dusch",
+                    "email": "github@wallbash.com"
+                },
+                {
+                    "name": "Bernhard Schussek",
+                    "email": "bschussek@2bepublished.at"
+                }
+            ],
+            "description": "Provides the functionality to compare PHP values for equality",
+            "homepage": "http://www.github.com/sebastianbergmann/comparator",
+            "keywords": [
+                "comparator",
+                "compare",
+                "equality"
+            ],
+            "time": "2014-05-02 07:05:58"
+        },
+        {
+            "name": "sebastian/diff",
+            "version": "1.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/diff.git",
+                "reference": "1e091702a5a38e6b4c1ba9ca816e3dd343df2e2d"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/1e091702a5a38e6b4c1ba9ca816e3dd343df2e2d",
+                "reference": "1e091702a5a38e6b4c1ba9ca816e3dd343df2e2d",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.1-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                },
+                {
+                    "name": "Kore Nordmann",
+                    "email": "mail@kore-nordmann.de"
+                }
+            ],
+            "description": "Diff implementation",
+            "homepage": "http://www.github.com/sebastianbergmann/diff",
+            "keywords": [
+                "diff"
+            ],
+            "time": "2013-08-03 16:46:33"
+        },
+        {
+            "name": "sebastian/environment",
+            "version": "1.0.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/environment.git",
+                "reference": "79517609ec01139cd7e9fded0dd7ce08c952ef6a"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/79517609ec01139cd7e9fded0dd7ce08c952ef6a",
+                "reference": "79517609ec01139cd7e9fded0dd7ce08c952ef6a",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "4.0.*@dev"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Provides functionality to handle HHVM/PHP environments",
+            "homepage": "http://www.github.com/sebastianbergmann/environment",
+            "keywords": [
+                "Xdebug",
+                "environment",
+                "hhvm"
+            ],
+            "time": "2014-02-18 16:17:19"
+        },
+        {
+            "name": "sebastian/exporter",
+            "version": "1.0.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/exporter.git",
+                "reference": "1f9a98e6f5dfe0524cb8c6166f7c82f3e9ae1529"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/1f9a98e6f5dfe0524cb8c6166f7c82f3e9ae1529",
+                "reference": "1f9a98e6f5dfe0524cb8c6166f7c82f3e9ae1529",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "require-dev": {
+                "phpunit/phpunit": "4.0.*@dev"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "1.0.x-dev"
+                }
+            },
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                },
+                {
+                    "name": "Jeff Welch",
+                    "email": "whatthejeff@gmail.com"
+                },
+                {
+                    "name": "Volker Dusch",
+                    "email": "github@wallbash.com"
+                },
+                {
+                    "name": "Adam Harvey",
+                    "email": "aharvey@php.net",
+                    "role": "Lead"
+                },
+                {
+                    "name": "Bernhard Schussek",
+                    "email": "bschussek@2bepublished.at"
+                }
+            ],
+            "description": "Provides the functionality to export PHP variables for visualization",
+            "homepage": "http://www.github.com/sebastianbergmann/exporter",
+            "keywords": [
+                "export",
+                "exporter"
+            ],
+            "time": "2014-02-16 08:26:31"
+        },
+        {
+            "name": "sebastian/version",
+            "version": "1.0.3",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/sebastianbergmann/version.git",
+                "reference": "b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43",
+                "reference": "b6e1f0cf6b9e1ec409a0d3e2f2a5fb0998e36b43",
+                "shasum": ""
+            },
+            "type": "library",
+            "autoload": {
+                "classmap": [
+                    "src/"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "BSD-3-Clause"
+            ],
+            "authors": [
+                {
+                    "name": "Sebastian Bergmann",
+                    "email": "sebastian@phpunit.de",
+                    "role": "lead"
+                }
+            ],
+            "description": "Library that helps with managing the version number of Git-hosted PHP projects",
+            "homepage": "https://github.com/sebastianbergmann/version",
+            "time": "2014-03-07 15:35:33"
+        },
+        {
+            "name": "symfony/yaml",
+            "version": "v2.5.3",
+            "target-dir": "Symfony/Component/Yaml",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/symfony/Yaml.git",
+                "reference": "5a75366ae9ca8b4792cd0083e4ca4dff9fe96f1f"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/symfony/Yaml/zipball/5a75366ae9ca8b4792cd0083e4ca4dff9fe96f1f",
+                "reference": "5a75366ae9ca8b4792cd0083e4ca4dff9fe96f1f",
+                "shasum": ""
+            },
+            "require": {
+                "php": ">=5.3.3"
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "2.5-dev"
+                }
+            },
+            "autoload": {
+                "psr-0": {
+                    "Symfony\\Component\\Yaml\\": ""
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Symfony Community",
+                    "homepage": "http://symfony.com/contributors"
+                },
+                {
+                    "name": "Fabien Potencier",
+                    "email": "fabien@symfony.com"
+                }
+            ],
+            "description": "Symfony Yaml Component",
+            "homepage": "http://symfony.com",
+            "time": "2014-08-05 09:00:40"
+        }
+    ],
+    "aliases": [],
+    "minimum-stability": "stable",
+    "stability-flags": [],
+    "prefer-stable": false,
+    "platform": {
+        "php": ">=5.3.3"
+    },
+    "platform-dev": []
+}
Index: vendor/phpdocumentor/reflection-docblock/phpunit.xml.dist
===================================================================
--- vendor/phpdocumentor/reflection-docblock/phpunit.xml.dist	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/phpunit.xml.dist	(revision 57)
@@ -1,14 +1,14 @@
-<?xml version="1.0" encoding="utf-8"?>
-
-<phpunit colors="true" strict="true" bootstrap="vendor/autoload.php">
-  <testsuites>
-    <testsuite name="phpDocumentor\Reflection\DocBlock">
-      <directory>./tests/</directory>
-    </testsuite>
-  </testsuites>
-  <filter>
-    <whitelist>
-        <directory suffix=".php">./src/</directory>
-    </whitelist>
-  </filter>
-</phpunit>
+<?xml version="1.0" encoding="utf-8"?>
+
+<phpunit colors="true" strict="true" bootstrap="vendor/autoload.php">
+  <testsuites>
+    <testsuite name="phpDocumentor\Reflection\DocBlock">
+      <directory>./tests/</directory>
+    </testsuite>
+  </testsuites>
+  <filter>
+    <whitelist>
+        <directory suffix=".php">./src/</directory>
+    </whitelist>
+  </filter>
+</phpunit>
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Context.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Context.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Context.php	(revision 57)
@@ -1,154 +1,154 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-/**
- * The context in which a DocBlock occurs.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class Context
-{
-    /** @var string The current namespace. */
-    protected $namespace = '';
-
-    /** @var array List of namespace aliases => Fully Qualified Namespace. */
-    protected $namespace_aliases = array();
-    
-    /** @var string Name of the structural element, within the namespace. */
-    protected $lsen = '';
-    
-    /**
-     * Cteates a new context.
-     * @param string $namespace         The namespace where this DocBlock
-     *     resides in.
-     * @param array  $namespace_aliases List of namespace aliases => Fully
-     *     Qualified Namespace.
-     * @param string $lsen              Name of the structural element, within
-     *     the namespace.
-     */
-    public function __construct(
-        $namespace = '',
-        array $namespace_aliases = array(),
-        $lsen = ''
-    ) {
-        if (!empty($namespace)) {
-            $this->setNamespace($namespace);
-        }
-        $this->setNamespaceAliases($namespace_aliases);
-        $this->setLSEN($lsen);
-    }
-
-    /**
-     * @return string The namespace where this DocBlock resides in.
-     */
-    public function getNamespace()
-    {
-        return $this->namespace;
-    }
-
-    /**
-     * @return array List of namespace aliases => Fully Qualified Namespace.
-     */
-    public function getNamespaceAliases()
-    {
-        return $this->namespace_aliases;
-    }
-    
-    /**
-     * Returns the Local Structural Element Name.
-     * 
-     * @return string Name of the structural element, within the namespace.
-     */
-    public function getLSEN()
-    {
-        return $this->lsen;
-    }
-    
-    /**
-     * Sets a new namespace.
-     * 
-     * Sets a new namespace for the context. Leading and trailing slashes are
-     * trimmed, and the keywords "global" and "default" are treated as aliases
-     * to no namespace.
-     * 
-     * @param string $namespace The new namespace to set.
-     * 
-     * @return $this
-     */
-    public function setNamespace($namespace)
-    {
-        if ('global' !== $namespace
-            && 'default' !== $namespace
-        ) {
-            // Srip leading and trailing slash
-            $this->namespace = trim((string)$namespace, '\\');
-        } else {
-            $this->namespace = '';
-        }
-        return $this;
-    }
-    
-    /**
-     * Sets the namespace aliases, replacing all previous ones.
-     * 
-     * @param array $namespace_aliases List of namespace aliases => Fully
-     *     Qualified Namespace.
-     * 
-     * @return $this
-     */
-    public function setNamespaceAliases(array $namespace_aliases)
-    {
-        $this->namespace_aliases = array();
-        foreach ($namespace_aliases as $alias => $fqnn) {
-            $this->setNamespaceAlias($alias, $fqnn);
-        }
-        return $this;
-    }
-    
-    /**
-     * Adds a namespace alias to the context.
-     * 
-     * @param string $alias The alias name (the part after "as", or the last
-     *     part of the Fully Qualified Namespace Name) to add.
-     * @param string $fqnn  The Fully Qualified Namespace Name for this alias.
-     *     Any form of leading/trailing slashes are accepted, but what will be
-     *     stored is a name, prefixed with a slash, and no trailing slash.
-     * 
-     * @return $this
-     */
-    public function setNamespaceAlias($alias, $fqnn)
-    {
-        $this->namespace_aliases[$alias] = '\\' . trim((string)$fqnn, '\\');
-        return $this;
-    }
-    
-    /**
-     * Sets a new Local Structural Element Name.
-     * 
-     * Sets a new Local Structural Element Name. A local name also contains
-     * punctuation determining the kind of structural element (e.g. trailing "("
-     * and ")" for functions and methods).
-     * 
-     * @param string $lsen The new local name of a structural element.
-     * 
-     * @return $this
-     */
-    public function setLSEN($lsen)
-    {
-        $this->lsen = (string)$lsen;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+/**
+ * The context in which a DocBlock occurs.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class Context
+{
+    /** @var string The current namespace. */
+    protected $namespace = '';
+
+    /** @var array List of namespace aliases => Fully Qualified Namespace. */
+    protected $namespace_aliases = array();
+    
+    /** @var string Name of the structural element, within the namespace. */
+    protected $lsen = '';
+    
+    /**
+     * Cteates a new context.
+     * @param string $namespace         The namespace where this DocBlock
+     *     resides in.
+     * @param array  $namespace_aliases List of namespace aliases => Fully
+     *     Qualified Namespace.
+     * @param string $lsen              Name of the structural element, within
+     *     the namespace.
+     */
+    public function __construct(
+        $namespace = '',
+        array $namespace_aliases = array(),
+        $lsen = ''
+    ) {
+        if (!empty($namespace)) {
+            $this->setNamespace($namespace);
+        }
+        $this->setNamespaceAliases($namespace_aliases);
+        $this->setLSEN($lsen);
+    }
+
+    /**
+     * @return string The namespace where this DocBlock resides in.
+     */
+    public function getNamespace()
+    {
+        return $this->namespace;
+    }
+
+    /**
+     * @return array List of namespace aliases => Fully Qualified Namespace.
+     */
+    public function getNamespaceAliases()
+    {
+        return $this->namespace_aliases;
+    }
+    
+    /**
+     * Returns the Local Structural Element Name.
+     * 
+     * @return string Name of the structural element, within the namespace.
+     */
+    public function getLSEN()
+    {
+        return $this->lsen;
+    }
+    
+    /**
+     * Sets a new namespace.
+     * 
+     * Sets a new namespace for the context. Leading and trailing slashes are
+     * trimmed, and the keywords "global" and "default" are treated as aliases
+     * to no namespace.
+     * 
+     * @param string $namespace The new namespace to set.
+     * 
+     * @return $this
+     */
+    public function setNamespace($namespace)
+    {
+        if ('global' !== $namespace
+            && 'default' !== $namespace
+        ) {
+            // Srip leading and trailing slash
+            $this->namespace = trim((string)$namespace, '\\');
+        } else {
+            $this->namespace = '';
+        }
+        return $this;
+    }
+    
+    /**
+     * Sets the namespace aliases, replacing all previous ones.
+     * 
+     * @param array $namespace_aliases List of namespace aliases => Fully
+     *     Qualified Namespace.
+     * 
+     * @return $this
+     */
+    public function setNamespaceAliases(array $namespace_aliases)
+    {
+        $this->namespace_aliases = array();
+        foreach ($namespace_aliases as $alias => $fqnn) {
+            $this->setNamespaceAlias($alias, $fqnn);
+        }
+        return $this;
+    }
+    
+    /**
+     * Adds a namespace alias to the context.
+     * 
+     * @param string $alias The alias name (the part after "as", or the last
+     *     part of the Fully Qualified Namespace Name) to add.
+     * @param string $fqnn  The Fully Qualified Namespace Name for this alias.
+     *     Any form of leading/trailing slashes are accepted, but what will be
+     *     stored is a name, prefixed with a slash, and no trailing slash.
+     * 
+     * @return $this
+     */
+    public function setNamespaceAlias($alias, $fqnn)
+    {
+        $this->namespace_aliases[$alias] = '\\' . trim((string)$fqnn, '\\');
+        return $this;
+    }
+    
+    /**
+     * Sets a new Local Structural Element Name.
+     * 
+     * Sets a new Local Structural Element Name. A local name also contains
+     * punctuation determining the kind of structural element (e.g. trailing "("
+     * and ")" for functions and methods).
+     * 
+     * @param string $lsen The new local name of a structural element.
+     * 
+     * @return $this
+     */
+    public function setLSEN($lsen)
+    {
+        $this->lsen = (string)$lsen;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Description.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Description.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Description.php	(revision 57)
@@ -1,223 +1,223 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-use phpDocumentor\Reflection\DocBlock;
-
-/**
- * Parses a Description of a DocBlock or tag.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class Description implements \Reflector
-{
-    /** @var string */
-    protected $contents = '';
-
-    /** @var array The contents, as an array of strings and Tag objects. */
-    protected $parsedContents = null;
-
-    /** @var DocBlock The DocBlock which this description belongs to. */
-    protected $docblock = null;
-
-    /**
-     * Populates the fields of a description.
-     *
-     * @param string   $content  The description's conetnts.
-     * @param DocBlock $docblock The DocBlock which this description belongs to.
-     */
-    public function __construct($content, DocBlock $docblock = null)
-    {
-        $this->setContent($content)->setDocBlock($docblock);
-    }
-
-    /**
-     * Gets the text of this description.
-     *
-     * @return string
-     */
-    public function getContents()
-    {
-        return $this->contents;
-    }
-
-    /**
-     * Sets the text of this description.
-     *
-     * @param string $content The new text of this description.
-     *
-     * @return $this
-     */
-    public function setContent($content)
-    {
-        $this->contents = trim($content);
-
-        $this->parsedContents = null;
-        return $this;
-    }
-
-    /**
-     * Returns the parsed text of this description.
-     *
-     * @return array An array of strings and tag objects, in the order they
-     *     occur within the description.
-     */
-    public function getParsedContents()
-    {
-        if (null === $this->parsedContents) {
-            $this->parsedContents = preg_split(
-                '/\{
-                    # "{@}" is not a valid inline tag. This ensures that
-                    # we do not treat it as one, but treat it literally.
-                    (?!@\})
-                    # We want to capture the whole tag line, but without the
-                    # inline tag delimiters.
-                    (\@
-                        # Match everything up to the next delimiter.
-                        [^{}]*
-                        # Nested inline tag content should not be captured, or
-                        # it will appear in the result separately.
-                        (?:
-                            # Match nested inline tags.
-                            (?:
-                                # Because we did not catch the tag delimiters
-                                # earlier, we must be explicit with them here.
-                                # Notice that this also matches "{}", as a way
-                                # to later introduce it as an escape sequence.
-                                \{(?1)?\}
-                                |
-                                # Make sure we match hanging "{".
-                                \{
-                            )
-                            # Match content after the nested inline tag.
-                            [^{}]*
-                        )* # If there are more inline tags, match them as well.
-                           # We use "*" since there may not be any nested inline
-                           # tags.
-                    )
-                \}/Sux',
-                $this->contents,
-                null,
-                PREG_SPLIT_DELIM_CAPTURE
-            );
-
-            $count = count($this->parsedContents);
-            for ($i=1; $i<$count; $i += 2) {
-                $this->parsedContents[$i] = Tag::createInstance(
-                    $this->parsedContents[$i],
-                    $this->docblock
-                );
-            }
-
-            //In order to allow "literal" inline tags, the otherwise invalid
-            //sequence "{@}" is changed to "@", and "{}" is changed to "}".
-            //See unit tests for examples.
-            for ($i=0; $i<$count; $i += 2) {
-                $this->parsedContents[$i] = str_replace(
-                    array('{@}', '{}'),
-                    array('@', '}'),
-                    $this->parsedContents[$i]
-                );
-            }
-        }
-        return $this->parsedContents;
-    }
-
-    /**
-     * Return a formatted variant of the Long Description using MarkDown.
-     *
-     * @todo this should become a more intelligent piece of code where the
-     *     configuration contains a setting what format long descriptions are.
-     *
-     * @codeCoverageIgnore Will be removed soon, in favor of adapters at
-     *     PhpDocumentor itself that will process text in various formats.
-     *
-     * @return string
-     */
-    public function getFormattedContents()
-    {
-        $result = $this->contents;
-
-        // if the long description contains a plain HTML <code> element, surround
-        // it with a pre element. Please note that we explicitly used str_replace
-        // and not preg_replace to gain performance
-        if (strpos($result, '<code>') !== false) {
-            $result = str_replace(
-                array('<code>', "<code>\r\n", "<code>\n", "<code>\r", '</code>'),
-                array('<pre><code>', '<code>', '<code>', '<code>', '</code></pre>'),
-                $result
-            );
-        }
-
-        if (class_exists('Parsedown')) {
-            $markdown = \Parsedown::instance();
-            $result = $markdown->parse($result);
-        } elseif (class_exists('dflydev\markdown\MarkdownExtraParser')) {
-            $markdown = new \dflydev\markdown\MarkdownExtraParser();
-            $result = $markdown->transformMarkdown($result);
-        }
-
-        return trim($result);
-    }
-
-    /**
-     * Gets the docblock this tag belongs to.
-     *
-     * @return DocBlock The docblock this description belongs to.
-     */
-    public function getDocBlock()
-    {
-        return $this->docblock;
-    }
-
-    /**
-     * Sets the docblock this tag belongs to.
-     *
-     * @param DocBlock $docblock The new docblock this description belongs to.
-     *     Setting NULL removes any association.
-     *
-     * @return $this
-     */
-    public function setDocBlock(DocBlock $docblock = null)
-    {
-        $this->docblock = $docblock;
-
-        return $this;
-    }
-
-    /**
-     * Builds a string representation of this object.
-     *
-     * @todo determine the exact format as used by PHP Reflection
-     *     and implement it.
-     *
-     * @return void
-     * @codeCoverageIgnore Not yet implemented
-     */
-    public static function export()
-    {
-        throw new \Exception('Not yet implemented');
-    }
-
-    /**
-     * Returns the long description as a string.
-     *
-     * @return string
-     */
-    public function __toString()
-    {
-        return $this->getContents();
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+use phpDocumentor\Reflection\DocBlock;
+
+/**
+ * Parses a Description of a DocBlock or tag.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class Description implements \Reflector
+{
+    /** @var string */
+    protected $contents = '';
+
+    /** @var array The contents, as an array of strings and Tag objects. */
+    protected $parsedContents = null;
+
+    /** @var DocBlock The DocBlock which this description belongs to. */
+    protected $docblock = null;
+
+    /**
+     * Populates the fields of a description.
+     *
+     * @param string   $content  The description's conetnts.
+     * @param DocBlock $docblock The DocBlock which this description belongs to.
+     */
+    public function __construct($content, DocBlock $docblock = null)
+    {
+        $this->setContent($content)->setDocBlock($docblock);
+    }
+
+    /**
+     * Gets the text of this description.
+     *
+     * @return string
+     */
+    public function getContents()
+    {
+        return $this->contents;
+    }
+
+    /**
+     * Sets the text of this description.
+     *
+     * @param string $content The new text of this description.
+     *
+     * @return $this
+     */
+    public function setContent($content)
+    {
+        $this->contents = trim($content);
+
+        $this->parsedContents = null;
+        return $this;
+    }
+
+    /**
+     * Returns the parsed text of this description.
+     *
+     * @return array An array of strings and tag objects, in the order they
+     *     occur within the description.
+     */
+    public function getParsedContents()
+    {
+        if (null === $this->parsedContents) {
+            $this->parsedContents = preg_split(
+                '/\{
+                    # "{@}" is not a valid inline tag. This ensures that
+                    # we do not treat it as one, but treat it literally.
+                    (?!@\})
+                    # We want to capture the whole tag line, but without the
+                    # inline tag delimiters.
+                    (\@
+                        # Match everything up to the next delimiter.
+                        [^{}]*
+                        # Nested inline tag content should not be captured, or
+                        # it will appear in the result separately.
+                        (?:
+                            # Match nested inline tags.
+                            (?:
+                                # Because we did not catch the tag delimiters
+                                # earlier, we must be explicit with them here.
+                                # Notice that this also matches "{}", as a way
+                                # to later introduce it as an escape sequence.
+                                \{(?1)?\}
+                                |
+                                # Make sure we match hanging "{".
+                                \{
+                            )
+                            # Match content after the nested inline tag.
+                            [^{}]*
+                        )* # If there are more inline tags, match them as well.
+                           # We use "*" since there may not be any nested inline
+                           # tags.
+                    )
+                \}/Sux',
+                $this->contents,
+                null,
+                PREG_SPLIT_DELIM_CAPTURE
+            );
+
+            $count = count($this->parsedContents);
+            for ($i=1; $i<$count; $i += 2) {
+                $this->parsedContents[$i] = Tag::createInstance(
+                    $this->parsedContents[$i],
+                    $this->docblock
+                );
+            }
+
+            //In order to allow "literal" inline tags, the otherwise invalid
+            //sequence "{@}" is changed to "@", and "{}" is changed to "}".
+            //See unit tests for examples.
+            for ($i=0; $i<$count; $i += 2) {
+                $this->parsedContents[$i] = str_replace(
+                    array('{@}', '{}'),
+                    array('@', '}'),
+                    $this->parsedContents[$i]
+                );
+            }
+        }
+        return $this->parsedContents;
+    }
+
+    /**
+     * Return a formatted variant of the Long Description using MarkDown.
+     *
+     * @todo this should become a more intelligent piece of code where the
+     *     configuration contains a setting what format long descriptions are.
+     *
+     * @codeCoverageIgnore Will be removed soon, in favor of adapters at
+     *     PhpDocumentor itself that will process text in various formats.
+     *
+     * @return string
+     */
+    public function getFormattedContents()
+    {
+        $result = $this->contents;
+
+        // if the long description contains a plain HTML <code> element, surround
+        // it with a pre element. Please note that we explicitly used str_replace
+        // and not preg_replace to gain performance
+        if (strpos($result, '<code>') !== false) {
+            $result = str_replace(
+                array('<code>', "<code>\r\n", "<code>\n", "<code>\r", '</code>'),
+                array('<pre><code>', '<code>', '<code>', '<code>', '</code></pre>'),
+                $result
+            );
+        }
+
+        if (class_exists('Parsedown')) {
+            $markdown = \Parsedown::instance();
+            $result = $markdown->parse($result);
+        } elseif (class_exists('dflydev\markdown\MarkdownExtraParser')) {
+            $markdown = new \dflydev\markdown\MarkdownExtraParser();
+            $result = $markdown->transformMarkdown($result);
+        }
+
+        return trim($result);
+    }
+
+    /**
+     * Gets the docblock this tag belongs to.
+     *
+     * @return DocBlock The docblock this description belongs to.
+     */
+    public function getDocBlock()
+    {
+        return $this->docblock;
+    }
+
+    /**
+     * Sets the docblock this tag belongs to.
+     *
+     * @param DocBlock $docblock The new docblock this description belongs to.
+     *     Setting NULL removes any association.
+     *
+     * @return $this
+     */
+    public function setDocBlock(DocBlock $docblock = null)
+    {
+        $this->docblock = $docblock;
+
+        return $this;
+    }
+
+    /**
+     * Builds a string representation of this object.
+     *
+     * @todo determine the exact format as used by PHP Reflection
+     *     and implement it.
+     *
+     * @return void
+     * @codeCoverageIgnore Not yet implemented
+     */
+    public static function export()
+    {
+        throw new \Exception('Not yet implemented');
+    }
+
+    /**
+     * Returns the long description as a string.
+     *
+     * @return string
+     */
+    public function __toString()
+    {
+        return $this->getContents();
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Location.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Location.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Location.php	(revision 57)
@@ -1,76 +1,76 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-/**
- * The location a DocBlock occurs within a file.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class Location
-{
-    /** @var int Line where the DocBlock text starts. */
-    protected $lineNumber = 0;
-
-    /** @var int Column where the DocBlock text starts. */
-    protected $columnNumber = 0;
-    
-    public function __construct(
-        $lineNumber = 0,
-        $columnNumber = 0
-    ) {
-        $this->setLineNumber($lineNumber)->setColumnNumber($columnNumber);
-    }
-
-    /**
-     * @return int Line where the DocBlock text starts.
-     */
-    public function getLineNumber()
-    {
-        return $this->lineNumber;
-    }
-
-    /**
-     * 
-     * @param type $lineNumber
-     * @return $this
-     */
-    public function setLineNumber($lineNumber)
-    {
-        $this->lineNumber = (int)$lineNumber;
-
-        return $this;
-    }
-
-    /**
-     * @return int Column where the DocBlock text starts.
-     */
-    public function getColumnNumber()
-    {
-        return $this->columnNumber;
-    }
-
-    /**
-     * 
-     * @param int $columnNumber
-     * @return $this
-     */
-    public function setColumnNumber($columnNumber)
-    {
-        $this->columnNumber = (int)$columnNumber;
-
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+/**
+ * The location a DocBlock occurs within a file.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class Location
+{
+    /** @var int Line where the DocBlock text starts. */
+    protected $lineNumber = 0;
+
+    /** @var int Column where the DocBlock text starts. */
+    protected $columnNumber = 0;
+    
+    public function __construct(
+        $lineNumber = 0,
+        $columnNumber = 0
+    ) {
+        $this->setLineNumber($lineNumber)->setColumnNumber($columnNumber);
+    }
+
+    /**
+     * @return int Line where the DocBlock text starts.
+     */
+    public function getLineNumber()
+    {
+        return $this->lineNumber;
+    }
+
+    /**
+     * 
+     * @param type $lineNumber
+     * @return $this
+     */
+    public function setLineNumber($lineNumber)
+    {
+        $this->lineNumber = (int)$lineNumber;
+
+        return $this;
+    }
+
+    /**
+     * @return int Column where the DocBlock text starts.
+     */
+    public function getColumnNumber()
+    {
+        return $this->columnNumber;
+    }
+
+    /**
+     * 
+     * @param int $columnNumber
+     * @return $this
+     */
+    public function setColumnNumber($columnNumber)
+    {
+        $this->columnNumber = (int)$columnNumber;
+
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Serializer.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Serializer.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Serializer.php	(revision 57)
@@ -1,198 +1,198 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Barry vd. Heuvel <barryvdh@gmail.com>
- * @copyright 2013 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-use phpDocumentor\Reflection\DocBlock;
-
-/**
- * Serializes a DocBlock instance.
- *
- * @author  Barry vd. Heuvel <barryvdh@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class Serializer
-{
-
-    /** @var string The string to indent the comment with. */
-    protected $indentString = ' ';
-
-    /** @var int The number of times the indent string is repeated. */
-    protected $indent = 0;
-
-    /** @var bool Whether to indent the first line. */
-    protected $isFirstLineIndented = true;
-
-    /** @var int|null The max length of a line. */
-    protected $lineLength = null;
-
-    /**
-     * Create a Serializer instance.
-     *
-     * @param int      $indent          The number of times the indent string is
-     *     repeated.
-     * @param string   $indentString    The string to indent the comment with.
-     * @param bool     $indentFirstLine Whether to indent the first line.
-     * @param int|null $lineLength      The max length of a line or NULL to
-     *     disable line wrapping.
-     */
-    public function __construct(
-        $indent = 0,
-        $indentString = ' ',
-        $indentFirstLine = true,
-        $lineLength = null
-    ) {
-        $this->setIndentationString($indentString);
-        $this->setIndent($indent);
-        $this->setIsFirstLineIndented($indentFirstLine);
-        $this->setLineLength($lineLength);
-    }
-
-    /**
-     * Sets the string to indent comments with.
-     * 
-     * @param string $indentationString The string to indent comments with.
-     * 
-     * @return $this This serializer object.
-     */
-    public function setIndentationString($indentString)
-    {
-        $this->indentString = (string)$indentString;
-        return $this;
-    }
-
-    /**
-     * Gets the string to indent comments with.
-     * 
-     * @return string The indent string.
-     */
-    public function getIndentationString()
-    {
-        return $this->indentString;
-    }
-
-    /**
-     * Sets the number of indents.
-     * 
-     * @param int $indent The number of times the indent string is repeated.
-     * 
-     * @return $this This serializer object.
-     */
-    public function setIndent($indent)
-    {
-        $this->indent = (int)$indent;
-        return $this;
-    }
-
-    /**
-     * Gets the number of indents.
-     * 
-     * @return int The number of times the indent string is repeated.
-     */
-    public function getIndent()
-    {
-        return $this->indent;
-    }
-
-    /**
-     * Sets whether or not the first line should be indented.
-     * 
-     * Sets whether or not the first line (the one with the "/**") should be
-     * indented.
-     * 
-     * @param bool $indentFirstLine The new value for this setting.
-     * 
-     * @return $this This serializer object.
-     */
-    public function setIsFirstLineIndented($indentFirstLine)
-    {
-        $this->isFirstLineIndented = (bool)$indentFirstLine;
-        return $this;
-    }
-
-    /**
-     * Gets whether or not the first line should be indented.
-     * 
-     * @return bool Whether or not the first line should be indented.
-     */
-    public function isFirstLineIndented()
-    {
-        return $this->isFirstLineIndented;
-    }
-
-    /**
-     * Sets the line length.
-     * 
-     * Sets the length of each line in the serialization. Content will be
-     * wrapped within this limit.
-     * 
-     * @param int|null $lineLength The length of each line. NULL to disable line
-     *     wrapping altogether.
-     * 
-     * @return $this This serializer object.
-     */
-    public function setLineLength($lineLength)
-    {
-        $this->lineLength = null === $lineLength ? null : (int)$lineLength;
-        return $this;
-    }
-
-    /**
-     * Gets the line length.
-     * 
-     * @return int|null The length of each line or NULL if line wrapping is
-     *     disabled.
-     */
-    public function getLineLength()
-    {
-        return $this->lineLength;
-    }
-
-    /**
-     * Generate a DocBlock comment.
-     *
-     * @param DocBlock The DocBlock to serialize.
-     * 
-     * @return string The serialized doc block.
-     */
-    public function getDocComment(DocBlock $docblock)
-    {
-        $indent = str_repeat($this->indentString, $this->indent);
-        $firstIndent = $this->isFirstLineIndented ? $indent : '';
-
-        $text = $docblock->getText();
-        if ($this->lineLength) {
-            //3 === strlen(' * ')
-            $wrapLength = $this->lineLength - strlen($indent) - 3;
-            $text = wordwrap($text, $wrapLength);
-        }
-        $text = str_replace("\n", "\n{$indent} * ", $text);
-
-        $comment = "{$firstIndent}/**\n{$indent} * {$text}\n{$indent} *\n";
-
-        /** @var Tag $tag */
-        foreach ($docblock->getTags() as $tag) {
-            $tagText = (string) $tag;
-            if ($this->lineLength) {
-                $tagText = wordwrap($tagText, $wrapLength);
-            }
-            $tagText = str_replace("\n", "\n{$indent} * ", $tagText);
-
-            $comment .= "{$indent} * {$tagText}\n";
-        }
-
-        $comment .= $indent . ' */';
-
-        return $comment;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Barry vd. Heuvel <barryvdh@gmail.com>
+ * @copyright 2013 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+use phpDocumentor\Reflection\DocBlock;
+
+/**
+ * Serializes a DocBlock instance.
+ *
+ * @author  Barry vd. Heuvel <barryvdh@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class Serializer
+{
+
+    /** @var string The string to indent the comment with. */
+    protected $indentString = ' ';
+
+    /** @var int The number of times the indent string is repeated. */
+    protected $indent = 0;
+
+    /** @var bool Whether to indent the first line. */
+    protected $isFirstLineIndented = true;
+
+    /** @var int|null The max length of a line. */
+    protected $lineLength = null;
+
+    /**
+     * Create a Serializer instance.
+     *
+     * @param int      $indent          The number of times the indent string is
+     *     repeated.
+     * @param string   $indentString    The string to indent the comment with.
+     * @param bool     $indentFirstLine Whether to indent the first line.
+     * @param int|null $lineLength      The max length of a line or NULL to
+     *     disable line wrapping.
+     */
+    public function __construct(
+        $indent = 0,
+        $indentString = ' ',
+        $indentFirstLine = true,
+        $lineLength = null
+    ) {
+        $this->setIndentationString($indentString);
+        $this->setIndent($indent);
+        $this->setIsFirstLineIndented($indentFirstLine);
+        $this->setLineLength($lineLength);
+    }
+
+    /**
+     * Sets the string to indent comments with.
+     * 
+     * @param string $indentationString The string to indent comments with.
+     * 
+     * @return $this This serializer object.
+     */
+    public function setIndentationString($indentString)
+    {
+        $this->indentString = (string)$indentString;
+        return $this;
+    }
+
+    /**
+     * Gets the string to indent comments with.
+     * 
+     * @return string The indent string.
+     */
+    public function getIndentationString()
+    {
+        return $this->indentString;
+    }
+
+    /**
+     * Sets the number of indents.
+     * 
+     * @param int $indent The number of times the indent string is repeated.
+     * 
+     * @return $this This serializer object.
+     */
+    public function setIndent($indent)
+    {
+        $this->indent = (int)$indent;
+        return $this;
+    }
+
+    /**
+     * Gets the number of indents.
+     * 
+     * @return int The number of times the indent string is repeated.
+     */
+    public function getIndent()
+    {
+        return $this->indent;
+    }
+
+    /**
+     * Sets whether or not the first line should be indented.
+     * 
+     * Sets whether or not the first line (the one with the "/**") should be
+     * indented.
+     * 
+     * @param bool $indentFirstLine The new value for this setting.
+     * 
+     * @return $this This serializer object.
+     */
+    public function setIsFirstLineIndented($indentFirstLine)
+    {
+        $this->isFirstLineIndented = (bool)$indentFirstLine;
+        return $this;
+    }
+
+    /**
+     * Gets whether or not the first line should be indented.
+     * 
+     * @return bool Whether or not the first line should be indented.
+     */
+    public function isFirstLineIndented()
+    {
+        return $this->isFirstLineIndented;
+    }
+
+    /**
+     * Sets the line length.
+     * 
+     * Sets the length of each line in the serialization. Content will be
+     * wrapped within this limit.
+     * 
+     * @param int|null $lineLength The length of each line. NULL to disable line
+     *     wrapping altogether.
+     * 
+     * @return $this This serializer object.
+     */
+    public function setLineLength($lineLength)
+    {
+        $this->lineLength = null === $lineLength ? null : (int)$lineLength;
+        return $this;
+    }
+
+    /**
+     * Gets the line length.
+     * 
+     * @return int|null The length of each line or NULL if line wrapping is
+     *     disabled.
+     */
+    public function getLineLength()
+    {
+        return $this->lineLength;
+    }
+
+    /**
+     * Generate a DocBlock comment.
+     *
+     * @param DocBlock The DocBlock to serialize.
+     * 
+     * @return string The serialized doc block.
+     */
+    public function getDocComment(DocBlock $docblock)
+    {
+        $indent = str_repeat($this->indentString, $this->indent);
+        $firstIndent = $this->isFirstLineIndented ? $indent : '';
+
+        $text = $docblock->getText();
+        if ($this->lineLength) {
+            //3 === strlen(' * ')
+            $wrapLength = $this->lineLength - strlen($indent) - 3;
+            $text = wordwrap($text, $wrapLength);
+        }
+        $text = str_replace("\n", "\n{$indent} * ", $text);
+
+        $comment = "{$firstIndent}/**\n{$indent} * {$text}\n{$indent} *\n";
+
+        /** @var Tag $tag */
+        foreach ($docblock->getTags() as $tag) {
+            $tagText = (string) $tag;
+            if ($this->lineLength) {
+                $tagText = wordwrap($tagText, $wrapLength);
+            }
+            $tagText = str_replace("\n", "\n{$indent} * ", $tagText);
+
+            $comment .= "{$indent} * {$tagText}\n";
+        }
+
+        $comment .= $indent . ' */';
+
+        return $comment;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/AuthorTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/AuthorTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/AuthorTag.php	(revision 57)
@@ -1,131 +1,131 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for an @author tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class AuthorTag extends Tag
-{
-    /**
-     * PCRE regular expression matching any valid value for the name component.
-     */
-    const REGEX_AUTHOR_NAME = '[^\<]*';
-
-    /**
-     * PCRE regular expression matching any valid value for the email component.
-     */
-    const REGEX_AUTHOR_EMAIL = '[^\>]*';
-
-    /** @var string The name of the author */
-    protected $authorName = '';
-
-    /** @var string The email of the author */
-    protected $authorEmail = '';
-    
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = $this->authorName;
-            if ('' != $this->authorEmail) {
-                $this->content .= "<{$this->authorEmail}>";
-            }
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        parent::setContent($content);
-        if (preg_match(
-            '/^(' . self::REGEX_AUTHOR_NAME .
-            ')(\<(' . self::REGEX_AUTHOR_EMAIL .
-            ')\>)?$/u',
-            $this->description,
-            $matches
-        )) {
-            $this->authorName = trim($matches[1]);
-            if (isset($matches[3])) {
-                $this->authorEmail = trim($matches[3]);
-            }
-        }
-
-        return $this;
-    }
-
-    /**
-     * Gets the author's name.
-     * 
-     * @return string The author's name.
-     */
-    public function getAuthorName()
-    {
-        return $this->authorName;
-    }
-    
-    /**
-     * Sets the author's name.
-     * 
-     * @param string $authorName The new author name.
-     *     An invalid value will set an empty string.
-     * 
-     * @return $this
-     */
-    public function setAuthorName($authorName)
-    {
-        $this->content = null;
-        $this->authorName
-            = preg_match('/^' . self::REGEX_AUTHOR_NAME . '$/u', $authorName)
-            ? $authorName : '';
-
-        return $this;
-    }
-
-    /**
-     * Gets the author's email.
-     * 
-     * @return string The author's email.
-     */
-    public function getAuthorEmail()
-    {
-        return $this->authorEmail;
-    }
-    
-    /**
-     * Sets the author's email.
-     * 
-     * @param string $authorEmail The new author email.
-     *     An invalid value will set an empty string.
-     * 
-     * @return $this
-     */
-    public function setAuthorEmail($authorEmail)
-    {
-        $this->authorEmail
-            = preg_match('/^' . self::REGEX_AUTHOR_EMAIL . '$/u', $authorEmail)
-            ? $authorEmail : '';
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for an @author tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class AuthorTag extends Tag
+{
+    /**
+     * PCRE regular expression matching any valid value for the name component.
+     */
+    const REGEX_AUTHOR_NAME = '[^\<]*';
+
+    /**
+     * PCRE regular expression matching any valid value for the email component.
+     */
+    const REGEX_AUTHOR_EMAIL = '[^\>]*';
+
+    /** @var string The name of the author */
+    protected $authorName = '';
+
+    /** @var string The email of the author */
+    protected $authorEmail = '';
+    
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = $this->authorName;
+            if ('' != $this->authorEmail) {
+                $this->content .= "<{$this->authorEmail}>";
+            }
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        parent::setContent($content);
+        if (preg_match(
+            '/^(' . self::REGEX_AUTHOR_NAME .
+            ')(\<(' . self::REGEX_AUTHOR_EMAIL .
+            ')\>)?$/u',
+            $this->description,
+            $matches
+        )) {
+            $this->authorName = trim($matches[1]);
+            if (isset($matches[3])) {
+                $this->authorEmail = trim($matches[3]);
+            }
+        }
+
+        return $this;
+    }
+
+    /**
+     * Gets the author's name.
+     * 
+     * @return string The author's name.
+     */
+    public function getAuthorName()
+    {
+        return $this->authorName;
+    }
+    
+    /**
+     * Sets the author's name.
+     * 
+     * @param string $authorName The new author name.
+     *     An invalid value will set an empty string.
+     * 
+     * @return $this
+     */
+    public function setAuthorName($authorName)
+    {
+        $this->content = null;
+        $this->authorName
+            = preg_match('/^' . self::REGEX_AUTHOR_NAME . '$/u', $authorName)
+            ? $authorName : '';
+
+        return $this;
+    }
+
+    /**
+     * Gets the author's email.
+     * 
+     * @return string The author's email.
+     */
+    public function getAuthorEmail()
+    {
+        return $this->authorEmail;
+    }
+    
+    /**
+     * Sets the author's email.
+     * 
+     * @param string $authorEmail The new author email.
+     *     An invalid value will set an empty string.
+     * 
+     * @return $this
+     */
+    public function setAuthorEmail($authorEmail)
+    {
+        $this->authorEmail
+            = preg_match('/^' . self::REGEX_AUTHOR_EMAIL . '$/u', $authorEmail)
+            ? $authorEmail : '';
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/CoversTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/CoversTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/CoversTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @covers tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class CoversTag extends SeeTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @covers tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class CoversTag extends SeeTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/DeprecatedTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/DeprecatedTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/DeprecatedTag.php	(revision 57)
@@ -1,26 +1,26 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag\VersionTag;
-
-/**
- * Reflection class for a @deprecated tag in a Docblock.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class DeprecatedTag extends VersionTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag\VersionTag;
+
+/**
+ * Reflection class for a @deprecated tag in a Docblock.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class DeprecatedTag extends VersionTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ExampleTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ExampleTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ExampleTag.php	(revision 57)
@@ -1,156 +1,156 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @example tag in a Docblock.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class ExampleTag extends SourceTag
-{
-    /** 
-     * @var string Path to a file to use as an example.
-     *     May also be an absolute URI.
-     */
-    protected $filePath = '';
-
-    /**
-     * @var bool Whether the file path component represents an URI.
-     *     This determines how the file portion appears at {@link getContent()}.
-     */
-    protected $isURI = false;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $filePath = '';
-            if ($this->isURI) {
-                if (false === strpos($this->filePath, ':')) {
-                    $filePath = str_replace(
-                        '%2F',
-                        '/',
-                        rawurlencode($this->filePath)
-                    );
-                } else {
-                    $filePath = $this->filePath;
-                }
-            } else {
-                $filePath = '"' . $this->filePath . '"';
-            }
-
-            $this->content = $filePath . ' ' . parent::getContent();
-        }
-
-        return $this->content;
-    }
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        Tag::setContent($content);
-        if (preg_match(
-            '/^
-                # File component
-                (?:
-                    # File path in quotes
-                    \"([^\"]+)\"
-                    |
-                    # File URI
-                    (\S+)
-                )
-                # Remaining content (parsed by SourceTag)
-                (?:\s+(.*))?
-            $/sux',
-            $this->description,
-            $matches
-        )) {
-            if ('' !== $matches[1]) {
-                $this->setFilePath($matches[1]);
-            } else {
-                $this->setFileURI($matches[2]);
-            }
-
-            if (isset($matches[3])) {
-                parent::setContent($matches[3]);
-            } else {
-                $this->setDescription('');
-            }
-            $this->content = $content;
-        }
-
-        return $this;
-    }
-
-    /**
-     * Returns the file path.
-     *
-     * @return string Path to a file to use as an example.
-     *     May also be an absolute URI.
-     */
-    public function getFilePath()
-    {
-        return $this->filePath;
-    }
-    
-    /**
-     * Sets the file path.
-     * 
-     * @param string $filePath The new file path to use for the example.
-     * 
-     * @return $this
-     */
-    public function setFilePath($filePath)
-    {
-        $this->isURI = false;
-        $this->filePath = trim($filePath);
-
-        $this->content = null;
-        return $this;
-    }
-    
-    /**
-     * Sets the file path as an URI.
-     * 
-     * This function is equivalent to {@link setFilePath()}, except that it
-     * convers an URI to a file path before that.
-     * 
-     * There is no getFileURI(), as {@link getFilePath()} is compatible.
-     * 
-     * @param type $uri The new file URI to use as an example.
-     */
-    public function setFileURI($uri)
-    {
-        $this->isURI = true;
-        if (false === strpos($uri, ':')) {
-            //Relative URL
-            $this->filePath = rawurldecode(
-                str_replace(array('/', '\\'), '%2F', $uri)
-            );
-        } else {
-            //Absolute URL or URI.
-            $this->filePath = $uri;
-        }
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @example tag in a Docblock.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class ExampleTag extends SourceTag
+{
+    /** 
+     * @var string Path to a file to use as an example.
+     *     May also be an absolute URI.
+     */
+    protected $filePath = '';
+
+    /**
+     * @var bool Whether the file path component represents an URI.
+     *     This determines how the file portion appears at {@link getContent()}.
+     */
+    protected $isURI = false;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $filePath = '';
+            if ($this->isURI) {
+                if (false === strpos($this->filePath, ':')) {
+                    $filePath = str_replace(
+                        '%2F',
+                        '/',
+                        rawurlencode($this->filePath)
+                    );
+                } else {
+                    $filePath = $this->filePath;
+                }
+            } else {
+                $filePath = '"' . $this->filePath . '"';
+            }
+
+            $this->content = $filePath . ' ' . parent::getContent();
+        }
+
+        return $this->content;
+    }
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        Tag::setContent($content);
+        if (preg_match(
+            '/^
+                # File component
+                (?:
+                    # File path in quotes
+                    \"([^\"]+)\"
+                    |
+                    # File URI
+                    (\S+)
+                )
+                # Remaining content (parsed by SourceTag)
+                (?:\s+(.*))?
+            $/sux',
+            $this->description,
+            $matches
+        )) {
+            if ('' !== $matches[1]) {
+                $this->setFilePath($matches[1]);
+            } else {
+                $this->setFileURI($matches[2]);
+            }
+
+            if (isset($matches[3])) {
+                parent::setContent($matches[3]);
+            } else {
+                $this->setDescription('');
+            }
+            $this->content = $content;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Returns the file path.
+     *
+     * @return string Path to a file to use as an example.
+     *     May also be an absolute URI.
+     */
+    public function getFilePath()
+    {
+        return $this->filePath;
+    }
+    
+    /**
+     * Sets the file path.
+     * 
+     * @param string $filePath The new file path to use for the example.
+     * 
+     * @return $this
+     */
+    public function setFilePath($filePath)
+    {
+        $this->isURI = false;
+        $this->filePath = trim($filePath);
+
+        $this->content = null;
+        return $this;
+    }
+    
+    /**
+     * Sets the file path as an URI.
+     * 
+     * This function is equivalent to {@link setFilePath()}, except that it
+     * convers an URI to a file path before that.
+     * 
+     * There is no getFileURI(), as {@link getFilePath()} is compatible.
+     * 
+     * @param type $uri The new file URI to use as an example.
+     */
+    public function setFileURI($uri)
+    {
+        $this->isURI = true;
+        if (false === strpos($uri, ':')) {
+            //Relative URL
+            $this->filePath = rawurldecode(
+                str_replace(array('/', '\\'), '%2F', $uri)
+            );
+        } else {
+            //Absolute URL or URI.
+            $this->filePath = $uri;
+        }
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/LinkTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/LinkTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/LinkTag.php	(revision 57)
@@ -1,81 +1,81 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Ben Selby <benmatselby@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @link tag in a Docblock.
- *
- * @author  Ben Selby <benmatselby@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class LinkTag extends Tag
-{
-    /** @var string */
-    protected $link = '';
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = "{$this->link} {$this->description}";
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        parent::setContent($content);
-        $parts = preg_split('/\s+/Su', $this->description, 2);
-
-        $this->link = $parts[0];
-
-        $this->setDescription(isset($parts[1]) ? $parts[1] : $parts[0]);
-
-        $this->content = $content;
-        return $this;
-    }
-
-    /**
-    * Gets the link
-    *
-    * @return string
-    */
-    public function getLink()
-    {
-        return $this->link;
-    }
-
-    /**
-    * Sets the link
-    *
-    * @param string $link The link
-    *
-    * @return $this
-    */
-    public function setLink($link)
-    {
-        $this->link = $link;
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Ben Selby <benmatselby@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @link tag in a Docblock.
+ *
+ * @author  Ben Selby <benmatselby@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class LinkTag extends Tag
+{
+    /** @var string */
+    protected $link = '';
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = "{$this->link} {$this->description}";
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        parent::setContent($content);
+        $parts = preg_split('/\s+/Su', $this->description, 2);
+
+        $this->link = $parts[0];
+
+        $this->setDescription(isset($parts[1]) ? $parts[1] : $parts[0]);
+
+        $this->content = $content;
+        return $this;
+    }
+
+    /**
+    * Gets the link
+    *
+    * @return string
+    */
+    public function getLink()
+    {
+        return $this->link;
+    }
+
+    /**
+    * Sets the link
+    *
+    * @param string $link The link
+    *
+    * @return $this
+    */
+    public function setLink($link)
+    {
+        $this->link = $link;
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/MethodTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/MethodTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/MethodTag.php	(revision 57)
@@ -1,209 +1,209 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @method in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class MethodTag extends ReturnTag
-{
-
-    /** @var string */
-    protected $method_name = '';
-
-    /** @var string */
-    protected $arguments = '';
-    
-    /** @var bool */
-    protected $isStatic = false;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = '';
-            if ($this->isStatic) {
-                $this->content .= 'static ';
-            }
-            $this->content .= $this->type .
-                " {$this->method_name}({$this->arguments}) " .
-                $this->description;
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        Tag::setContent($content);
-        // 1. none or more whitespace
-        // 2. optionally the keyword "static" followed by whitespace
-        // 3. optionally a word with underscores followed by whitespace : as
-        //    type for the return value
-        // 4. then optionally a word with underscores followed by () and
-        //    whitespace : as method name as used by phpDocumentor
-        // 5. then a word with underscores, followed by ( and any character
-        //    until a ) and whitespace : as method name with signature
-        // 6. any remaining text : as description
-        if (preg_match(
-            '/^
-                # Static keyword
-                # Declates a static method ONLY if type is also present
-                (?:
-                    (static)
-                    \s+
-                )?
-                # Return type
-                (?:
-                    ([\w\|_\\\\]+)
-                    \s+
-                )?
-                # Legacy method name (not captured)
-                (?:
-                    [\w_]+\(\)\s+
-                )?
-                # Method name
-                ([\w\|_\\\\]+)
-                # Arguments
-                \(([^\)]*)\)
-                \s*
-                # Description
-                (.*)
-            $/sux',
-            $this->description,
-            $matches
-        )) {
-            list(
-                ,
-                $static,
-                $this->type,
-                $this->method_name,
-                $this->arguments,
-                $this->description
-            ) = $matches;
-            if ($static) {
-                if (!$this->type) {
-                    $this->type = 'static';
-                } else {
-                    $this->isStatic = true;
-                }
-            } else {
-                if (!$this->type) {
-                    $this->type = 'void';
-                }
-            }
-            $this->parsedDescription = null;
-        }
-
-        return $this;
-    }
-
-    /**
-     * Sets the name of this method.
-     *
-     * @param string $method_name The name of the method.
-     *
-     * @return $this
-     */
-    public function setMethodName($method_name)
-    {
-        $this->method_name = $method_name;
-
-        $this->content = null;
-        return $this;
-    }
-
-    /**
-     * Retrieves the method name.
-     *
-     * @return string
-     */
-    public function getMethodName()
-    {
-        return $this->method_name;
-    }
-
-    /**
-     * Sets the arguments for this method.
-     *
-     * @param string $arguments A comma-separated arguments line.
-     *
-     * @return void
-     */
-    public function setArguments($arguments)
-    {
-        $this->arguments = $arguments;
-
-        $this->content = null;
-        return $this;
-    }
-
-    /**
-     * Returns an array containing each argument as array of type and name.
-     *
-     * Please note that the argument sub-array may only contain 1 element if no
-     * type was specified.
-     *
-     * @return string[]
-     */
-    public function getArguments()
-    {
-        if (empty($this->arguments)) {
-            return array();
-        }
-
-        $arguments = explode(',', $this->arguments);
-        foreach ($arguments as $key => $value) {
-            $arguments[$key] = explode(' ', trim($value));
-        }
-
-        return $arguments;
-    }
-    
-    /**
-     * Checks whether the method tag describes a static method or not.
-     * 
-     * @return bool TRUE if the method declaration is for a static method, FALSE
-     *     otherwise.
-     */
-    public function isStatic()
-    {
-        return $this->isStatic;
-    }
-    
-    /**
-     * Sets a new value for whether the method is static or not.
-     * 
-     * @param bool $isStatic The new value to set.
-     * 
-     * @return $this
-     */
-    public function setIsStatic($isStatic)
-    {
-        $this->isStatic = $isStatic;
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @method in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class MethodTag extends ReturnTag
+{
+
+    /** @var string */
+    protected $method_name = '';
+
+    /** @var string */
+    protected $arguments = '';
+    
+    /** @var bool */
+    protected $isStatic = false;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = '';
+            if ($this->isStatic) {
+                $this->content .= 'static ';
+            }
+            $this->content .= $this->type .
+                " {$this->method_name}({$this->arguments}) " .
+                $this->description;
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        Tag::setContent($content);
+        // 1. none or more whitespace
+        // 2. optionally the keyword "static" followed by whitespace
+        // 3. optionally a word with underscores followed by whitespace : as
+        //    type for the return value
+        // 4. then optionally a word with underscores followed by () and
+        //    whitespace : as method name as used by phpDocumentor
+        // 5. then a word with underscores, followed by ( and any character
+        //    until a ) and whitespace : as method name with signature
+        // 6. any remaining text : as description
+        if (preg_match(
+            '/^
+                # Static keyword
+                # Declates a static method ONLY if type is also present
+                (?:
+                    (static)
+                    \s+
+                )?
+                # Return type
+                (?:
+                    ([\w\|_\\\\]+)
+                    \s+
+                )?
+                # Legacy method name (not captured)
+                (?:
+                    [\w_]+\(\)\s+
+                )?
+                # Method name
+                ([\w\|_\\\\]+)
+                # Arguments
+                \(([^\)]*)\)
+                \s*
+                # Description
+                (.*)
+            $/sux',
+            $this->description,
+            $matches
+        )) {
+            list(
+                ,
+                $static,
+                $this->type,
+                $this->method_name,
+                $this->arguments,
+                $this->description
+            ) = $matches;
+            if ($static) {
+                if (!$this->type) {
+                    $this->type = 'static';
+                } else {
+                    $this->isStatic = true;
+                }
+            } else {
+                if (!$this->type) {
+                    $this->type = 'void';
+                }
+            }
+            $this->parsedDescription = null;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Sets the name of this method.
+     *
+     * @param string $method_name The name of the method.
+     *
+     * @return $this
+     */
+    public function setMethodName($method_name)
+    {
+        $this->method_name = $method_name;
+
+        $this->content = null;
+        return $this;
+    }
+
+    /**
+     * Retrieves the method name.
+     *
+     * @return string
+     */
+    public function getMethodName()
+    {
+        return $this->method_name;
+    }
+
+    /**
+     * Sets the arguments for this method.
+     *
+     * @param string $arguments A comma-separated arguments line.
+     *
+     * @return void
+     */
+    public function setArguments($arguments)
+    {
+        $this->arguments = $arguments;
+
+        $this->content = null;
+        return $this;
+    }
+
+    /**
+     * Returns an array containing each argument as array of type and name.
+     *
+     * Please note that the argument sub-array may only contain 1 element if no
+     * type was specified.
+     *
+     * @return string[]
+     */
+    public function getArguments()
+    {
+        if (empty($this->arguments)) {
+            return array();
+        }
+
+        $arguments = explode(',', $this->arguments);
+        foreach ($arguments as $key => $value) {
+            $arguments[$key] = explode(' ', trim($value));
+        }
+
+        return $arguments;
+    }
+    
+    /**
+     * Checks whether the method tag describes a static method or not.
+     * 
+     * @return bool TRUE if the method declaration is for a static method, FALSE
+     *     otherwise.
+     */
+    public function isStatic()
+    {
+        return $this->isStatic;
+    }
+    
+    /**
+     * Sets a new value for whether the method is static or not.
+     * 
+     * @param bool $isStatic The new value to set.
+     * 
+     * @return $this
+     */
+    public function setIsStatic($isStatic)
+    {
+        $this->isStatic = $isStatic;
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ParamTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ParamTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ParamTag.php	(revision 57)
@@ -1,119 +1,119 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @param tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class ParamTag extends ReturnTag
-{
-    /** @var string */
-    protected $variableName = '';
-
-    /** @var bool determines whether this is a variadic argument */
-    protected $isVariadic = false;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content
-                = "{$this->type} {$this->variableName} {$this->description}";
-        }
-        return $this->content;
-    }
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        Tag::setContent($content);
-        $parts = preg_split(
-            '/(\s+)/Su',
-            $this->description,
-            3,
-            PREG_SPLIT_DELIM_CAPTURE
-        );
-
-        // if the first item that is encountered is not a variable; it is a type
-        if (isset($parts[0])
-            && (strlen($parts[0]) > 0)
-            && ($parts[0][0] !== '$')
-        ) {
-            $this->type = array_shift($parts);
-            array_shift($parts);
-        }
-
-        // if the next item starts with a $ or ...$ it must be the variable name
-        if (isset($parts[0])
-            && (strlen($parts[0]) > 0)
-            && ($parts[0][0] == '$' || substr($parts[0], 0, 4) === '...$')
-        ) {
-            $this->variableName = array_shift($parts);
-            array_shift($parts);
-
-            if (substr($this->variableName, 0, 3) === '...') {
-                $this->isVariadic = true;
-                $this->variableName = substr($this->variableName, 3);
-            }
-        }
-
-        $this->setDescription(implode('', $parts));
-
-        $this->content = $content;
-        return $this;
-    }
-
-    /**
-     * Returns the variable's name.
-     *
-     * @return string
-     */
-    public function getVariableName()
-    {
-        return $this->variableName;
-    }
-
-    /**
-     * Sets the variable's name.
-     *
-     * @param string $name The new name for this variable.
-     *
-     * @return $this
-     */
-    public function setVariableName($name)
-    {
-        $this->variableName = $name;
-
-        $this->content = null;
-        return $this;
-    }
-
-    /**
-     * Returns whether this tag is variadic.
-     *
-     * @return boolean
-     */
-    public function isVariadic()
-    {
-        return $this->isVariadic;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @param tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class ParamTag extends ReturnTag
+{
+    /** @var string */
+    protected $variableName = '';
+
+    /** @var bool determines whether this is a variadic argument */
+    protected $isVariadic = false;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content
+                = "{$this->type} {$this->variableName} {$this->description}";
+        }
+        return $this->content;
+    }
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        Tag::setContent($content);
+        $parts = preg_split(
+            '/(\s+)/Su',
+            $this->description,
+            3,
+            PREG_SPLIT_DELIM_CAPTURE
+        );
+
+        // if the first item that is encountered is not a variable; it is a type
+        if (isset($parts[0])
+            && (strlen($parts[0]) > 0)
+            && ($parts[0][0] !== '$')
+        ) {
+            $this->type = array_shift($parts);
+            array_shift($parts);
+        }
+
+        // if the next item starts with a $ or ...$ it must be the variable name
+        if (isset($parts[0])
+            && (strlen($parts[0]) > 0)
+            && ($parts[0][0] == '$' || substr($parts[0], 0, 4) === '...$')
+        ) {
+            $this->variableName = array_shift($parts);
+            array_shift($parts);
+
+            if (substr($this->variableName, 0, 3) === '...') {
+                $this->isVariadic = true;
+                $this->variableName = substr($this->variableName, 3);
+            }
+        }
+
+        $this->setDescription(implode('', $parts));
+
+        $this->content = $content;
+        return $this;
+    }
+
+    /**
+     * Returns the variable's name.
+     *
+     * @return string
+     */
+    public function getVariableName()
+    {
+        return $this->variableName;
+    }
+
+    /**
+     * Sets the variable's name.
+     *
+     * @param string $name The new name for this variable.
+     *
+     * @return $this
+     */
+    public function setVariableName($name)
+    {
+        $this->variableName = $name;
+
+        $this->content = null;
+        return $this;
+    }
+
+    /**
+     * Returns whether this tag is variadic.
+     *
+     * @return boolean
+     */
+    public function isVariadic()
+    {
+        return $this->isVariadic;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyReadTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyReadTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyReadTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @property-read tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class PropertyReadTag extends PropertyTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @property-read tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class PropertyReadTag extends PropertyTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @property tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class PropertyTag extends ParamTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @property tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class PropertyTag extends ParamTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyWriteTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyWriteTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/PropertyWriteTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @property-write tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class PropertyWriteTag extends PropertyTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @property-write tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class PropertyWriteTag extends PropertyTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ReturnTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ReturnTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ReturnTag.php	(revision 57)
@@ -1,99 +1,99 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-use phpDocumentor\Reflection\DocBlock\Type\Collection;
-
-/**
- * Reflection class for a @return tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class ReturnTag extends Tag
-{
-    /** @var string The raw type component. */
-    protected $type = '';
-    
-    /** @var Collection The parsed type component. */
-    protected $types = null;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = "{$this->type} {$this->description}";
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        parent::setContent($content);
-
-        $parts = preg_split('/\s+/Su', $this->description, 2);
-
-        // any output is considered a type
-        $this->type = $parts[0];
-        $this->types = null;
-
-        $this->setDescription(isset($parts[1]) ? $parts[1] : '');
-
-        $this->content = $content;
-        return $this;
-    }
-
-    /**
-     * Returns the unique types of the variable.
-     *
-     * @return string[]
-     */
-    public function getTypes()
-    {
-        return $this->getTypesCollection()->getArrayCopy();
-    }
-
-    /**
-     * Returns the type section of the variable.
-     *
-     * @return string
-     */
-    public function getType()
-    {
-        return (string) $this->getTypesCollection();
-    }
-
-    /**
-     * Returns the type collection.
-     * 
-     * @return void
-     */
-    protected function getTypesCollection()
-    {
-        if (null === $this->types) {
-            $this->types = new Collection(
-                array($this->type),
-                $this->docblock ? $this->docblock->getContext() : null
-            );
-        }
-        return $this->types;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+use phpDocumentor\Reflection\DocBlock\Type\Collection;
+
+/**
+ * Reflection class for a @return tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class ReturnTag extends Tag
+{
+    /** @var string The raw type component. */
+    protected $type = '';
+    
+    /** @var Collection The parsed type component. */
+    protected $types = null;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = "{$this->type} {$this->description}";
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        parent::setContent($content);
+
+        $parts = preg_split('/\s+/Su', $this->description, 2);
+
+        // any output is considered a type
+        $this->type = $parts[0];
+        $this->types = null;
+
+        $this->setDescription(isset($parts[1]) ? $parts[1] : '');
+
+        $this->content = $content;
+        return $this;
+    }
+
+    /**
+     * Returns the unique types of the variable.
+     *
+     * @return string[]
+     */
+    public function getTypes()
+    {
+        return $this->getTypesCollection()->getArrayCopy();
+    }
+
+    /**
+     * Returns the type section of the variable.
+     *
+     * @return string
+     */
+    public function getType()
+    {
+        return (string) $this->getTypesCollection();
+    }
+
+    /**
+     * Returns the type collection.
+     * 
+     * @return void
+     */
+    protected function getTypesCollection()
+    {
+        if (null === $this->types) {
+            $this->types = new Collection(
+                array($this->type),
+                $this->docblock ? $this->docblock->getContext() : null
+            );
+        }
+        return $this->types;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SeeTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SeeTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SeeTag.php	(revision 57)
@@ -1,81 +1,81 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @see tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class SeeTag extends Tag
-{
-    /** @var string */
-    protected $refers = null;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = "{$this->refers} {$this->description}";
-        }
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        parent::setContent($content);
-        $parts = preg_split('/\s+/Su', $this->description, 2);
-
-        // any output is considered a type
-        $this->refers = $parts[0];
-
-        $this->setDescription(isset($parts[1]) ? $parts[1] : '');
-
-        $this->content = $content;
-        return $this;
-    }
-
-    /**
-     * Gets the structural element this tag refers to.
-     *
-     * @return string
-     */
-    public function getReference()
-    {
-        return $this->refers;
-    }
-
-    /**
-     * Sets the structural element this tag refers to.
-     * 
-     * @param string $refers The new type this tag refers to.
-     * 
-     * @return $this
-     */
-    public function setReference($refers)
-    {
-        $this->refers = $refers;
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @see tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class SeeTag extends Tag
+{
+    /** @var string */
+    protected $refers = null;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = "{$this->refers} {$this->description}";
+        }
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        parent::setContent($content);
+        $parts = preg_split('/\s+/Su', $this->description, 2);
+
+        // any output is considered a type
+        $this->refers = $parts[0];
+
+        $this->setDescription(isset($parts[1]) ? $parts[1] : '');
+
+        $this->content = $content;
+        return $this;
+    }
+
+    /**
+     * Gets the structural element this tag refers to.
+     *
+     * @return string
+     */
+    public function getReference()
+    {
+        return $this->refers;
+    }
+
+    /**
+     * Sets the structural element this tag refers to.
+     * 
+     * @param string $refers The new type this tag refers to.
+     * 
+     * @return $this
+     */
+    public function setReference($refers)
+    {
+        $this->refers = $refers;
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SinceTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SinceTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SinceTag.php	(revision 57)
@@ -1,26 +1,26 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag\VersionTag;
-
-/**
- * Reflection class for a @since tag in a Docblock.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class SinceTag extends VersionTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag\VersionTag;
+
+/**
+ * Reflection class for a @since tag in a Docblock.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class SinceTag extends VersionTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SourceTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SourceTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/SourceTag.php	(revision 57)
@@ -1,137 +1,137 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @source tag in a Docblock.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class SourceTag extends Tag
-{
-    /**
-     * @var int The starting line, relative to the structural element's
-     *     location.
-     */
-    protected $startingLine = 1;
-
-    /** 
-     * @var int|null The number of lines, relative to the starting line. NULL
-     *     means "to the end".
-     */
-    protected $lineCount = null;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content
-                = "{$this->startingLine} {$this->lineCount} {$this->description}";
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        parent::setContent($content);
-        if (preg_match(
-            '/^
-                # Starting line
-                ([1-9]\d*)
-                \s*
-                # Number of lines
-                (?:
-                    ((?1))
-                    \s+
-                )?
-                # Description
-                (.*)
-            $/sux',
-            $this->description,
-            $matches
-        )) {
-            $this->startingLine = (int)$matches[1];
-            if (isset($matches[2]) && '' !== $matches[2]) {
-                $this->lineCount = (int)$matches[2];
-            }
-            $this->setDescription($matches[3]);
-            $this->content = $content;
-        }
-
-        return $this;
-    }
-
-    /**
-     * Gets the starting line.
-     *
-     * @return int The starting line, relative to the structural element's
-     *     location.
-     */
-    public function getStartingLine()
-    {
-        return $this->startingLine;
-    }
-
-    /**
-     * Sets the starting line.
-     * 
-     * @param int $startingLine The new starting line, relative to the
-     *     structural element's location.
-     * 
-     * @return $this
-     */
-    public function setStartingLine($startingLine)
-    {
-        $this->startingLine = $startingLine;
-
-        $this->content = null;
-        return $this;
-    }
-
-    /**
-     * Returns the number of lines.
-     *
-     * @return int|null The number of lines, relative to the starting line. NULL
-     *     means "to the end".
-     */
-    public function getLineCount()
-    {
-        return $this->lineCount;
-    }
-
-    /**
-     * Sets the number of lines.
-     * 
-     * @param int|null $lineCount The new number of lines, relative to the
-     *     starting line. NULL means "to the end".
-     * 
-     * @return $this
-     */
-    public function setLineCount($lineCount)
-    {
-        $this->lineCount = $lineCount;
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @source tag in a Docblock.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class SourceTag extends Tag
+{
+    /**
+     * @var int The starting line, relative to the structural element's
+     *     location.
+     */
+    protected $startingLine = 1;
+
+    /** 
+     * @var int|null The number of lines, relative to the starting line. NULL
+     *     means "to the end".
+     */
+    protected $lineCount = null;
+
+    /**
+     * {@inheritdoc}
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content
+                = "{$this->startingLine} {$this->lineCount} {$this->description}";
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        parent::setContent($content);
+        if (preg_match(
+            '/^
+                # Starting line
+                ([1-9]\d*)
+                \s*
+                # Number of lines
+                (?:
+                    ((?1))
+                    \s+
+                )?
+                # Description
+                (.*)
+            $/sux',
+            $this->description,
+            $matches
+        )) {
+            $this->startingLine = (int)$matches[1];
+            if (isset($matches[2]) && '' !== $matches[2]) {
+                $this->lineCount = (int)$matches[2];
+            }
+            $this->setDescription($matches[3]);
+            $this->content = $content;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Gets the starting line.
+     *
+     * @return int The starting line, relative to the structural element's
+     *     location.
+     */
+    public function getStartingLine()
+    {
+        return $this->startingLine;
+    }
+
+    /**
+     * Sets the starting line.
+     * 
+     * @param int $startingLine The new starting line, relative to the
+     *     structural element's location.
+     * 
+     * @return $this
+     */
+    public function setStartingLine($startingLine)
+    {
+        $this->startingLine = $startingLine;
+
+        $this->content = null;
+        return $this;
+    }
+
+    /**
+     * Returns the number of lines.
+     *
+     * @return int|null The number of lines, relative to the starting line. NULL
+     *     means "to the end".
+     */
+    public function getLineCount()
+    {
+        return $this->lineCount;
+    }
+
+    /**
+     * Sets the number of lines.
+     * 
+     * @param int|null $lineCount The new number of lines, relative to the
+     *     starting line. NULL means "to the end".
+     * 
+     * @return $this
+     */
+    public function setLineCount($lineCount)
+    {
+        $this->lineCount = $lineCount;
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ThrowsTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ThrowsTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/ThrowsTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @throws tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class ThrowsTag extends ReturnTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @throws tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class ThrowsTag extends ReturnTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/UsesTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/UsesTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/UsesTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @uses tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class UsesTag extends SeeTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @uses tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class UsesTag extends SeeTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VarTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VarTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VarTag.php	(revision 57)
@@ -1,24 +1,24 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @var tag in a Docblock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class VarTag extends ParamTag
-{
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @var tag in a Docblock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class VarTag extends ParamTag
+{
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VersionTag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VersionTag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag/VersionTag.php	(revision 57)
@@ -1,108 +1,108 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Reflection class for a @version tag in a Docblock.
- *
- * @author  Vasil Rangelov <boen.robot@gmail.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class VersionTag extends Tag
-{
-    /**
-     * PCRE regular expression matching a version vector.
-     * Assumes the "x" modifier.
-     */
-    const REGEX_VECTOR = '(?:
-        # Normal release vectors.
-        \d\S*
-        |
-        # VCS version vectors. Per PHPCS, they are expected to
-        # follow the form of the VCS name, followed by ":", followed
-        # by the version vector itself.
-        # By convention, popular VCSes like CVS, SVN and GIT use "$"
-        # around the actual version vector.
-        [^\s\:]+\:\s*\$[^\$]+\$
-    )';
-
-    /** @var string The version vector. */
-    protected $version = '';
-    
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = "{$this->version} {$this->description}";
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function setContent($content)
-    {
-        parent::setContent($content);
-
-        if (preg_match(
-            '/^
-                # The version vector
-                (' . self::REGEX_VECTOR . ')
-                \s*
-                # The description
-                (.+)?
-            $/sux',
-            $this->description,
-            $matches
-        )) {
-            $this->version = $matches[1];
-            $this->setDescription(isset($matches[2]) ? $matches[2] : '');
-            $this->content = $content;
-        }
-
-        return $this;
-    }
-
-    /**
-     * Gets the version section of the tag.
-     *
-     * @return string The version section of the tag.
-     */
-    public function getVersion()
-    {
-        return $this->version;
-    }
-    
-    /**
-     * Sets the version section of the tag.
-     * 
-     * @param string $version The new version section of the tag.
-     *     An invalid value will set an empty string.
-     * 
-     * @return $this
-     */
-    public function setVersion($version)
-    {
-        $this->version
-            = preg_match('/^' . self::REGEX_VECTOR . '$/ux', $version)
-            ? $version
-            : '';
-
-        $this->content = null;
-        return $this;
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Reflection class for a @version tag in a Docblock.
+ *
+ * @author  Vasil Rangelov <boen.robot@gmail.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class VersionTag extends Tag
+{
+    /**
+     * PCRE regular expression matching a version vector.
+     * Assumes the "x" modifier.
+     */
+    const REGEX_VECTOR = '(?:
+        # Normal release vectors.
+        \d\S*
+        |
+        # VCS version vectors. Per PHPCS, they are expected to
+        # follow the form of the VCS name, followed by ":", followed
+        # by the version vector itself.
+        # By convention, popular VCSes like CVS, SVN and GIT use "$"
+        # around the actual version vector.
+        [^\s\:]+\:\s*\$[^\$]+\$
+    )';
+
+    /** @var string The version vector. */
+    protected $version = '';
+    
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = "{$this->version} {$this->description}";
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function setContent($content)
+    {
+        parent::setContent($content);
+
+        if (preg_match(
+            '/^
+                # The version vector
+                (' . self::REGEX_VECTOR . ')
+                \s*
+                # The description
+                (.+)?
+            $/sux',
+            $this->description,
+            $matches
+        )) {
+            $this->version = $matches[1];
+            $this->setDescription(isset($matches[2]) ? $matches[2] : '');
+            $this->content = $content;
+        }
+
+        return $this;
+    }
+
+    /**
+     * Gets the version section of the tag.
+     *
+     * @return string The version section of the tag.
+     */
+    public function getVersion()
+    {
+        return $this->version;
+    }
+    
+    /**
+     * Sets the version section of the tag.
+     * 
+     * @param string $version The new version section of the tag.
+     *     An invalid value will set an empty string.
+     * 
+     * @return $this
+     */
+    public function setVersion($version)
+    {
+        $this->version
+            = preg_match('/^' . self::REGEX_VECTOR . '$/ux', $version)
+            ? $version
+            : '';
+
+        $this->content = null;
+        return $this;
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Tag.php	(revision 57)
@@ -1,377 +1,377 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-use phpDocumentor\Reflection\DocBlock;
-
-/**
- * Parses a tag definition for a DocBlock.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class Tag implements \Reflector
-{
-    /**
-     * PCRE regular expression matching a tag name.
-     */
-    const REGEX_TAGNAME = '[\w\-\_\\\\]+';
-
-    /** @var string Name of the tag */
-    protected $tag = '';
-
-    /**
-     * @var string|null Content of the tag.
-     *     When set to NULL, it means it needs to be regenerated.
-     */
-    protected $content = '';
-
-    /** @var string Description of the content of this tag */
-    protected $description = '';
-
-    /**
-     * @var array|null The description, as an array of strings and Tag objects.
-     *     When set to NULL, it means it needs to be regenerated.
-     */
-    protected $parsedDescription = null;
-
-    /** @var Location Location of the tag. */
-    protected $location = null;
-
-    /** @var DocBlock The DocBlock which this tag belongs to. */
-    protected $docblock = null;
-    
-    /**
-     * @var array An array with a tag as a key, and an FQCN to a class that
-     *     handles it as an array value. The class is expected to inherit this
-     *     class.
-     */
-    private static $tagHandlerMappings = array(
-        'author'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\AuthorTag',
-        'covers'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\CoversTag',
-        'deprecated'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\DeprecatedTag',
-        'example'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\ExampleTag',
-        'link'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\LinkTag',
-        'method'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\MethodTag',
-        'param'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\ParamTag',
-        'property-read'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\PropertyReadTag',
-        'property'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\PropertyTag',
-        'property-write'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\PropertyWriteTag',
-        'return'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\ReturnTag',
-        'see'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\SeeTag',
-        'since'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\SinceTag',
-        'source'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\SourceTag',
-        'throw'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag',
-        'throws'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag',
-        'uses'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\UsesTag',
-        'var'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\VarTag',
-        'version'
-            => '\phpDocumentor\Reflection\DocBlock\Tag\VersionTag'
-    );
-
-    /**
-     * Factory method responsible for instantiating the correct sub type.
-     *
-     * @param string   $tag_line The text for this tag, including description.
-     * @param DocBlock $docblock The DocBlock which this tag belongs to.
-     * @param Location $location Location of the tag.
-     *
-     * @throws \InvalidArgumentException if an invalid tag line was presented.
-     *
-     * @return static A new tag object.
-     */
-    final public static function createInstance(
-        $tag_line,
-        DocBlock $docblock = null,
-        Location $location = null
-    ) {
-        if (!preg_match(
-            '/^@(' . self::REGEX_TAGNAME . ')(?:\s*([^\s].*)|$)?/us',
-            $tag_line,
-            $matches
-        )) {
-            throw new \InvalidArgumentException(
-                'Invalid tag_line detected: ' . $tag_line
-            );
-        }
-
-        $handler = __CLASS__;
-        if (isset(self::$tagHandlerMappings[$matches[1]])) {
-            $handler = self::$tagHandlerMappings[$matches[1]];
-        } elseif (isset($docblock)) {
-            $tagName = (string)new Type\Collection(
-                array($matches[1]),
-                $docblock->getContext()
-            );
-
-            if (isset(self::$tagHandlerMappings[$tagName])) {
-                $handler = self::$tagHandlerMappings[$tagName];
-            }
-        }
-
-        return new $handler(
-            $matches[1],
-            isset($matches[2]) ? $matches[2] : '',
-            $docblock,
-            $location
-        );
-    }
-
-    /**
-     * Registers a handler for tags.
-     * 
-     * Registers a handler for tags. The class specified is autoloaded if it's
-     * not available. It must inherit from this class.
-     * 
-     * @param string      $tag     Name of tag to regiser a handler for. When
-     *     registering a namespaced tag, the full name, along with a prefixing
-     *     slash MUST be provided.
-     * @param string|null $handler FQCN of handler. Specifing NULL removes the
-     *     handler for the specified tag, if any.
-     * 
-     * @return bool TRUE on success, FALSE on failure.
-     */
-    final public static function registerTagHandler($tag, $handler)
-    {
-        $tag = trim((string)$tag);
-
-        if (null === $handler) {
-            unset(self::$tagHandlerMappings[$tag]);
-            return true;
-        }
-
-        if ('' !== $tag
-            && class_exists($handler, true)
-            && is_subclass_of($handler, __CLASS__)
-            && !strpos($tag, '\\') //Accept no slash, and 1st slash at offset 0.
-        ) {
-            self::$tagHandlerMappings[$tag] = $handler;
-            return true;
-        }
-
-        return false;
-    }
-
-    /**
-     * Parses a tag and populates the member variables.
-     *
-     * @param string   $name     Name of the tag.
-     * @param string   $content  The contents of the given tag.
-     * @param DocBlock $docblock The DocBlock which this tag belongs to.
-     * @param Location $location Location of the tag.
-     */
-    public function __construct(
-        $name,
-        $content,
-        DocBlock $docblock = null,
-        Location $location = null
-    ) {
-        $this
-            ->setName($name)
-            ->setContent($content)
-            ->setDocBlock($docblock)
-            ->setLocation($location);
-    }
-
-    /**
-     * Gets the name of this tag.
-     *
-     * @return string The name of this tag.
-     */
-    public function getName()
-    {
-        return $this->tag;
-    }
-
-    /**
-     * Sets the name of this tag.
-     * 
-     * @param string $name The new name of this tag.
-     * 
-     * @return $this
-     * @throws \InvalidArgumentException When an invalid tag name is provided.
-     */
-    public function setName($name)
-    {
-        if (!preg_match('/^' . self::REGEX_TAGNAME . '$/u', $name)) {
-            throw new \InvalidArgumentException(
-                'Invalid tag name supplied: ' . $name
-            );
-        }
-
-        $this->tag = $name;
-
-        return $this;
-    }
-
-    /**
-     * Gets the content of this tag.
-     *
-     * @return string
-     */
-    public function getContent()
-    {
-        if (null === $this->content) {
-            $this->content = $this->description;
-        }
-
-        return $this->content;
-    }
-
-    /**
-     * Sets the content of this tag.
-     * 
-     * @param string $content The new content of this tag.
-     * 
-     * @return $this
-     */
-    public function setContent($content)
-    {
-        $this->setDescription($content);
-        $this->content = $content;
-
-        return $this;
-    }
-
-    /**
-     * Gets the description component of this tag.
-     *
-     * @return string
-     */
-    public function getDescription()
-    {
-        return $this->description;
-    }
-
-    /**
-     * Sets the description component of this tag.
-     * 
-     * @param string $description The new description component of this tag.
-     * 
-     * @return $this
-     */
-    public function setDescription($description)
-    {
-        $this->content = null;
-        $this->parsedDescription = null;
-        $this->description = trim($description);
-
-        return $this;
-    }
-
-    /**
-     * Gets the parsed text of this description.
-     * 
-     * @return array An array of strings and tag objects, in the order they
-     *     occur within the description.
-     */
-    public function getParsedDescription()
-    {
-        if (null === $this->parsedDescription) {
-            $description = new Description($this->description, $this->docblock);
-            $this->parsedDescription = $description->getParsedContents();
-        }
-        return $this->parsedDescription;
-    }
-
-    /**
-     * Gets the docblock this tag belongs to.
-     * 
-     * @return DocBlock The docblock this tag belongs to.
-     */
-    public function getDocBlock()
-    {
-        return $this->docblock;
-    }
-
-    /**
-     * Sets the docblock this tag belongs to.
-     * 
-     * @param DocBlock $docblock The new docblock this tag belongs to. Setting
-     *     NULL removes any association.
-     * 
-     * @return $this
-     */
-    public function setDocBlock(DocBlock $docblock = null)
-    {
-        $this->docblock = $docblock;
-
-        return $this;
-    }
-
-    /**
-     * Gets the location of the tag.
-     *
-     * @return Location The tag's location.
-     */
-    public function getLocation()
-    {
-        return $this->location;
-    }
-    
-    /**
-     * Sets the location of the tag.
-     * 
-     * @param Location $location The new location of the tag.
-     * 
-     * @return $this
-     */
-    public function setLocation(Location $location = null)
-    {
-        $this->location = $location;
-
-        return $this;
-    }
-
-    /**
-     * Builds a string representation of this object.
-     *
-     * @todo determine the exact format as used by PHP Reflection and implement it.
-     *
-     * @return void
-     * @codeCoverageIgnore Not yet implemented
-     */
-    public static function export()
-    {
-        throw new \Exception('Not yet implemented');
-    }
-
-    /**
-     * Returns the tag as a serialized string
-     *
-     * @return string
-     */
-    public function __toString()
-    {
-        return "@{$this->getName()} {$this->getContent()}";
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+use phpDocumentor\Reflection\DocBlock;
+
+/**
+ * Parses a tag definition for a DocBlock.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class Tag implements \Reflector
+{
+    /**
+     * PCRE regular expression matching a tag name.
+     */
+    const REGEX_TAGNAME = '[\w\-\_\\\\]+';
+
+    /** @var string Name of the tag */
+    protected $tag = '';
+
+    /**
+     * @var string|null Content of the tag.
+     *     When set to NULL, it means it needs to be regenerated.
+     */
+    protected $content = '';
+
+    /** @var string Description of the content of this tag */
+    protected $description = '';
+
+    /**
+     * @var array|null The description, as an array of strings and Tag objects.
+     *     When set to NULL, it means it needs to be regenerated.
+     */
+    protected $parsedDescription = null;
+
+    /** @var Location Location of the tag. */
+    protected $location = null;
+
+    /** @var DocBlock The DocBlock which this tag belongs to. */
+    protected $docblock = null;
+    
+    /**
+     * @var array An array with a tag as a key, and an FQCN to a class that
+     *     handles it as an array value. The class is expected to inherit this
+     *     class.
+     */
+    private static $tagHandlerMappings = array(
+        'author'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\AuthorTag',
+        'covers'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\CoversTag',
+        'deprecated'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\DeprecatedTag',
+        'example'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\ExampleTag',
+        'link'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\LinkTag',
+        'method'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\MethodTag',
+        'param'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\ParamTag',
+        'property-read'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\PropertyReadTag',
+        'property'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\PropertyTag',
+        'property-write'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\PropertyWriteTag',
+        'return'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\ReturnTag',
+        'see'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\SeeTag',
+        'since'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\SinceTag',
+        'source'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\SourceTag',
+        'throw'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag',
+        'throws'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag',
+        'uses'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\UsesTag',
+        'var'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\VarTag',
+        'version'
+            => '\phpDocumentor\Reflection\DocBlock\Tag\VersionTag'
+    );
+
+    /**
+     * Factory method responsible for instantiating the correct sub type.
+     *
+     * @param string   $tag_line The text for this tag, including description.
+     * @param DocBlock $docblock The DocBlock which this tag belongs to.
+     * @param Location $location Location of the tag.
+     *
+     * @throws \InvalidArgumentException if an invalid tag line was presented.
+     *
+     * @return static A new tag object.
+     */
+    final public static function createInstance(
+        $tag_line,
+        DocBlock $docblock = null,
+        Location $location = null
+    ) {
+        if (!preg_match(
+            '/^@(' . self::REGEX_TAGNAME . ')(?:\s*([^\s].*)|$)?/us',
+            $tag_line,
+            $matches
+        )) {
+            throw new \InvalidArgumentException(
+                'Invalid tag_line detected: ' . $tag_line
+            );
+        }
+
+        $handler = __CLASS__;
+        if (isset(self::$tagHandlerMappings[$matches[1]])) {
+            $handler = self::$tagHandlerMappings[$matches[1]];
+        } elseif (isset($docblock)) {
+            $tagName = (string)new Type\Collection(
+                array($matches[1]),
+                $docblock->getContext()
+            );
+
+            if (isset(self::$tagHandlerMappings[$tagName])) {
+                $handler = self::$tagHandlerMappings[$tagName];
+            }
+        }
+
+        return new $handler(
+            $matches[1],
+            isset($matches[2]) ? $matches[2] : '',
+            $docblock,
+            $location
+        );
+    }
+
+    /**
+     * Registers a handler for tags.
+     * 
+     * Registers a handler for tags. The class specified is autoloaded if it's
+     * not available. It must inherit from this class.
+     * 
+     * @param string      $tag     Name of tag to regiser a handler for. When
+     *     registering a namespaced tag, the full name, along with a prefixing
+     *     slash MUST be provided.
+     * @param string|null $handler FQCN of handler. Specifing NULL removes the
+     *     handler for the specified tag, if any.
+     * 
+     * @return bool TRUE on success, FALSE on failure.
+     */
+    final public static function registerTagHandler($tag, $handler)
+    {
+        $tag = trim((string)$tag);
+
+        if (null === $handler) {
+            unset(self::$tagHandlerMappings[$tag]);
+            return true;
+        }
+
+        if ('' !== $tag
+            && class_exists($handler, true)
+            && is_subclass_of($handler, __CLASS__)
+            && !strpos($tag, '\\') //Accept no slash, and 1st slash at offset 0.
+        ) {
+            self::$tagHandlerMappings[$tag] = $handler;
+            return true;
+        }
+
+        return false;
+    }
+
+    /**
+     * Parses a tag and populates the member variables.
+     *
+     * @param string   $name     Name of the tag.
+     * @param string   $content  The contents of the given tag.
+     * @param DocBlock $docblock The DocBlock which this tag belongs to.
+     * @param Location $location Location of the tag.
+     */
+    public function __construct(
+        $name,
+        $content,
+        DocBlock $docblock = null,
+        Location $location = null
+    ) {
+        $this
+            ->setName($name)
+            ->setContent($content)
+            ->setDocBlock($docblock)
+            ->setLocation($location);
+    }
+
+    /**
+     * Gets the name of this tag.
+     *
+     * @return string The name of this tag.
+     */
+    public function getName()
+    {
+        return $this->tag;
+    }
+
+    /**
+     * Sets the name of this tag.
+     * 
+     * @param string $name The new name of this tag.
+     * 
+     * @return $this
+     * @throws \InvalidArgumentException When an invalid tag name is provided.
+     */
+    public function setName($name)
+    {
+        if (!preg_match('/^' . self::REGEX_TAGNAME . '$/u', $name)) {
+            throw new \InvalidArgumentException(
+                'Invalid tag name supplied: ' . $name
+            );
+        }
+
+        $this->tag = $name;
+
+        return $this;
+    }
+
+    /**
+     * Gets the content of this tag.
+     *
+     * @return string
+     */
+    public function getContent()
+    {
+        if (null === $this->content) {
+            $this->content = $this->description;
+        }
+
+        return $this->content;
+    }
+
+    /**
+     * Sets the content of this tag.
+     * 
+     * @param string $content The new content of this tag.
+     * 
+     * @return $this
+     */
+    public function setContent($content)
+    {
+        $this->setDescription($content);
+        $this->content = $content;
+
+        return $this;
+    }
+
+    /**
+     * Gets the description component of this tag.
+     *
+     * @return string
+     */
+    public function getDescription()
+    {
+        return $this->description;
+    }
+
+    /**
+     * Sets the description component of this tag.
+     * 
+     * @param string $description The new description component of this tag.
+     * 
+     * @return $this
+     */
+    public function setDescription($description)
+    {
+        $this->content = null;
+        $this->parsedDescription = null;
+        $this->description = trim($description);
+
+        return $this;
+    }
+
+    /**
+     * Gets the parsed text of this description.
+     * 
+     * @return array An array of strings and tag objects, in the order they
+     *     occur within the description.
+     */
+    public function getParsedDescription()
+    {
+        if (null === $this->parsedDescription) {
+            $description = new Description($this->description, $this->docblock);
+            $this->parsedDescription = $description->getParsedContents();
+        }
+        return $this->parsedDescription;
+    }
+
+    /**
+     * Gets the docblock this tag belongs to.
+     * 
+     * @return DocBlock The docblock this tag belongs to.
+     */
+    public function getDocBlock()
+    {
+        return $this->docblock;
+    }
+
+    /**
+     * Sets the docblock this tag belongs to.
+     * 
+     * @param DocBlock $docblock The new docblock this tag belongs to. Setting
+     *     NULL removes any association.
+     * 
+     * @return $this
+     */
+    public function setDocBlock(DocBlock $docblock = null)
+    {
+        $this->docblock = $docblock;
+
+        return $this;
+    }
+
+    /**
+     * Gets the location of the tag.
+     *
+     * @return Location The tag's location.
+     */
+    public function getLocation()
+    {
+        return $this->location;
+    }
+    
+    /**
+     * Sets the location of the tag.
+     * 
+     * @param Location $location The new location of the tag.
+     * 
+     * @return $this
+     */
+    public function setLocation(Location $location = null)
+    {
+        $this->location = $location;
+
+        return $this;
+    }
+
+    /**
+     * Builds a string representation of this object.
+     *
+     * @todo determine the exact format as used by PHP Reflection and implement it.
+     *
+     * @return void
+     * @codeCoverageIgnore Not yet implemented
+     */
+    public static function export()
+    {
+        throw new \Exception('Not yet implemented');
+    }
+
+    /**
+     * Returns the tag as a serialized string
+     *
+     * @return string
+     */
+    public function __toString()
+    {
+        return "@{$this->getName()} {$this->getContent()}";
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Type/Collection.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Type/Collection.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock/Type/Collection.php	(revision 57)
@@ -1,221 +1,228 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Type;
-
-use phpDocumentor\Reflection\DocBlock\Context;
-
-/**
- * Collection
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class Collection extends \ArrayObject
-{
-    /** @var string Definition of the OR operator for types */
-    const OPERATOR_OR = '|';
-
-    /** @var string Definition of the ARRAY operator for types */
-    const OPERATOR_ARRAY = '[]';
-
-    /** @var string Definition of the NAMESPACE operator in PHP */
-    const OPERATOR_NAMESPACE = '\\';
-
-    /** @var string[] List of recognized keywords */
-    protected static $keywords = array(
-        'string', 'int', 'integer', 'bool', 'boolean', 'float', 'double',
-        'object', 'mixed', 'array', 'resource', 'void', 'null', 'scalar',
-        'callback', 'callable', 'false', 'true', 'self', '$this', 'static'
-    );
-
-    /**
-     * Current invoking location.
-     *
-     * This is used to prepend to type with a relative location.
-     * May also be 'default' or 'global', in which case they are ignored.
-     *
-     * @var Context
-     */
-    protected $context = null;
-
-    /**
-     * Registers the namespace and aliases; uses that to add and expand the
-     * given types.
-     *
-     * @param string[] $types    Array containing a list of types to add to this
-     *     container.
-     * @param Context  $location The current invoking location.
-     */
-    public function __construct(
-        array $types = array(),
-        Context $context = null
-    ) {
-        $this->context = null === $context ? new Context() : $context;
-
-        foreach ($types as $type) {
-            $this->add($type);
-        }
-    }
-
-    /**
-     * Returns the current invoking location.
-     *
-     * @return Context
-     */
-    public function getContext()
-    {
-        return $this->context;
-    }
-
-    /**
-     * Adds a new type to the collection and expands it if it contains a
-     * relative namespace.
-     *
-     * If a class in the type contains a relative namespace than this collection
-     * will try to expand that into a FQCN.
-     *
-     * @param string $type A 'Type' as defined in the phpDocumentor
-     *     documentation.
-     *
-     * @throws \InvalidArgumentException if a non-string argument is passed.
-     *
-     * @see http://phpdoc.org/docs/latest/for-users/types.html for the
-     *     definition of a type.
-     *
-     * @return void
-     */
-    public function add($type)
-    {
-        if (!is_string($type)) {
-            throw new \InvalidArgumentException(
-                'A type should be represented by a string, received: '
-                .var_export($type, true)
-            );
-        }
-
-        // separate the type by the OR operator
-        $type_parts = explode(self::OPERATOR_OR, $type);
-        foreach ($type_parts as $part) {
-            $expanded_type = $this->expand($part);
-            if ($expanded_type) {
-                $this[] = $expanded_type;
-            }
-        }
-    }
-    
-    /**
-     * Returns a string representation of the collection.
-     * 
-     * @return string The resolved types across the collection, separated with
-     *     {@link self::OPERATOR_OR}.
-     */
-    public function __toString()
-    {
-        return implode(self::OPERATOR_OR, $this->getArrayCopy());
-    }
-
-    /**
-     * Analyzes the given type and returns the FQCN variant.
-     *
-     * When a type is provided this method checks whether it is not a keyword or
-     * Fully Qualified Class Name. If so it will use the given namespace and
-     * aliases to expand the type to a FQCN representation.
-     *
-     * This method only works as expected if the namespace and aliases are set;
-     * no dynamic reflection is being performed here.
-     *
-     * @param string $type The relative or absolute type.
-     *
-     * @uses getNamespace to determine with what to prefix the type name.
-     * @uses getNamespaceAliases to check whether the first part of the relative
-     *     type name should not be replaced with another namespace.
-     *
-     * @return string
-     */
-    protected function expand($type)
-    {
-        $type = trim($type);
-        if (!$type) {
-            return '';
-        }
-
-        if ($this->isTypeAnArray($type)) {
-            return $this->expand(substr($type, 0, -2)) . self::OPERATOR_ARRAY;
-        }
-
-        if ($this->isRelativeType($type) && !$this->isTypeAKeyword($type)) {
-            $type_parts = explode(self::OPERATOR_NAMESPACE, $type, 2);
-
-            $namespace_aliases = $this->context->getNamespaceAliases();
-            // if the first segment is not an alias; prepend namespace name and
-            // return
-            if (!isset($namespace_aliases[$type_parts[0]])) {
-                $namespace = $this->context->getNamespace();
-                if ('' !== $namespace) {
-                    $namespace .= self::OPERATOR_NAMESPACE;
-                }
-                return self::OPERATOR_NAMESPACE . $namespace . $type;
-            }
-
-            $type_parts[0] = $namespace_aliases[$type_parts[0]];
-            $type = implode(self::OPERATOR_NAMESPACE, $type_parts);
-        }
-
-        return $type;
-    }
-
-    /**
-     * Detects whether the given type represents an array.
-     *
-     * @param string $type A relative or absolute type as defined in the
-     *     phpDocumentor documentation.
-     *
-     * @return bool
-     */
-    protected function isTypeAnArray($type)
-    {
-        return substr($type, -2) === self::OPERATOR_ARRAY;
-    }
-
-    /**
-     * Detects whether the given type represents a PHPDoc keyword.
-     *
-     * @param string $type A relative or absolute type as defined in the
-     *     phpDocumentor documentation.
-     *
-     * @return bool
-     */
-    protected function isTypeAKeyword($type)
-    {
-        return in_array(strtolower($type), static::$keywords, true);
-    }
-
-    /**
-     * Detects whether the given type represents a relative or absolute path.
-     *
-     * This method will detect keywords as being absolute; even though they are
-     * not preceeded by a namespace separator.
-     *
-     * @param string $type A relative or absolute type as defined in the
-     *     phpDocumentor documentation.
-     *
-     * @return bool
-     */
-    protected function isRelativeType($type)
-    {
-        return ($type[0] !== self::OPERATOR_NAMESPACE)
-            || $this->isTypeAKeyword($type);
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Type;
+
+use phpDocumentor\Reflection\DocBlock\Context;
+
+/**
+ * Collection
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class Collection extends \ArrayObject
+{
+    /** @var string Definition of the OR operator for types */
+    const OPERATOR_OR = '|';
+
+    /** @var string Definition of the ARRAY operator for types */
+    const OPERATOR_ARRAY = '[]';
+
+    /** @var string Definition of the NAMESPACE operator in PHP */
+    const OPERATOR_NAMESPACE = '\\';
+
+    /** @var string[] List of recognized keywords */
+    protected static $keywords = array(
+        'string', 'int', 'integer', 'bool', 'boolean', 'float', 'double',
+        'object', 'mixed', 'array', 'resource', 'void', 'null', 'scalar',
+        'callback', 'callable', 'false', 'true', 'self', '$this', 'static'
+    );
+
+    /**
+     * Current invoking location.
+     *
+     * This is used to prepend to type with a relative location.
+     * May also be 'default' or 'global', in which case they are ignored.
+     *
+     * @var Context
+     */
+    protected $context = null;
+
+    /**
+     * Registers the namespace and aliases; uses that to add and expand the
+     * given types.
+     *
+     * @param string[] $types    Array containing a list of types to add to this
+     *     container.
+     * @param Context  $location The current invoking location.
+     */
+    public function __construct(
+        array $types = array(),
+        Context $context = null
+    ) {
+        $this->context = null === $context ? new Context() : $context;
+
+        foreach ($types as $type) {
+            $this->add($type);
+        }
+    }
+
+    /**
+     * Returns the current invoking location.
+     *
+     * @return Context
+     */
+    public function getContext()
+    {
+        return $this->context;
+    }
+
+    /**
+     * Adds a new type to the collection and expands it if it contains a
+     * relative namespace.
+     *
+     * If a class in the type contains a relative namespace than this collection
+     * will try to expand that into a FQCN.
+     *
+     * @param string $type A 'Type' as defined in the phpDocumentor
+     *     documentation.
+     *
+     * @throws \InvalidArgumentException if a non-string argument is passed.
+     *
+     * @see http://phpdoc.org/docs/latest/for-users/types.html for the
+     *     definition of a type.
+     *
+     * @return void
+     */
+    public function add($type)
+    {
+        if (!is_string($type)) {
+            throw new \InvalidArgumentException(
+                'A type should be represented by a string, received: '
+                .var_export($type, true)
+            );
+        }
+
+        // separate the type by the OR operator
+        $type_parts = explode(self::OPERATOR_OR, $type);
+        foreach ($type_parts as $part) {
+            $expanded_type = $this->expand($part);
+            if ($expanded_type) {
+                $this[] = $expanded_type;
+            }
+        }
+    }
+    
+    /**
+     * Returns a string representation of the collection.
+     * 
+     * @return string The resolved types across the collection, separated with
+     *     {@link self::OPERATOR_OR}.
+     */
+    public function __toString()
+    {
+        return implode(self::OPERATOR_OR, $this->getArrayCopy());
+    }
+
+    /**
+     * Analyzes the given type and returns the FQCN variant.
+     *
+     * When a type is provided this method checks whether it is not a keyword or
+     * Fully Qualified Class Name. If so it will use the given namespace and
+     * aliases to expand the type to a FQCN representation.
+     *
+     * This method only works as expected if the namespace and aliases are set;
+     * no dynamic reflection is being performed here.
+     *
+     * @param string $type The relative or absolute type.
+     *
+     * @uses getNamespace to determine with what to prefix the type name.
+     * @uses getNamespaceAliases to check whether the first part of the relative
+     *     type name should not be replaced with another namespace.
+     *
+     * @return string
+     */
+    protected function expand($type)
+    {
+        $type = trim($type);
+        if (!$type) {
+            return '';
+        }
+
+        if ($this->isTypeAnArray($type)) {
+            return $this->expand(substr($type, 0, -2)) . self::OPERATOR_ARRAY;
+        }
+
+        if ($this->isRelativeType($type) && !$this->isTypeAKeyword($type)) {
+            $type_parts = explode(self::OPERATOR_NAMESPACE, $type, 2);
+
+            $namespace_aliases = $this->context->getNamespaceAliases();
+            // if the first segment is not an alias; prepend namespace name and
+            // return
+            if (!isset($namespace_aliases[$type_parts[0]]) &&
+                !isset($namespace_aliases[strstr($type_parts[0], '::', true)])) {
+                $namespace = $this->context->getNamespace();
+                if ('' !== $namespace) {
+                    $namespace .= self::OPERATOR_NAMESPACE;
+                }
+                return self::OPERATOR_NAMESPACE . $namespace . $type;
+            }
+
+            if (strpos($type_parts[0], '::')) {
+                $type_parts[] = strstr($type_parts[0], '::');
+                $type_parts[0] = $namespace_aliases[strstr($type_parts[0], '::', true)];
+                return implode('', $type_parts);
+            }
+
+            $type_parts[0] = $namespace_aliases[$type_parts[0]];
+            $type = implode(self::OPERATOR_NAMESPACE, $type_parts);
+        }
+
+        return $type;
+    }
+
+    /**
+     * Detects whether the given type represents an array.
+     *
+     * @param string $type A relative or absolute type as defined in the
+     *     phpDocumentor documentation.
+     *
+     * @return bool
+     */
+    protected function isTypeAnArray($type)
+    {
+        return substr($type, -2) === self::OPERATOR_ARRAY;
+    }
+
+    /**
+     * Detects whether the given type represents a PHPDoc keyword.
+     *
+     * @param string $type A relative or absolute type as defined in the
+     *     phpDocumentor documentation.
+     *
+     * @return bool
+     */
+    protected function isTypeAKeyword($type)
+    {
+        return in_array(strtolower($type), static::$keywords, true);
+    }
+
+    /**
+     * Detects whether the given type represents a relative or absolute path.
+     *
+     * This method will detect keywords as being absolute; even though they are
+     * not preceeded by a namespace separator.
+     *
+     * @param string $type A relative or absolute type as defined in the
+     *     phpDocumentor documentation.
+     *
+     * @return bool
+     */
+    protected function isRelativeType($type)
+    {
+        return ($type[0] !== self::OPERATOR_NAMESPACE)
+            || $this->isTypeAKeyword($type);
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/src/phpDocumentor/Reflection/DocBlock.php	(revision 57)
@@ -1,468 +1,468 @@
-<?php
-/**
- * phpDocumentor
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection;
-
-use phpDocumentor\Reflection\DocBlock\Tag;
-use phpDocumentor\Reflection\DocBlock\Context;
-use phpDocumentor\Reflection\DocBlock\Location;
-
-/**
- * Parses the DocBlock for any structure.
- *
- * @author  Mike van Riel <mike.vanriel@naenius.com>
- * @license http://www.opensource.org/licenses/mit-license.php MIT
- * @link    http://phpdoc.org
- */
-class DocBlock implements \Reflector
-{
-    /** @var string The opening line for this docblock. */
-    protected $short_description = '';
-
-    /**
-     * @var DocBlock\Description The actual
-     *     description for this docblock.
-     */
-    protected $long_description = null;
-
-    /**
-     * @var Tag[] An array containing all
-     *     the tags in this docblock; except inline.
-     */
-    protected $tags = array();
-
-    /** @var Context Information about the context of this DocBlock. */
-    protected $context = null;
-
-    /** @var Location Information about the location of this DocBlock. */
-    protected $location = null;
-
-    /** @var bool Is this DocBlock (the start of) a template? */
-    protected $isTemplateStart = false;
-
-    /** @var bool Does this DocBlock signify the end of a DocBlock template? */
-    protected $isTemplateEnd = false;
-
-    /**
-     * Parses the given docblock and populates the member fields.
-     *
-     * The constructor may also receive namespace information such as the
-     * current namespace and aliases. This information is used by some tags
-     * (e.g. @return, @param, etc.) to turn a relative Type into a FQCN.
-     *
-     * @param \Reflector|string $docblock A docblock comment (including
-     *     asterisks) or reflector supporting the getDocComment method.
-     * @param Context           $context  The context in which the DocBlock
-     *     occurs.
-     * @param Location          $location The location within the file that this
-     *     DocBlock occurs in.
-     *
-     * @throws \InvalidArgumentException if the given argument does not have the
-     *     getDocComment method.
-     */
-    public function __construct(
-        $docblock,
-        Context $context = null,
-        Location $location = null
-    ) {
-        if (is_object($docblock)) {
-            if (!method_exists($docblock, 'getDocComment')) {
-                throw new \InvalidArgumentException(
-                    'Invalid object passed; the given reflector must support '
-                    . 'the getDocComment method'
-                );
-            }
-
-            $docblock = $docblock->getDocComment();
-        }
-
-        $docblock = $this->cleanInput($docblock);
-
-        list($templateMarker, $short, $long, $tags) = $this->splitDocBlock($docblock);
-        $this->isTemplateStart = $templateMarker === '#@+';
-        $this->isTemplateEnd = $templateMarker === '#@-';
-        $this->short_description = $short;
-        $this->long_description = new DocBlock\Description($long, $this);
-        $this->parseTags($tags);
-
-        $this->context  = $context;
-        $this->location = $location;
-    }
-
-    /**
-     * Strips the asterisks from the DocBlock comment.
-     *
-     * @param string $comment String containing the comment text.
-     *
-     * @return string
-     */
-    protected function cleanInput($comment)
-    {
-        $comment = trim(
-            preg_replace(
-                '#[ \t]*(?:\/\*\*|\*\/|\*)?[ \t]{0,1}(.*)?#u',
-                '$1',
-                $comment
-            )
-        );
-
-        // reg ex above is not able to remove */ from a single line docblock
-        if (substr($comment, -2) == '*/') {
-            $comment = trim(substr($comment, 0, -2));
-        }
-
-        // normalize strings
-        $comment = str_replace(array("\r\n", "\r"), "\n", $comment);
-
-        return $comment;
-    }
-
-    /**
-     * Splits the DocBlock into a template marker, summary, description and block of tags.
-     *
-     * @param string $comment Comment to split into the sub-parts.
-     *
-     * @author Richard van Velzen (@_richardJ) Special thanks to Richard for the regex responsible for the split.
-     * @author Mike van Riel <me@mikevanriel.com> for extending the regex with template marker support.
-     *
-     * @return string[] containing the template marker (if any), summary, description and a string containing the tags.
-     */
-    protected function splitDocBlock($comment)
-    {
-        // Performance improvement cheat: if the first character is an @ then only tags are in this DocBlock. This
-        // method does not split tags so we return this verbatim as the fourth result (tags). This saves us the
-        // performance impact of running a regular expression
-        if (strpos($comment, '@') === 0) {
-            return array('', '', '', $comment);
-        }
-
-        // clears all extra horizontal whitespace from the line endings to prevent parsing issues
-        $comment = preg_replace('/\h*$/Sum', '', $comment);
-
-        /*
-         * Splits the docblock into a template marker, short description, long description and tags section
-         *
-         * - The template marker is empty, #@+ or #@- if the DocBlock starts with either of those (a newline may
-         *   occur after it and will be stripped).
-         * - The short description is started from the first character until a dot is encountered followed by a
-         *   newline OR two consecutive newlines (horizontal whitespace is taken into account to consider spacing
-         *   errors). This is optional.
-         * - The long description, any character until a new line is encountered followed by an @ and word
-         *   characters (a tag). This is optional.
-         * - Tags; the remaining characters
-         *
-         * Big thanks to RichardJ for contributing this Regular Expression
-         */
-        preg_match(
-            '/
-            \A
-            # 1. Extract the template marker
-            (?:(\#\@\+|\#\@\-)\n?)?
-
-            # 2. Extract the summary
-            (?:
-              (?! @\pL ) # The summary may not start with an @
-              (
-                [^\n.]+
-                (?:
-                  (?! \. \n | \n{2} )     # End summary upon a dot followed by newline or two newlines
-                  [\n.] (?! [ \t]* @\pL ) # End summary when an @ is found as first character on a new line
-                  [^\n.]+                 # Include anything else
-                )*
-                \.?
-              )?
-            )
-
-            # 3. Extract the description
-            (?:
-              \s*        # Some form of whitespace _must_ precede a description because a summary must be there
-              (?! @\pL ) # The description may not start with an @
-              (
-                [^\n]+
-                (?: \n+
-                  (?! [ \t]* @\pL ) # End description when an @ is found as first character on a new line
-                  [^\n]+            # Include anything else
-                )*
-              )
-            )?
-
-            # 4. Extract the tags (anything that follows)
-            (\s+ [\s\S]*)? # everything that follows
-            /ux',
-            $comment,
-            $matches
-        );
-        array_shift($matches);
-
-        while (count($matches) < 4) {
-            $matches[] = '';
-        }
-
-        return $matches;
-    }
-
-    /**
-     * Creates the tag objects.
-     *
-     * @param string $tags Tag block to parse.
-     *
-     * @return void
-     */
-    protected function parseTags($tags)
-    {
-        $result = array();
-        $tags = trim($tags);
-        if ('' !== $tags) {
-            if ('@' !== $tags[0]) {
-                throw new \LogicException(
-                    'A tag block started with text instead of an actual tag,'
-                    . ' this makes the tag block invalid: ' . $tags
-                );
-            }
-            foreach (explode("\n", $tags) as $tag_line) {
-                if (isset($tag_line[0]) && ($tag_line[0] === '@')) {
-                    $result[] = $tag_line;
-                } else {
-                    $result[count($result) - 1] .= "\n" . $tag_line;
-                }
-            }
-
-            // create proper Tag objects
-            foreach ($result as $key => $tag_line) {
-                $result[$key] = Tag::createInstance(trim($tag_line), $this);
-            }
-        }
-
-        $this->tags = $result;
-    }
-
-    /**
-     * Gets the text portion of the doc block.
-     * 
-     * Gets the text portion (short and long description combined) of the doc
-     * block.
-     * 
-     * @return string The text portion of the doc block.
-     */
-    public function getText()
-    {
-        $short = $this->getShortDescription();
-        $long = $this->getLongDescription()->getContents();
-
-        if ($long) {
-            return "{$short}\n\n{$long}";
-        } else {
-            return $short;
-        }
-    }
-
-    /**
-     * Set the text portion of the doc block.
-     * 
-     * Sets the text portion (short and long description combined) of the doc
-     * block.
-     *
-     * @param string $docblock The new text portion of the doc block.
-     * 
-     * @return $this This doc block.
-     */
-    public function setText($comment)
-    {
-        list(,$short, $long) = $this->splitDocBlock($comment);
-        $this->short_description = $short;
-        $this->long_description = new DocBlock\Description($long, $this);
-        return $this;
-    }
-    /**
-     * Returns the opening line or also known as short description.
-     *
-     * @return string
-     */
-    public function getShortDescription()
-    {
-        return $this->short_description;
-    }
-
-    /**
-     * Returns the full description or also known as long description.
-     *
-     * @return DocBlock\Description
-     */
-    public function getLongDescription()
-    {
-        return $this->long_description;
-    }
-
-    /**
-     * Returns whether this DocBlock is the start of a Template section.
-     *
-     * A Docblock may serve as template for a series of subsequent DocBlocks. This is indicated by a special marker
-     * (`#@+`) that is appended directly after the opening `/**` of a DocBlock.
-     *
-     * An example of such an opening is:
-     *
-     * ```
-     * /**#@+
-     *  * My DocBlock
-     *  * /
-     * ```
-     *
-     * The description and tags (not the summary!) are copied onto all subsequent DocBlocks and also applied to all
-     * elements that follow until another DocBlock is found that contains the closing marker (`#@-`).
-     *
-     * @see self::isTemplateEnd() for the check whether a closing marker was provided.
-     *
-     * @return boolean
-     */
-    public function isTemplateStart()
-    {
-        return $this->isTemplateStart;
-    }
-
-    /**
-     * Returns whether this DocBlock is the end of a Template section.
-     *
-     * @see self::isTemplateStart() for a more complete description of the Docblock Template functionality.
-     *
-     * @return boolean
-     */
-    public function isTemplateEnd()
-    {
-        return $this->isTemplateEnd;
-    }
-
-    /**
-     * Returns the current context.
-     *
-     * @return Context
-     */
-    public function getContext()
-    {
-        return $this->context;
-    }
-
-    /**
-     * Returns the current location.
-     *
-     * @return Location
-     */
-    public function getLocation()
-    {
-        return $this->location;
-    }
-
-    /**
-     * Returns the tags for this DocBlock.
-     *
-     * @return Tag[]
-     */
-    public function getTags()
-    {
-        return $this->tags;
-    }
-
-    /**
-     * Returns an array of tags matching the given name. If no tags are found
-     * an empty array is returned.
-     *
-     * @param string $name String to search by.
-     *
-     * @return Tag[]
-     */
-    public function getTagsByName($name)
-    {
-        $result = array();
-
-        /** @var Tag $tag */
-        foreach ($this->getTags() as $tag) {
-            if ($tag->getName() != $name) {
-                continue;
-            }
-
-            $result[] = $tag;
-        }
-
-        return $result;
-    }
-
-    /**
-     * Checks if a tag of a certain type is present in this DocBlock.
-     *
-     * @param string $name Tag name to check for.
-     *
-     * @return bool
-     */
-    public function hasTag($name)
-    {
-        /** @var Tag $tag */
-        foreach ($this->getTags() as $tag) {
-            if ($tag->getName() == $name) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    /**
-     * Appends a tag at the end of the list of tags.
-     *
-     * @param Tag $tag The tag to add.
-     *
-     * @return Tag The newly added tag.
-     *
-     * @throws \LogicException When the tag belongs to a different DocBlock.
-     */
-    public function appendTag(Tag $tag)
-    {
-        if (null === $tag->getDocBlock()) {
-            $tag->setDocBlock($this);
-        }
-
-        if ($tag->getDocBlock() === $this) {
-            $this->tags[] = $tag;
-        } else {
-            throw new \LogicException(
-                'This tag belongs to a different DocBlock object.'
-            );
-        }
-
-        return $tag;
-    }
-
-
-    /**
-     * Builds a string representation of this object.
-     *
-     * @todo determine the exact format as used by PHP Reflection and
-     *     implement it.
-     *
-     * @return string
-     * @codeCoverageIgnore Not yet implemented
-     */
-    public static function export()
-    {
-        throw new \Exception('Not yet implemented');
-    }
-
-    /**
-     * Returns the exported information (we should use the export static method
-     * BUT this throws an exception at this point).
-     *
-     * @return string
-     * @codeCoverageIgnore Not yet implemented
-     */
-    public function __toString()
-    {
-        return 'Not yet implemented';
-    }
-}
+<?php
+/**
+ * phpDocumentor
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection;
+
+use phpDocumentor\Reflection\DocBlock\Tag;
+use phpDocumentor\Reflection\DocBlock\Context;
+use phpDocumentor\Reflection\DocBlock\Location;
+
+/**
+ * Parses the DocBlock for any structure.
+ *
+ * @author  Mike van Riel <mike.vanriel@naenius.com>
+ * @license http://www.opensource.org/licenses/mit-license.php MIT
+ * @link    http://phpdoc.org
+ */
+class DocBlock implements \Reflector
+{
+    /** @var string The opening line for this docblock. */
+    protected $short_description = '';
+
+    /**
+     * @var DocBlock\Description The actual
+     *     description for this docblock.
+     */
+    protected $long_description = null;
+
+    /**
+     * @var Tag[] An array containing all
+     *     the tags in this docblock; except inline.
+     */
+    protected $tags = array();
+
+    /** @var Context Information about the context of this DocBlock. */
+    protected $context = null;
+
+    /** @var Location Information about the location of this DocBlock. */
+    protected $location = null;
+
+    /** @var bool Is this DocBlock (the start of) a template? */
+    protected $isTemplateStart = false;
+
+    /** @var bool Does this DocBlock signify the end of a DocBlock template? */
+    protected $isTemplateEnd = false;
+
+    /**
+     * Parses the given docblock and populates the member fields.
+     *
+     * The constructor may also receive namespace information such as the
+     * current namespace and aliases. This information is used by some tags
+     * (e.g. @return, @param, etc.) to turn a relative Type into a FQCN.
+     *
+     * @param \Reflector|string $docblock A docblock comment (including
+     *     asterisks) or reflector supporting the getDocComment method.
+     * @param Context           $context  The context in which the DocBlock
+     *     occurs.
+     * @param Location          $location The location within the file that this
+     *     DocBlock occurs in.
+     *
+     * @throws \InvalidArgumentException if the given argument does not have the
+     *     getDocComment method.
+     */
+    public function __construct(
+        $docblock,
+        Context $context = null,
+        Location $location = null
+    ) {
+        if (is_object($docblock)) {
+            if (!method_exists($docblock, 'getDocComment')) {
+                throw new \InvalidArgumentException(
+                    'Invalid object passed; the given reflector must support '
+                    . 'the getDocComment method'
+                );
+            }
+
+            $docblock = $docblock->getDocComment();
+        }
+
+        $docblock = $this->cleanInput($docblock);
+
+        list($templateMarker, $short, $long, $tags) = $this->splitDocBlock($docblock);
+        $this->isTemplateStart = $templateMarker === '#@+';
+        $this->isTemplateEnd = $templateMarker === '#@-';
+        $this->short_description = $short;
+        $this->long_description = new DocBlock\Description($long, $this);
+        $this->parseTags($tags);
+
+        $this->context  = $context;
+        $this->location = $location;
+    }
+
+    /**
+     * Strips the asterisks from the DocBlock comment.
+     *
+     * @param string $comment String containing the comment text.
+     *
+     * @return string
+     */
+    protected function cleanInput($comment)
+    {
+        $comment = trim(
+            preg_replace(
+                '#[ \t]*(?:\/\*\*|\*\/|\*)?[ \t]{0,1}(.*)?#u',
+                '$1',
+                $comment
+            )
+        );
+
+        // reg ex above is not able to remove */ from a single line docblock
+        if (substr($comment, -2) == '*/') {
+            $comment = trim(substr($comment, 0, -2));
+        }
+
+        // normalize strings
+        $comment = str_replace(array("\r\n", "\r"), "\n", $comment);
+
+        return $comment;
+    }
+
+    /**
+     * Splits the DocBlock into a template marker, summary, description and block of tags.
+     *
+     * @param string $comment Comment to split into the sub-parts.
+     *
+     * @author Richard van Velzen (@_richardJ) Special thanks to Richard for the regex responsible for the split.
+     * @author Mike van Riel <me@mikevanriel.com> for extending the regex with template marker support.
+     *
+     * @return string[] containing the template marker (if any), summary, description and a string containing the tags.
+     */
+    protected function splitDocBlock($comment)
+    {
+        // Performance improvement cheat: if the first character is an @ then only tags are in this DocBlock. This
+        // method does not split tags so we return this verbatim as the fourth result (tags). This saves us the
+        // performance impact of running a regular expression
+        if (strpos($comment, '@') === 0) {
+            return array('', '', '', $comment);
+        }
+
+        // clears all extra horizontal whitespace from the line endings to prevent parsing issues
+        $comment = preg_replace('/\h*$/Sum', '', $comment);
+
+        /*
+         * Splits the docblock into a template marker, short description, long description and tags section
+         *
+         * - The template marker is empty, #@+ or #@- if the DocBlock starts with either of those (a newline may
+         *   occur after it and will be stripped).
+         * - The short description is started from the first character until a dot is encountered followed by a
+         *   newline OR two consecutive newlines (horizontal whitespace is taken into account to consider spacing
+         *   errors). This is optional.
+         * - The long description, any character until a new line is encountered followed by an @ and word
+         *   characters (a tag). This is optional.
+         * - Tags; the remaining characters
+         *
+         * Big thanks to RichardJ for contributing this Regular Expression
+         */
+        preg_match(
+            '/
+            \A
+            # 1. Extract the template marker
+            (?:(\#\@\+|\#\@\-)\n?)?
+
+            # 2. Extract the summary
+            (?:
+              (?! @\pL ) # The summary may not start with an @
+              (
+                [^\n.]+
+                (?:
+                  (?! \. \n | \n{2} )     # End summary upon a dot followed by newline or two newlines
+                  [\n.] (?! [ \t]* @\pL ) # End summary when an @ is found as first character on a new line
+                  [^\n.]+                 # Include anything else
+                )*
+                \.?
+              )?
+            )
+
+            # 3. Extract the description
+            (?:
+              \s*        # Some form of whitespace _must_ precede a description because a summary must be there
+              (?! @\pL ) # The description may not start with an @
+              (
+                [^\n]+
+                (?: \n+
+                  (?! [ \t]* @\pL ) # End description when an @ is found as first character on a new line
+                  [^\n]+            # Include anything else
+                )*
+              )
+            )?
+
+            # 4. Extract the tags (anything that follows)
+            (\s+ [\s\S]*)? # everything that follows
+            /ux',
+            $comment,
+            $matches
+        );
+        array_shift($matches);
+
+        while (count($matches) < 4) {
+            $matches[] = '';
+        }
+
+        return $matches;
+    }
+
+    /**
+     * Creates the tag objects.
+     *
+     * @param string $tags Tag block to parse.
+     *
+     * @return void
+     */
+    protected function parseTags($tags)
+    {
+        $result = array();
+        $tags = trim($tags);
+        if ('' !== $tags) {
+            if ('@' !== $tags[0]) {
+                throw new \LogicException(
+                    'A tag block started with text instead of an actual tag,'
+                    . ' this makes the tag block invalid: ' . $tags
+                );
+            }
+            foreach (explode("\n", $tags) as $tag_line) {
+                if (isset($tag_line[0]) && ($tag_line[0] === '@')) {
+                    $result[] = $tag_line;
+                } else {
+                    $result[count($result) - 1] .= "\n" . $tag_line;
+                }
+            }
+
+            // create proper Tag objects
+            foreach ($result as $key => $tag_line) {
+                $result[$key] = Tag::createInstance(trim($tag_line), $this);
+            }
+        }
+
+        $this->tags = $result;
+    }
+
+    /**
+     * Gets the text portion of the doc block.
+     * 
+     * Gets the text portion (short and long description combined) of the doc
+     * block.
+     * 
+     * @return string The text portion of the doc block.
+     */
+    public function getText()
+    {
+        $short = $this->getShortDescription();
+        $long = $this->getLongDescription()->getContents();
+
+        if ($long) {
+            return "{$short}\n\n{$long}";
+        } else {
+            return $short;
+        }
+    }
+
+    /**
+     * Set the text portion of the doc block.
+     * 
+     * Sets the text portion (short and long description combined) of the doc
+     * block.
+     *
+     * @param string $docblock The new text portion of the doc block.
+     * 
+     * @return $this This doc block.
+     */
+    public function setText($comment)
+    {
+        list(,$short, $long) = $this->splitDocBlock($comment);
+        $this->short_description = $short;
+        $this->long_description = new DocBlock\Description($long, $this);
+        return $this;
+    }
+    /**
+     * Returns the opening line or also known as short description.
+     *
+     * @return string
+     */
+    public function getShortDescription()
+    {
+        return $this->short_description;
+    }
+
+    /**
+     * Returns the full description or also known as long description.
+     *
+     * @return DocBlock\Description
+     */
+    public function getLongDescription()
+    {
+        return $this->long_description;
+    }
+
+    /**
+     * Returns whether this DocBlock is the start of a Template section.
+     *
+     * A Docblock may serve as template for a series of subsequent DocBlocks. This is indicated by a special marker
+     * (`#@+`) that is appended directly after the opening `/**` of a DocBlock.
+     *
+     * An example of such an opening is:
+     *
+     * ```
+     * /**#@+
+     *  * My DocBlock
+     *  * /
+     * ```
+     *
+     * The description and tags (not the summary!) are copied onto all subsequent DocBlocks and also applied to all
+     * elements that follow until another DocBlock is found that contains the closing marker (`#@-`).
+     *
+     * @see self::isTemplateEnd() for the check whether a closing marker was provided.
+     *
+     * @return boolean
+     */
+    public function isTemplateStart()
+    {
+        return $this->isTemplateStart;
+    }
+
+    /**
+     * Returns whether this DocBlock is the end of a Template section.
+     *
+     * @see self::isTemplateStart() for a more complete description of the Docblock Template functionality.
+     *
+     * @return boolean
+     */
+    public function isTemplateEnd()
+    {
+        return $this->isTemplateEnd;
+    }
+
+    /**
+     * Returns the current context.
+     *
+     * @return Context
+     */
+    public function getContext()
+    {
+        return $this->context;
+    }
+
+    /**
+     * Returns the current location.
+     *
+     * @return Location
+     */
+    public function getLocation()
+    {
+        return $this->location;
+    }
+
+    /**
+     * Returns the tags for this DocBlock.
+     *
+     * @return Tag[]
+     */
+    public function getTags()
+    {
+        return $this->tags;
+    }
+
+    /**
+     * Returns an array of tags matching the given name. If no tags are found
+     * an empty array is returned.
+     *
+     * @param string $name String to search by.
+     *
+     * @return Tag[]
+     */
+    public function getTagsByName($name)
+    {
+        $result = array();
+
+        /** @var Tag $tag */
+        foreach ($this->getTags() as $tag) {
+            if ($tag->getName() != $name) {
+                continue;
+            }
+
+            $result[] = $tag;
+        }
+
+        return $result;
+    }
+
+    /**
+     * Checks if a tag of a certain type is present in this DocBlock.
+     *
+     * @param string $name Tag name to check for.
+     *
+     * @return bool
+     */
+    public function hasTag($name)
+    {
+        /** @var Tag $tag */
+        foreach ($this->getTags() as $tag) {
+            if ($tag->getName() == $name) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * Appends a tag at the end of the list of tags.
+     *
+     * @param Tag $tag The tag to add.
+     *
+     * @return Tag The newly added tag.
+     *
+     * @throws \LogicException When the tag belongs to a different DocBlock.
+     */
+    public function appendTag(Tag $tag)
+    {
+        if (null === $tag->getDocBlock()) {
+            $tag->setDocBlock($this);
+        }
+
+        if ($tag->getDocBlock() === $this) {
+            $this->tags[] = $tag;
+        } else {
+            throw new \LogicException(
+                'This tag belongs to a different DocBlock object.'
+            );
+        }
+
+        return $tag;
+    }
+
+
+    /**
+     * Builds a string representation of this object.
+     *
+     * @todo determine the exact format as used by PHP Reflection and
+     *     implement it.
+     *
+     * @return string
+     * @codeCoverageIgnore Not yet implemented
+     */
+    public static function export()
+    {
+        throw new \Exception('Not yet implemented');
+    }
+
+    /**
+     * Returns the exported information (we should use the export static method
+     * BUT this throws an exception at this point).
+     *
+     * @return string
+     * @codeCoverageIgnore Not yet implemented
+     */
+    public function __toString()
+    {
+        return 'Not yet implemented';
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/DescriptionTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/DescriptionTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/DescriptionTest.php	(revision 57)
@@ -1,245 +1,245 @@
-<?php
-/**
- * phpDocumentor Description Test
- *
- * PHP Version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Description
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class DescriptionTest extends \PHPUnit_Framework_TestCase
-{
-    public function testConstruct()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(1, $parsedContents);
-        $this->assertSame($fixture, $parsedContents[0]);
-    }
-
-    public function testInlineTagParsing()
-    {
-        $fixture = <<<LONGDESC
-This is text for a {@link http://phpdoc.org/ description} that uses inline
-tags.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(3, $parsedContents);
-        $this->assertSame('This is text for a ', $parsedContents[0]);
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag\LinkTag',
-            $parsedContents[1]
-        );
-        $this->assertSame(
-            ' that uses inline
-tags.',
-            $parsedContents[2]
-        );
-    }
-
-    public function testInlineTagAtStartParsing()
-    {
-        $fixture = <<<LONGDESC
-{@link http://phpdoc.org/ This} is text for a description that uses inline
-tags.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(3, $parsedContents);
-
-        $this->assertSame('', $parsedContents[0]);
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag\LinkTag',
-            $parsedContents[1]
-        );
-        $this->assertSame(
-            ' is text for a description that uses inline
-tags.',
-            $parsedContents[2]
-        );
-    }
-
-    public function testNestedInlineTagParsing()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description with {@internal inline tag with
-{@link http://phpdoc.org another inline tag} in it}.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(3, $parsedContents);
-
-        $this->assertSame(
-            'This is text for a description with ',
-            $parsedContents[0]
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $parsedContents[1]
-        );
-        $this->assertSame('.', $parsedContents[2]);
-
-        $parsedDescription = $parsedContents[1]->getParsedDescription();
-        $this->assertCount(3, $parsedDescription);
-        $this->assertSame("inline tag with\n", $parsedDescription[0]);
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag\LinkTag',
-            $parsedDescription[1]
-        );
-        $this->assertSame(' in it', $parsedDescription[2]);
-    }
-
-    public function testLiteralOpeningDelimiter()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description containing { that is literal.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(1, $parsedContents);
-        $this->assertSame($fixture, $parsedContents[0]);
-    }
-
-    public function testNestedLiteralOpeningDelimiter()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description containing {@internal inline tag that has { that
-is literal}.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(3, $parsedContents);
-        $this->assertSame(
-            'This is text for a description containing ',
-            $parsedContents[0]
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $parsedContents[1]
-        );
-        $this->assertSame('.', $parsedContents[2]);
-
-        $this->assertSame(
-            array('inline tag that has { that
-is literal'),
-            $parsedContents[1]->getParsedDescription()
-        );
-    }
-
-    public function testLiteralClosingDelimiter()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description with {} that is not a tag.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(1, $parsedContents);
-        $this->assertSame(
-            'This is text for a description with } that is not a tag.',
-            $parsedContents[0]
-        );
-    }
-
-    public function testNestedLiteralClosingDelimiter()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description with {@internal inline tag with {} that is not an
-inline tag}.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(3, $parsedContents);
-        $this->assertSame(
-            'This is text for a description with ',
-            $parsedContents[0]
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $parsedContents[1]
-        );
-        $this->assertSame('.', $parsedContents[2]);
-
-        $this->assertSame(
-            array('inline tag with } that is not an
-inline tag'),
-            $parsedContents[1]->getParsedDescription()
-        );
-    }
-
-    public function testInlineTagEscapingSequence()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description with literal {{@}link}.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(1, $parsedContents);
-        $this->assertSame(
-            'This is text for a description with literal {@link}.',
-            $parsedContents[0]
-        );
-    }
-
-    public function testNestedInlineTagEscapingSequence()
-    {
-        $fixture = <<<LONGDESC
-This is text for a description with an {@internal inline tag with literal
-{{@}link{} in it}.
-LONGDESC;
-        $object = new Description($fixture);
-        $this->assertSame($fixture, $object->getContents());
-
-        $parsedContents = $object->getParsedContents();
-        $this->assertCount(3, $parsedContents);
-        $this->assertSame(
-            'This is text for a description with an ',
-            $parsedContents[0]
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $parsedContents[1]
-        );
-        $this->assertSame('.', $parsedContents[2]);
-
-        $this->assertSame(
-            array('inline tag with literal
-{@link} in it'),
-            $parsedContents[1]->getParsedDescription()
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Description Test
+ *
+ * PHP Version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Description
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class DescriptionTest extends \PHPUnit_Framework_TestCase
+{
+    public function testConstruct()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(1, $parsedContents);
+        $this->assertSame($fixture, $parsedContents[0]);
+    }
+
+    public function testInlineTagParsing()
+    {
+        $fixture = <<<LONGDESC
+This is text for a {@link http://phpdoc.org/ description} that uses inline
+tags.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(3, $parsedContents);
+        $this->assertSame('This is text for a ', $parsedContents[0]);
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag\LinkTag',
+            $parsedContents[1]
+        );
+        $this->assertSame(
+            ' that uses inline
+tags.',
+            $parsedContents[2]
+        );
+    }
+
+    public function testInlineTagAtStartParsing()
+    {
+        $fixture = <<<LONGDESC
+{@link http://phpdoc.org/ This} is text for a description that uses inline
+tags.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(3, $parsedContents);
+
+        $this->assertSame('', $parsedContents[0]);
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag\LinkTag',
+            $parsedContents[1]
+        );
+        $this->assertSame(
+            ' is text for a description that uses inline
+tags.',
+            $parsedContents[2]
+        );
+    }
+
+    public function testNestedInlineTagParsing()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description with {@internal inline tag with
+{@link http://phpdoc.org another inline tag} in it}.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(3, $parsedContents);
+
+        $this->assertSame(
+            'This is text for a description with ',
+            $parsedContents[0]
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $parsedContents[1]
+        );
+        $this->assertSame('.', $parsedContents[2]);
+
+        $parsedDescription = $parsedContents[1]->getParsedDescription();
+        $this->assertCount(3, $parsedDescription);
+        $this->assertSame("inline tag with\n", $parsedDescription[0]);
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag\LinkTag',
+            $parsedDescription[1]
+        );
+        $this->assertSame(' in it', $parsedDescription[2]);
+    }
+
+    public function testLiteralOpeningDelimiter()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description containing { that is literal.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(1, $parsedContents);
+        $this->assertSame($fixture, $parsedContents[0]);
+    }
+
+    public function testNestedLiteralOpeningDelimiter()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description containing {@internal inline tag that has { that
+is literal}.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(3, $parsedContents);
+        $this->assertSame(
+            'This is text for a description containing ',
+            $parsedContents[0]
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $parsedContents[1]
+        );
+        $this->assertSame('.', $parsedContents[2]);
+
+        $this->assertSame(
+            array('inline tag that has { that
+is literal'),
+            $parsedContents[1]->getParsedDescription()
+        );
+    }
+
+    public function testLiteralClosingDelimiter()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description with {} that is not a tag.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(1, $parsedContents);
+        $this->assertSame(
+            'This is text for a description with } that is not a tag.',
+            $parsedContents[0]
+        );
+    }
+
+    public function testNestedLiteralClosingDelimiter()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description with {@internal inline tag with {} that is not an
+inline tag}.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(3, $parsedContents);
+        $this->assertSame(
+            'This is text for a description with ',
+            $parsedContents[0]
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $parsedContents[1]
+        );
+        $this->assertSame('.', $parsedContents[2]);
+
+        $this->assertSame(
+            array('inline tag with } that is not an
+inline tag'),
+            $parsedContents[1]->getParsedDescription()
+        );
+    }
+
+    public function testInlineTagEscapingSequence()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description with literal {{@}link}.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(1, $parsedContents);
+        $this->assertSame(
+            'This is text for a description with literal {@link}.',
+            $parsedContents[0]
+        );
+    }
+
+    public function testNestedInlineTagEscapingSequence()
+    {
+        $fixture = <<<LONGDESC
+This is text for a description with an {@internal inline tag with literal
+{{@}link{} in it}.
+LONGDESC;
+        $object = new Description($fixture);
+        $this->assertSame($fixture, $object->getContents());
+
+        $parsedContents = $object->getParsedContents();
+        $this->assertCount(3, $parsedContents);
+        $this->assertSame(
+            'This is text for a description with an ',
+            $parsedContents[0]
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $parsedContents[1]
+        );
+        $this->assertSame('.', $parsedContents[2]);
+
+        $this->assertSame(
+            array('inline tag with literal
+{@link} in it'),
+            $parsedContents[1]->getParsedDescription()
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/CoversTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/CoversTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/CoversTagTest.php	(revision 57)
@@ -1,86 +1,86 @@
-<?php
-/**
- * phpDocumentor Covers Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\CoversTag
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class CoversTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\CoversTag can create
-     * a link for the covers doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exReference
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\CoversTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exReference
-    ) {
-        $tag = new CoversTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exReference, $tag->getReference());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exReference
-        return array(
-            array(
-                'covers',
-                'Foo::bar()',
-                'Foo::bar()',
-                '',
-                'Foo::bar()'
-            ),
-            array(
-                'covers',
-                'Foo::bar() Testing',
-                'Foo::bar() Testing',
-                'Testing',
-                'Foo::bar()',
-            ),
-            array(
-                'covers',
-                'Foo::bar() Testing comments',
-                'Foo::bar() Testing comments',
-                'Testing comments',
-                'Foo::bar()',
-            ),
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Covers Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\CoversTag
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class CoversTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\CoversTag can create
+     * a link for the covers doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exReference
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\CoversTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exReference
+    ) {
+        $tag = new CoversTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exReference, $tag->getReference());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exReference
+        return array(
+            array(
+                'covers',
+                'Foo::bar()',
+                'Foo::bar()',
+                '',
+                'Foo::bar()'
+            ),
+            array(
+                'covers',
+                'Foo::bar() Testing',
+                'Foo::bar() Testing',
+                'Testing',
+                'Foo::bar()',
+            ),
+            array(
+                'covers',
+                'Foo::bar() Testing comments',
+                'Foo::bar() Testing comments',
+                'Testing comments',
+                'Foo::bar()',
+            ),
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/DeprecatedTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/DeprecatedTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/DeprecatedTagTest.php	(revision 57)
@@ -1,115 +1,115 @@
-<?php
-/**
- * phpDocumentor Deprecated Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\DeprecatedTag
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class DeprecatedTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
-     * a link for the @deprecated doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exDescription
-     * @param string $exVersion
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\DeprecatedTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exVersion
-    ) {
-        $tag = new DeprecatedTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exVersion, $tag->getVersion());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exVersion
-        return array(
-            array(
-                'deprecated',
-                '1.0 First release.',
-                '1.0 First release.',
-                'First release.',
-                '1.0'
-            ),
-            array(
-                'deprecated',
-                "1.0\nFirst release.",
-                "1.0\nFirst release.",
-                'First release.',
-                '1.0'
-            ),
-            array(
-                'deprecated',
-                "1.0\nFirst\nrelease.",
-                "1.0\nFirst\nrelease.",
-                "First\nrelease.",
-                '1.0'
-            ),
-            array(
-                'deprecated',
-                'Unfinished release',
-                'Unfinished release',
-                'Unfinished release',
-                ''
-            ),
-            array(
-                'deprecated',
-                '1.0',
-                '1.0',
-                '',
-                '1.0'
-            ),
-            array(
-                'deprecated',
-                'GIT: $Id$',
-                'GIT: $Id$',
-                '',
-                'GIT: $Id$'
-            ),
-            array(
-                'deprecated',
-                'GIT: $Id$ Dev build',
-                'GIT: $Id$ Dev build',
-                'Dev build',
-                'GIT: $Id$'
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Deprecated Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\DeprecatedTag
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class DeprecatedTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
+     * a link for the @deprecated doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exDescription
+     * @param string $exVersion
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\DeprecatedTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exVersion
+    ) {
+        $tag = new DeprecatedTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exVersion, $tag->getVersion());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exVersion
+        return array(
+            array(
+                'deprecated',
+                '1.0 First release.',
+                '1.0 First release.',
+                'First release.',
+                '1.0'
+            ),
+            array(
+                'deprecated',
+                "1.0\nFirst release.",
+                "1.0\nFirst release.",
+                'First release.',
+                '1.0'
+            ),
+            array(
+                'deprecated',
+                "1.0\nFirst\nrelease.",
+                "1.0\nFirst\nrelease.",
+                "First\nrelease.",
+                '1.0'
+            ),
+            array(
+                'deprecated',
+                'Unfinished release',
+                'Unfinished release',
+                'Unfinished release',
+                ''
+            ),
+            array(
+                'deprecated',
+                '1.0',
+                '1.0',
+                '',
+                '1.0'
+            ),
+            array(
+                'deprecated',
+                'GIT: $Id$',
+                'GIT: $Id$',
+                '',
+                'GIT: $Id$'
+            ),
+            array(
+                'deprecated',
+                'GIT: $Id$ Dev build',
+                'GIT: $Id$ Dev build',
+                'Dev build',
+                'GIT: $Id$'
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ExampleTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ExampleTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ExampleTagTest.php	(revision 57)
@@ -1,203 +1,203 @@
-<?php
-/**
- * phpDocumentor Example Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\ExampleTag
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class ExampleTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\SourceTag can
-     * understand the @source DocBlock.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exStartingLine
-     * @param string $exLineCount
-     * @param string $exFilepath
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ExampleTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exStartingLine,
-        $exLineCount,
-        $exFilePath
-    ) {
-        $tag = new ExampleTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exStartingLine, $tag->getStartingLine());
-        $this->assertEquals($exLineCount, $tag->getLineCount());
-        $this->assertEquals($exFilePath, $tag->getFilePath());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type,
-        // $content,
-        // $exContent,
-        // $exDescription,
-        // $exStartingLine,
-        // $exLineCount,
-        // $exFilePath
-        return array(
-            array(
-                'example',
-                'file.php',
-                'file.php',
-                '',
-                1,
-                null,
-                'file.php'
-            ),
-            array(
-                'example',
-                'Testing comments',
-                'Testing comments',
-                'comments',
-                1,
-                null,
-                'Testing'
-            ),
-            array(
-                'example',
-                'file.php 2 Testing',
-                'file.php 2 Testing',
-                'Testing',
-                2,
-                null,
-                'file.php'
-            ),
-            array(
-                'example',
-                'file.php 2 3 Testing comments',
-                'file.php 2 3 Testing comments',
-                'Testing comments',
-                2,
-                3,
-                'file.php'
-            ),
-            array(
-                'example',
-                'file.php 2 -1 Testing comments',
-                'file.php 2 -1 Testing comments',
-                '-1 Testing comments',
-                2,
-                null,
-                'file.php'
-            ),
-            array(
-                'example',
-                'file.php -1 1 Testing comments',
-                'file.php -1 1 Testing comments',
-                '-1 1 Testing comments',
-                1,
-                null,
-                'file.php'
-            ),
-            array(
-                'example',
-                '"file with spaces.php" Testing comments',
-                '"file with spaces.php" Testing comments',
-                'Testing comments',
-                1,
-                null,
-                'file with spaces.php'
-            ),
-            array(
-                'example',
-                '"file with spaces.php" 2 Testing comments',
-                '"file with spaces.php" 2 Testing comments',
-                'Testing comments',
-                2,
-                null,
-                'file with spaces.php'
-            ),
-            array(
-                'example',
-                '"file with spaces.php" 2 3 Testing comments',
-                '"file with spaces.php" 2 3 Testing comments',
-                'Testing comments',
-                2,
-                3,
-                'file with spaces.php'
-            ),
-            array(
-                'example',
-                '"file with spaces.php" 2 -3 Testing comments',
-                '"file with spaces.php" 2 -3 Testing comments',
-                '-3 Testing comments',
-                2,
-                null,
-                'file with spaces.php'
-            ),
-            array(
-                'example',
-                '"file with spaces.php" -2 3 Testing comments',
-                '"file with spaces.php" -2 3 Testing comments',
-                '-2 3 Testing comments',
-                1,
-                null,
-                'file with spaces.php'
-            ),
-            array(
-                'example',
-                'file%20with%20spaces.php Testing comments',
-                'file%20with%20spaces.php Testing comments',
-                'Testing comments',
-                1,
-                null,
-                'file with spaces.php'
-            ),
-            array(
-                'example',
-                'folder/file%20with%20spaces.php Testing comments',
-                'folder/file%20with%20spaces.php Testing comments',
-                'Testing comments',
-                1,
-                null,
-                'folder/file with spaces.php'
-            ),
-            array(
-                'example',
-                'http://example.com/file%20with%20spaces.php Testing comments',
-                'http://example.com/file%20with%20spaces.php Testing comments',
-                'Testing comments',
-                1,
-                null,
-                'http://example.com/file%20with%20spaces.php'
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Example Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\ExampleTag
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class ExampleTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\SourceTag can
+     * understand the @source DocBlock.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exStartingLine
+     * @param string $exLineCount
+     * @param string $exFilepath
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ExampleTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exStartingLine,
+        $exLineCount,
+        $exFilePath
+    ) {
+        $tag = new ExampleTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exStartingLine, $tag->getStartingLine());
+        $this->assertEquals($exLineCount, $tag->getLineCount());
+        $this->assertEquals($exFilePath, $tag->getFilePath());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type,
+        // $content,
+        // $exContent,
+        // $exDescription,
+        // $exStartingLine,
+        // $exLineCount,
+        // $exFilePath
+        return array(
+            array(
+                'example',
+                'file.php',
+                'file.php',
+                '',
+                1,
+                null,
+                'file.php'
+            ),
+            array(
+                'example',
+                'Testing comments',
+                'Testing comments',
+                'comments',
+                1,
+                null,
+                'Testing'
+            ),
+            array(
+                'example',
+                'file.php 2 Testing',
+                'file.php 2 Testing',
+                'Testing',
+                2,
+                null,
+                'file.php'
+            ),
+            array(
+                'example',
+                'file.php 2 3 Testing comments',
+                'file.php 2 3 Testing comments',
+                'Testing comments',
+                2,
+                3,
+                'file.php'
+            ),
+            array(
+                'example',
+                'file.php 2 -1 Testing comments',
+                'file.php 2 -1 Testing comments',
+                '-1 Testing comments',
+                2,
+                null,
+                'file.php'
+            ),
+            array(
+                'example',
+                'file.php -1 1 Testing comments',
+                'file.php -1 1 Testing comments',
+                '-1 1 Testing comments',
+                1,
+                null,
+                'file.php'
+            ),
+            array(
+                'example',
+                '"file with spaces.php" Testing comments',
+                '"file with spaces.php" Testing comments',
+                'Testing comments',
+                1,
+                null,
+                'file with spaces.php'
+            ),
+            array(
+                'example',
+                '"file with spaces.php" 2 Testing comments',
+                '"file with spaces.php" 2 Testing comments',
+                'Testing comments',
+                2,
+                null,
+                'file with spaces.php'
+            ),
+            array(
+                'example',
+                '"file with spaces.php" 2 3 Testing comments',
+                '"file with spaces.php" 2 3 Testing comments',
+                'Testing comments',
+                2,
+                3,
+                'file with spaces.php'
+            ),
+            array(
+                'example',
+                '"file with spaces.php" 2 -3 Testing comments',
+                '"file with spaces.php" 2 -3 Testing comments',
+                '-3 Testing comments',
+                2,
+                null,
+                'file with spaces.php'
+            ),
+            array(
+                'example',
+                '"file with spaces.php" -2 3 Testing comments',
+                '"file with spaces.php" -2 3 Testing comments',
+                '-2 3 Testing comments',
+                1,
+                null,
+                'file with spaces.php'
+            ),
+            array(
+                'example',
+                'file%20with%20spaces.php Testing comments',
+                'file%20with%20spaces.php Testing comments',
+                'Testing comments',
+                1,
+                null,
+                'file with spaces.php'
+            ),
+            array(
+                'example',
+                'folder/file%20with%20spaces.php Testing comments',
+                'folder/file%20with%20spaces.php Testing comments',
+                'Testing comments',
+                1,
+                null,
+                'folder/file with spaces.php'
+            ),
+            array(
+                'example',
+                'http://example.com/file%20with%20spaces.php Testing comments',
+                'http://example.com/file%20with%20spaces.php Testing comments',
+                'Testing comments',
+                1,
+                null,
+                'http://example.com/file%20with%20spaces.php'
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/LinkTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/LinkTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/LinkTagTest.php	(revision 57)
@@ -1,87 +1,87 @@
-<?php
-/**
- * phpDocumentor Link Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Ben Selby <benmatselby@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\LinkTag
- *
- * @author    Ben Selby <benmatselby@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class LinkTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
-     * a link for the @link doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exDescription
-     * @param string $exLink
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\LinkTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exLink
-    ) {
-        $tag = new LinkTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exLink, $tag->getLink());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exLink
-        return array(
-            array(
-                'link',
-                'http://www.phpdoc.org/',
-                'http://www.phpdoc.org/',
-                'http://www.phpdoc.org/',
-                'http://www.phpdoc.org/'
-            ),
-            array(
-                'link',
-                'http://www.phpdoc.org/ Testing',
-                'http://www.phpdoc.org/ Testing',
-                'Testing',
-                'http://www.phpdoc.org/'
-            ),
-            array(
-                'link',
-                'http://www.phpdoc.org/ Testing comments',
-                'http://www.phpdoc.org/ Testing comments',
-                'Testing comments',
-                'http://www.phpdoc.org/'
-            ),
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Link Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Ben Selby <benmatselby@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\LinkTag
+ *
+ * @author    Ben Selby <benmatselby@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class LinkTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
+     * a link for the @link doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exDescription
+     * @param string $exLink
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\LinkTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exLink
+    ) {
+        $tag = new LinkTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exLink, $tag->getLink());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exLink
+        return array(
+            array(
+                'link',
+                'http://www.phpdoc.org/',
+                'http://www.phpdoc.org/',
+                'http://www.phpdoc.org/',
+                'http://www.phpdoc.org/'
+            ),
+            array(
+                'link',
+                'http://www.phpdoc.org/ Testing',
+                'http://www.phpdoc.org/ Testing',
+                'Testing',
+                'http://www.phpdoc.org/'
+            ),
+            array(
+                'link',
+                'http://www.phpdoc.org/ Testing comments',
+                'http://www.phpdoc.org/ Testing comments',
+                'Testing comments',
+                'http://www.phpdoc.org/'
+            ),
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/MethodTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/MethodTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/MethodTagTest.php	(revision 57)
@@ -1,146 +1,146 @@
-<?php
-/**
- * phpDocumentor Method Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\MethodTag
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class MethodTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * @param string $signature       The signature to test.
-     * @param bool   $valid           Whether the given signature is expected to
-     *     be valid.
-     * @param string $expected_name   The method name that is expected from this
-     *     signature.
-     * @param string $expected_return The return type that is expected from this
-     *     signature.
-     * @param bool   $paramCount      Number of parameters in the signature.
-     * @param string $description     The short description mentioned in the
-     *     signature.
-     * 
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\MethodTag
-     * @dataProvider getTestSignatures
-     *
-     * @return void
-     */
-    public function testConstruct(
-        $signature,
-        $valid,
-        $expected_name,
-        $expected_return,
-        $expected_isStatic,
-        $paramCount,
-        $description
-    ) {
-        ob_start();
-        $tag = new MethodTag('method', $signature);
-        $stdout = ob_get_clean();
-
-        $this->assertSame(
-            $valid,
-            empty($stdout),
-            'No error should have been output if the signature is valid'
-        );
-
-        if (!$valid) {
-            return;
-        }
-
-        $this->assertEquals($expected_name, $tag->getMethodName());
-        $this->assertEquals($expected_return, $tag->getType());
-        $this->assertEquals($description, $tag->getDescription());
-        $this->assertEquals($expected_isStatic, $tag->isStatic());
-        $this->assertCount($paramCount, $tag->getArguments());
-    }
-
-    public function getTestSignatures()
-    {
-        return array(
-            // TODO: Verify this case
-//            array(
-//                'foo',
-//                false, 'foo', '', false, 0, ''
-//            ),
-            array(
-                'foo()',
-                true, 'foo', 'void', false, 0, ''
-            ),
-            array(
-                'foo() description',
-                true, 'foo', 'void', false, 0, 'description'
-            ),
-            array(
-                'int foo()',
-                true, 'foo', 'int', false, 0, ''
-            ),
-            array(
-                'int foo() description',
-                true, 'foo', 'int', false, 0, 'description'
-            ),
-            array(
-                'int foo($a, $b)',
-                true, 'foo', 'int', false, 2, ''
-            ),
-            array(
-                'int foo() foo(int $a, int $b)',
-                true, 'foo', 'int', false, 2, ''
-            ),
-            array(
-                'int foo(int $a, int $b)',
-                true, 'foo', 'int', false, 2, ''
-            ),
-            array(
-                'null|int foo(int $a, int $b)',
-                true, 'foo', 'null|int', false, 2, ''
-            ),
-            array(
-                'int foo(null|int $a, int $b)',
-                true, 'foo', 'int', false, 2, ''
-            ),
-            array(
-                '\Exception foo() foo(Exception $a, Exception $b)',
-                true, 'foo', '\Exception', false, 2, ''
-            ),
-            array(
-                'int foo() foo(Exception $a, Exception $b) description',
-                true, 'foo', 'int', false, 2, 'description'
-            ),
-            array(
-                'int foo() foo(\Exception $a, \Exception $b) description',
-                true, 'foo', 'int', false, 2, 'description'
-            ),
-            array(
-                'void()',
-                true, 'void', 'void', false, 0, ''
-            ),
-            array(
-                'static foo()',
-                true, 'foo', 'static', false, 0, ''
-            ),
-            array(
-                'static void foo()',
-                true, 'foo', 'void', true, 0, ''
-            ),
-            array(
-                'static static foo()',
-                true, 'foo', 'static', true, 0, ''
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Method Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\MethodTag
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class MethodTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @param string $signature       The signature to test.
+     * @param bool   $valid           Whether the given signature is expected to
+     *     be valid.
+     * @param string $expected_name   The method name that is expected from this
+     *     signature.
+     * @param string $expected_return The return type that is expected from this
+     *     signature.
+     * @param bool   $paramCount      Number of parameters in the signature.
+     * @param string $description     The short description mentioned in the
+     *     signature.
+     * 
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\MethodTag
+     * @dataProvider getTestSignatures
+     *
+     * @return void
+     */
+    public function testConstruct(
+        $signature,
+        $valid,
+        $expected_name,
+        $expected_return,
+        $expected_isStatic,
+        $paramCount,
+        $description
+    ) {
+        ob_start();
+        $tag = new MethodTag('method', $signature);
+        $stdout = ob_get_clean();
+
+        $this->assertSame(
+            $valid,
+            empty($stdout),
+            'No error should have been output if the signature is valid'
+        );
+
+        if (!$valid) {
+            return;
+        }
+
+        $this->assertEquals($expected_name, $tag->getMethodName());
+        $this->assertEquals($expected_return, $tag->getType());
+        $this->assertEquals($description, $tag->getDescription());
+        $this->assertEquals($expected_isStatic, $tag->isStatic());
+        $this->assertCount($paramCount, $tag->getArguments());
+    }
+
+    public function getTestSignatures()
+    {
+        return array(
+            // TODO: Verify this case
+//            array(
+//                'foo',
+//                false, 'foo', '', false, 0, ''
+//            ),
+            array(
+                'foo()',
+                true, 'foo', 'void', false, 0, ''
+            ),
+            array(
+                'foo() description',
+                true, 'foo', 'void', false, 0, 'description'
+            ),
+            array(
+                'int foo()',
+                true, 'foo', 'int', false, 0, ''
+            ),
+            array(
+                'int foo() description',
+                true, 'foo', 'int', false, 0, 'description'
+            ),
+            array(
+                'int foo($a, $b)',
+                true, 'foo', 'int', false, 2, ''
+            ),
+            array(
+                'int foo() foo(int $a, int $b)',
+                true, 'foo', 'int', false, 2, ''
+            ),
+            array(
+                'int foo(int $a, int $b)',
+                true, 'foo', 'int', false, 2, ''
+            ),
+            array(
+                'null|int foo(int $a, int $b)',
+                true, 'foo', 'null|int', false, 2, ''
+            ),
+            array(
+                'int foo(null|int $a, int $b)',
+                true, 'foo', 'int', false, 2, ''
+            ),
+            array(
+                '\Exception foo() foo(Exception $a, Exception $b)',
+                true, 'foo', '\Exception', false, 2, ''
+            ),
+            array(
+                'int foo() foo(Exception $a, Exception $b) description',
+                true, 'foo', 'int', false, 2, 'description'
+            ),
+            array(
+                'int foo() foo(\Exception $a, \Exception $b) description',
+                true, 'foo', 'int', false, 2, 'description'
+            ),
+            array(
+                'void()',
+                true, 'void', 'void', false, 0, ''
+            ),
+            array(
+                'static foo()',
+                true, 'foo', 'static', false, 0, ''
+            ),
+            array(
+                'static void foo()',
+                true, 'foo', 'void', true, 0, ''
+            ),
+            array(
+                'static static foo()',
+                true, 'foo', 'static', true, 0, ''
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ParamTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ParamTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ParamTagTest.php	(revision 57)
@@ -1,118 +1,118 @@
-<?php
-/**
- * phpDocumentor Param tag test.
- * 
- * PHP version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\ParamTag
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class ParamTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\ParamTag can
-     * understand the @param DocBlock.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $extractedType
-     * @param string $extractedTypes
-     * @param string $extractedVarName
-     * @param string $extractedDescription
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ParamTag
-     * @dataProvider provideDataForConstructor
-     *
-     * @return void
-     */
-    public function testConstructorParsesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $extractedType,
-        $extractedTypes,
-        $extractedVarName,
-        $extractedDescription
-    ) {
-        $tag = new ParamTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($extractedType, $tag->getType());
-        $this->assertEquals($extractedTypes, $tag->getTypes());
-        $this->assertEquals($extractedVarName, $tag->getVariableName());
-        $this->assertEquals($extractedDescription, $tag->getDescription());
-    }
-
-    /**
-     * Data provider for testConstructorParsesInputsIntoCorrectFields()
-     *
-     * @return array
-     */
-    public function provideDataForConstructor()
-    {
-        return array(
-            array('param', 'int', 'int', array('int'), '', ''),
-            array('param', '$bob', '', array(), '$bob', ''),
-            array(
-                'param',
-                'int Number of bobs',
-                'int',
-                array('int'),
-                '',
-                'Number of bobs'
-            ),
-            array(
-                'param',
-                'int $bob',
-                'int',
-                array('int'),
-                '$bob',
-                ''
-            ),
-            array(
-                'param',
-                'int $bob Number of bobs',
-                'int',
-                array('int'),
-                '$bob',
-                'Number of bobs'
-            ),
-            array(
-                'param',
-                "int Description \n on multiple lines",
-                'int',
-                array('int'),
-                '',
-                "Description \n on multiple lines"
-            ),
-            array(
-                'param',
-                "int \n\$bob Variable name on a new line",
-                'int',
-                array('int'),
-                '$bob',
-                "Variable name on a new line"
-            ),
-            array(
-                'param',
-                "\nint \$bob Type on a new line",
-                'int',
-                array('int'),
-                '$bob',
-                "Type on a new line"
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Param tag test.
+ * 
+ * PHP version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\ParamTag
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class ParamTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\ParamTag can
+     * understand the @param DocBlock.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $extractedType
+     * @param string $extractedTypes
+     * @param string $extractedVarName
+     * @param string $extractedDescription
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ParamTag
+     * @dataProvider provideDataForConstructor
+     *
+     * @return void
+     */
+    public function testConstructorParsesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $extractedType,
+        $extractedTypes,
+        $extractedVarName,
+        $extractedDescription
+    ) {
+        $tag = new ParamTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($extractedType, $tag->getType());
+        $this->assertEquals($extractedTypes, $tag->getTypes());
+        $this->assertEquals($extractedVarName, $tag->getVariableName());
+        $this->assertEquals($extractedDescription, $tag->getDescription());
+    }
+
+    /**
+     * Data provider for testConstructorParsesInputsIntoCorrectFields()
+     *
+     * @return array
+     */
+    public function provideDataForConstructor()
+    {
+        return array(
+            array('param', 'int', 'int', array('int'), '', ''),
+            array('param', '$bob', '', array(), '$bob', ''),
+            array(
+                'param',
+                'int Number of bobs',
+                'int',
+                array('int'),
+                '',
+                'Number of bobs'
+            ),
+            array(
+                'param',
+                'int $bob',
+                'int',
+                array('int'),
+                '$bob',
+                ''
+            ),
+            array(
+                'param',
+                'int $bob Number of bobs',
+                'int',
+                array('int'),
+                '$bob',
+                'Number of bobs'
+            ),
+            array(
+                'param',
+                "int Description \n on multiple lines",
+                'int',
+                array('int'),
+                '',
+                "Description \n on multiple lines"
+            ),
+            array(
+                'param',
+                "int \n\$bob Variable name on a new line",
+                'int',
+                array('int'),
+                '$bob',
+                "Variable name on a new line"
+            ),
+            array(
+                'param',
+                "\nint \$bob Type on a new line",
+                'int',
+                array('int'),
+                '$bob',
+                "Type on a new line"
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ReturnTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ReturnTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ReturnTagTest.php	(revision 57)
@@ -1,102 +1,102 @@
-<?php
-/**
- * phpDocumentor Return tag test.
- * 
- * PHP version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\ReturnTag
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class ReturnTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\ReturnTag can
-     * understand the @return DocBlock.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $extractedType
-     * @param string $extractedTypes
-     * @param string $extractedDescription
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ReturnTag
-     * @dataProvider provideDataForConstructor
-     *
-     * @return void
-     */
-    public function testConstructorParsesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $extractedType,
-        $extractedTypes,
-        $extractedDescription
-    ) {
-        $tag = new ReturnTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($extractedType, $tag->getType());
-        $this->assertEquals($extractedTypes, $tag->getTypes());
-        $this->assertEquals($extractedDescription, $tag->getDescription());
-    }
-
-    /**
-     * Data provider for testConstructorParsesInputsIntoCorrectFields()
-     *
-     * @return array
-     */
-    public function provideDataForConstructor()
-    {
-        return array(
-            array('return', '', '', array(), ''),
-            array('return', 'int', 'int', array('int'), ''),
-            array(
-                'return',
-                'int Number of Bobs',
-                'int',
-                array('int'),
-                'Number of Bobs'
-            ),
-            array(
-                'return',
-                'int|double Number of Bobs',
-                'int|double',
-                array('int', 'double'),
-                'Number of Bobs'
-            ),
-            array(
-                'return',
-                "int Number of \n Bobs",
-                'int',
-                array('int'),
-                "Number of \n Bobs"
-            ),
-            array(
-                'return',
-                " int Number of Bobs",
-                'int',
-                array('int'),
-                "Number of Bobs"
-            ),
-            array(
-                'return',
-                "int\nNumber of Bobs",
-                'int',
-                array('int'),
-                "Number of Bobs"
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Return tag test.
+ * 
+ * PHP version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\ReturnTag
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class ReturnTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\ReturnTag can
+     * understand the @return DocBlock.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $extractedType
+     * @param string $extractedTypes
+     * @param string $extractedDescription
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ReturnTag
+     * @dataProvider provideDataForConstructor
+     *
+     * @return void
+     */
+    public function testConstructorParsesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $extractedType,
+        $extractedTypes,
+        $extractedDescription
+    ) {
+        $tag = new ReturnTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($extractedType, $tag->getType());
+        $this->assertEquals($extractedTypes, $tag->getTypes());
+        $this->assertEquals($extractedDescription, $tag->getDescription());
+    }
+
+    /**
+     * Data provider for testConstructorParsesInputsIntoCorrectFields()
+     *
+     * @return array
+     */
+    public function provideDataForConstructor()
+    {
+        return array(
+            array('return', '', '', array(), ''),
+            array('return', 'int', 'int', array('int'), ''),
+            array(
+                'return',
+                'int Number of Bobs',
+                'int',
+                array('int'),
+                'Number of Bobs'
+            ),
+            array(
+                'return',
+                'int|double Number of Bobs',
+                'int|double',
+                array('int', 'double'),
+                'Number of Bobs'
+            ),
+            array(
+                'return',
+                "int Number of \n Bobs",
+                'int',
+                array('int'),
+                "Number of \n Bobs"
+            ),
+            array(
+                'return',
+                " int Number of Bobs",
+                'int',
+                array('int'),
+                "Number of Bobs"
+            ),
+            array(
+                'return',
+                "int\nNumber of Bobs",
+                'int',
+                array('int'),
+                "Number of Bobs"
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SeeTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SeeTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SeeTagTest.php	(revision 57)
@@ -1,86 +1,86 @@
-<?php
-/**
- * phpDocumentor See Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\SeeTag
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class SeeTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the phpDocumentor_Reflection_DocBlock_Tag_See can create a link
-     * for the @see doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exReference
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\SeeTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exReference
-    ) {
-        $tag = new SeeTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exReference, $tag->getReference());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exReference
-        return array(
-            array(
-                'see',
-                'Foo::bar()',
-                'Foo::bar()',
-                '',
-                'Foo::bar()'
-            ),
-            array(
-                'see',
-                'Foo::bar() Testing',
-                'Foo::bar() Testing',
-                'Testing',
-                'Foo::bar()',
-            ),
-            array(
-                'see',
-                'Foo::bar() Testing comments',
-                'Foo::bar() Testing comments',
-                'Testing comments',
-                'Foo::bar()',
-            ),
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor See Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\SeeTag
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class SeeTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the phpDocumentor_Reflection_DocBlock_Tag_See can create a link
+     * for the @see doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exReference
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\SeeTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exReference
+    ) {
+        $tag = new SeeTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exReference, $tag->getReference());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exReference
+        return array(
+            array(
+                'see',
+                'Foo::bar()',
+                'Foo::bar()',
+                '',
+                'Foo::bar()'
+            ),
+            array(
+                'see',
+                'Foo::bar() Testing',
+                'Foo::bar() Testing',
+                'Testing',
+                'Foo::bar()',
+            ),
+            array(
+                'see',
+                'Foo::bar() Testing comments',
+                'Foo::bar() Testing comments',
+                'Testing comments',
+                'Foo::bar()',
+            ),
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SinceTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SinceTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SinceTagTest.php	(revision 57)
@@ -1,115 +1,115 @@
-<?php
-/**
- * phpDocumentor Since Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\SinceTag
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class SinceTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
-     * a link for the @since doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exDescription
-     * @param string $exVersion
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\SinceTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exVersion
-    ) {
-        $tag = new SinceTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exVersion, $tag->getVersion());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exVersion
-        return array(
-            array(
-                'since',
-                '1.0 First release.',
-                '1.0 First release.',
-                'First release.',
-                '1.0'
-            ),
-            array(
-                'since',
-                "1.0\nFirst release.",
-                "1.0\nFirst release.",
-                'First release.',
-                '1.0'
-            ),
-            array(
-                'since',
-                "1.0\nFirst\nrelease.",
-                "1.0\nFirst\nrelease.",
-                "First\nrelease.",
-                '1.0'
-            ),
-            array(
-                'since',
-                'Unfinished release',
-                'Unfinished release',
-                'Unfinished release',
-                ''
-            ),
-            array(
-                'since',
-                '1.0',
-                '1.0',
-                '',
-                '1.0'
-            ),
-            array(
-                'since',
-                'GIT: $Id$',
-                'GIT: $Id$',
-                '',
-                'GIT: $Id$'
-            ),
-            array(
-                'since',
-                'GIT: $Id$ Dev build',
-                'GIT: $Id$ Dev build',
-                'Dev build',
-                'GIT: $Id$'
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Since Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\SinceTag
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class SinceTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
+     * a link for the @since doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exDescription
+     * @param string $exVersion
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\SinceTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exVersion
+    ) {
+        $tag = new SinceTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exVersion, $tag->getVersion());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exVersion
+        return array(
+            array(
+                'since',
+                '1.0 First release.',
+                '1.0 First release.',
+                'First release.',
+                '1.0'
+            ),
+            array(
+                'since',
+                "1.0\nFirst release.",
+                "1.0\nFirst release.",
+                'First release.',
+                '1.0'
+            ),
+            array(
+                'since',
+                "1.0\nFirst\nrelease.",
+                "1.0\nFirst\nrelease.",
+                "First\nrelease.",
+                '1.0'
+            ),
+            array(
+                'since',
+                'Unfinished release',
+                'Unfinished release',
+                'Unfinished release',
+                ''
+            ),
+            array(
+                'since',
+                '1.0',
+                '1.0',
+                '',
+                '1.0'
+            ),
+            array(
+                'since',
+                'GIT: $Id$',
+                'GIT: $Id$',
+                '',
+                'GIT: $Id$'
+            ),
+            array(
+                'since',
+                'GIT: $Id$ Dev build',
+                'GIT: $Id$ Dev build',
+                'Dev build',
+                'GIT: $Id$'
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SourceTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SourceTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/SourceTagTest.php	(revision 57)
@@ -1,116 +1,116 @@
-<?php
-/**
- * phpDocumentor Source Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\SourceTag
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class SourceTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\SourceTag can
-     * understand the @source DocBlock.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exStartingLine
-     * @param string $exLineCount
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\SourceTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exStartingLine,
-        $exLineCount
-    ) {
-        $tag = new SourceTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exStartingLine, $tag->getStartingLine());
-        $this->assertEquals($exLineCount, $tag->getLineCount());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exStartingLine, $exLineCount
-        return array(
-            array(
-                'source',
-                '2',
-                '2',
-                '',
-                2,
-                null
-            ),
-            array(
-                'source',
-                'Testing',
-                'Testing',
-                'Testing',
-                1,
-                null
-            ),
-            array(
-                'source',
-                '2 Testing',
-                '2 Testing',
-                'Testing',
-                2,
-                null
-            ),
-            array(
-                'source',
-                '2 3 Testing comments',
-                '2 3 Testing comments',
-                'Testing comments',
-                2,
-                3
-            ),
-            array(
-                'source',
-                '2 -1 Testing comments',
-                '2 -1 Testing comments',
-                '-1 Testing comments',
-                2,
-                null
-            ),
-            array(
-                'source',
-                '-1 1 Testing comments',
-                '-1 1 Testing comments',
-                '-1 1 Testing comments',
-                1,
-                null
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Source Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\SourceTag
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class SourceTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\SourceTag can
+     * understand the @source DocBlock.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exStartingLine
+     * @param string $exLineCount
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\SourceTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exStartingLine,
+        $exLineCount
+    ) {
+        $tag = new SourceTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exStartingLine, $tag->getStartingLine());
+        $this->assertEquals($exLineCount, $tag->getLineCount());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exStartingLine, $exLineCount
+        return array(
+            array(
+                'source',
+                '2',
+                '2',
+                '',
+                2,
+                null
+            ),
+            array(
+                'source',
+                'Testing',
+                'Testing',
+                'Testing',
+                1,
+                null
+            ),
+            array(
+                'source',
+                '2 Testing',
+                '2 Testing',
+                'Testing',
+                2,
+                null
+            ),
+            array(
+                'source',
+                '2 3 Testing comments',
+                '2 3 Testing comments',
+                'Testing comments',
+                2,
+                3
+            ),
+            array(
+                'source',
+                '2 -1 Testing comments',
+                '2 -1 Testing comments',
+                '-1 Testing comments',
+                2,
+                null
+            ),
+            array(
+                'source',
+                '-1 1 Testing comments',
+                '-1 1 Testing comments',
+                '-1 1 Testing comments',
+                1,
+                null
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ThrowsTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ThrowsTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/ThrowsTagTest.php	(revision 57)
@@ -1,102 +1,102 @@
-<?php
-/**
- * phpDocumentor Throws tag test.
- * 
- * PHP version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\ThrowsTag
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class ThrowsTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag can
-     * understand the @throws DocBlock.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $extractedType
-     * @param string $extractedTypes
-     * @param string $extractedDescription
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag
-     * @dataProvider provideDataForConstructor
-     *
-     * @return void
-     */
-    public function testConstructorParsesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $extractedType,
-        $extractedTypes,
-        $extractedDescription
-    ) {
-        $tag = new ThrowsTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($extractedType, $tag->getType());
-        $this->assertEquals($extractedTypes, $tag->getTypes());
-        $this->assertEquals($extractedDescription, $tag->getDescription());
-    }
-
-    /**
-     * Data provider for testConstructorParsesInputsIntoCorrectFields()
-     *
-     * @return array
-     */
-    public function provideDataForConstructor()
-    {
-        return array(
-            array('throws', '', '', array(), ''),
-            array('throws', 'int', 'int', array('int'), ''),
-            array(
-                'throws',
-                'int Number of Bobs',
-                'int',
-                array('int'),
-                'Number of Bobs'
-            ),
-            array(
-                'throws',
-                'int|double Number of Bobs',
-                'int|double',
-                array('int', 'double'),
-                'Number of Bobs'
-            ),
-            array(
-                'throws',
-                "int Number of \n Bobs",
-                'int',
-                array('int'),
-                "Number of \n Bobs"
-            ),
-            array(
-                'throws',
-                " int Number of Bobs",
-                'int',
-                array('int'),
-                "Number of Bobs"
-            ),
-            array(
-                'throws',
-                "int\nNumber of Bobs",
-                'int',
-                array('int'),
-                "Number of Bobs"
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Throws tag test.
+ * 
+ * PHP version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\ThrowsTag
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class ThrowsTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag can
+     * understand the @throws DocBlock.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $extractedType
+     * @param string $extractedTypes
+     * @param string $extractedDescription
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\ThrowsTag
+     * @dataProvider provideDataForConstructor
+     *
+     * @return void
+     */
+    public function testConstructorParsesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $extractedType,
+        $extractedTypes,
+        $extractedDescription
+    ) {
+        $tag = new ThrowsTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($extractedType, $tag->getType());
+        $this->assertEquals($extractedTypes, $tag->getTypes());
+        $this->assertEquals($extractedDescription, $tag->getDescription());
+    }
+
+    /**
+     * Data provider for testConstructorParsesInputsIntoCorrectFields()
+     *
+     * @return array
+     */
+    public function provideDataForConstructor()
+    {
+        return array(
+            array('throws', '', '', array(), ''),
+            array('throws', 'int', 'int', array('int'), ''),
+            array(
+                'throws',
+                'int Number of Bobs',
+                'int',
+                array('int'),
+                'Number of Bobs'
+            ),
+            array(
+                'throws',
+                'int|double Number of Bobs',
+                'int|double',
+                array('int', 'double'),
+                'Number of Bobs'
+            ),
+            array(
+                'throws',
+                "int Number of \n Bobs",
+                'int',
+                array('int'),
+                "Number of \n Bobs"
+            ),
+            array(
+                'throws',
+                " int Number of Bobs",
+                'int',
+                array('int'),
+                "Number of Bobs"
+            ),
+            array(
+                'throws',
+                "int\nNumber of Bobs",
+                'int',
+                array('int'),
+                "Number of Bobs"
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/UsesTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/UsesTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/UsesTagTest.php	(revision 57)
@@ -1,86 +1,86 @@
-<?php
-/**
- * phpDocumentor Uses Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\UsesTag
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class UsesTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\UsesTag can create
-     * a link for the @uses doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exReference
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\UsesTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exReference
-    ) {
-        $tag = new UsesTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exReference, $tag->getReference());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exReference
-        return array(
-            array(
-                'uses',
-                'Foo::bar()',
-                'Foo::bar()',
-                '',
-                'Foo::bar()'
-            ),
-            array(
-                'uses',
-                'Foo::bar() Testing',
-                'Foo::bar() Testing',
-                'Testing',
-                'Foo::bar()',
-            ),
-            array(
-                'uses',
-                'Foo::bar() Testing comments',
-                'Foo::bar() Testing comments',
-                'Testing comments',
-                'Foo::bar()',
-            ),
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Uses Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\UsesTag
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class UsesTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\UsesTag can create
+     * a link for the @uses doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exReference
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\UsesTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exReference
+    ) {
+        $tag = new UsesTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exReference, $tag->getReference());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exReference
+        return array(
+            array(
+                'uses',
+                'Foo::bar()',
+                'Foo::bar()',
+                '',
+                'Foo::bar()'
+            ),
+            array(
+                'uses',
+                'Foo::bar() Testing',
+                'Foo::bar() Testing',
+                'Testing',
+                'Foo::bar()',
+            ),
+            array(
+                'uses',
+                'Foo::bar() Testing comments',
+                'Foo::bar() Testing comments',
+                'Testing comments',
+                'Foo::bar()',
+            ),
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/VarTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/VarTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/VarTagTest.php	(revision 57)
@@ -1,94 +1,94 @@
-<?php
-/**
- * phpDocumentor Var Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\VarTag
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class VarTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\VarTag can
-     * understand the @var doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exType
-     * @param string $exVariable
-     * @param string $exDescription
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\VarTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exType,
-        $exVariable,
-        $exDescription
-    ) {
-        $tag = new VarTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exType, $tag->getType());
-        $this->assertEquals($exVariable, $tag->getVariableName());
-        $this->assertEquals($exDescription, $tag->getDescription());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exType, $exVariable, $exDescription
-        return array(
-            array(
-                'var',
-                'int',
-                'int',
-                '',
-                ''
-            ),
-            array(
-                'var',
-                'int $bob',
-                'int',
-                '$bob',
-                ''
-            ),
-            array(
-                'var',
-                'int $bob Number of bobs',
-                'int',
-                '$bob',
-                'Number of bobs'
-            ),
-            array(
-                'var',
-                '',
-                '',
-                '',
-                ''
-            ),
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Var Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\VarTag
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class VarTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\VarTag can
+     * understand the @var doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exType
+     * @param string $exVariable
+     * @param string $exDescription
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\VarTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exType,
+        $exVariable,
+        $exDescription
+    ) {
+        $tag = new VarTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exType, $tag->getType());
+        $this->assertEquals($exVariable, $tag->getVariableName());
+        $this->assertEquals($exDescription, $tag->getDescription());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exType, $exVariable, $exDescription
+        return array(
+            array(
+                'var',
+                'int',
+                'int',
+                '',
+                ''
+            ),
+            array(
+                'var',
+                'int $bob',
+                'int',
+                '$bob',
+                ''
+            ),
+            array(
+                'var',
+                'int $bob Number of bobs',
+                'int',
+                '$bob',
+                'Number of bobs'
+            ),
+            array(
+                'var',
+                '',
+                '',
+                '',
+                ''
+            ),
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/VersionTagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/VersionTagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Tag/VersionTagTest.php	(revision 57)
@@ -1,115 +1,115 @@
-<?php
-/**
- * phpDocumentor Version Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Tag;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\VersionTag
- *
- * @author    Vasil Rangelov <boen.robot@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class VersionTagTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
-     * a link for the @version doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exContent
-     * @param string $exDescription
-     * @param string $exVersion
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag\VersionTag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exContent,
-        $exDescription,
-        $exVersion
-    ) {
-        $tag = new VersionTag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($exContent, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-        $this->assertEquals($exVersion, $tag->getVersion());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exContent, $exDescription, $exVersion
-        return array(
-            array(
-                'version',
-                '1.0 First release.',
-                '1.0 First release.',
-                'First release.',
-                '1.0'
-            ),
-            array(
-                'version',
-                "1.0\nFirst release.",
-                "1.0\nFirst release.",
-                'First release.',
-                '1.0'
-            ),
-            array(
-                'version',
-                "1.0\nFirst\nrelease.",
-                "1.0\nFirst\nrelease.",
-                "First\nrelease.",
-                '1.0'
-            ),
-            array(
-                'version',
-                'Unfinished release',
-                'Unfinished release',
-                'Unfinished release',
-                ''
-            ),
-            array(
-                'version',
-                '1.0',
-                '1.0',
-                '',
-                '1.0'
-            ),
-            array(
-                'version',
-                'GIT: $Id$',
-                'GIT: $Id$',
-                '',
-                'GIT: $Id$'
-            ),
-            array(
-                'version',
-                'GIT: $Id$ Dev build',
-                'GIT: $Id$ Dev build',
-                'Dev build',
-                'GIT: $Id$'
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Version Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Tag;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\VersionTag
+ *
+ * @author    Vasil Rangelov <boen.robot@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class VersionTagTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\LinkTag can create
+     * a link for the @version doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exContent
+     * @param string $exDescription
+     * @param string $exVersion
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag\VersionTag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exContent,
+        $exDescription,
+        $exVersion
+    ) {
+        $tag = new VersionTag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($exContent, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+        $this->assertEquals($exVersion, $tag->getVersion());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exContent, $exDescription, $exVersion
+        return array(
+            array(
+                'version',
+                '1.0 First release.',
+                '1.0 First release.',
+                'First release.',
+                '1.0'
+            ),
+            array(
+                'version',
+                "1.0\nFirst release.",
+                "1.0\nFirst release.",
+                'First release.',
+                '1.0'
+            ),
+            array(
+                'version',
+                "1.0\nFirst\nrelease.",
+                "1.0\nFirst\nrelease.",
+                "First\nrelease.",
+                '1.0'
+            ),
+            array(
+                'version',
+                'Unfinished release',
+                'Unfinished release',
+                'Unfinished release',
+                ''
+            ),
+            array(
+                'version',
+                '1.0',
+                '1.0',
+                '',
+                '1.0'
+            ),
+            array(
+                'version',
+                'GIT: $Id$',
+                'GIT: $Id$',
+                '',
+                'GIT: $Id$'
+            ),
+            array(
+                'version',
+                'GIT: $Id$ Dev build',
+                'GIT: $Id$ Dev build',
+                'Dev build',
+                'GIT: $Id$'
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/TagTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/TagTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/TagTest.php	(revision 57)
@@ -1,313 +1,313 @@
-<?php
-/**
- * phpDocumentor Var Tag Test
- * 
- * PHP version 5.3
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock;
-
-use phpDocumentor\Reflection\DocBlock;
-use phpDocumentor\Reflection\DocBlock\Context;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Tag\VarTag
- *
- * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class TagTest extends \PHPUnit_Framework_TestCase
-{
-    
-    /**
-     * @expectedException \InvalidArgumentException
-     * 
-     * @return void
-     */
-    public function testInvalidTagLine()
-    {
-        Tag::createInstance('Invalid tag line');
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
-     * 
-     * @return void
-     */
-    public function testTagHandlerUnregistration()
-    {
-        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
-        $tagPreUnreg = Tag::createInstance('@var mixed');
-        $this->assertInstanceOf(
-            $currentHandler,
-            $tagPreUnreg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPreUnreg
-        );
-
-        Tag::registerTagHandler('var', null);
-
-        $tagPostUnreg = Tag::createInstance('@var mixed');
-        $this->assertNotInstanceOf(
-            $currentHandler,
-            $tagPostUnreg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPostUnreg
-        );
-
-        Tag::registerTagHandler('var', $currentHandler);
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
-     * 
-     * @return void
-     */
-    public function testTagHandlerCorrectRegistration()
-    {
-        if (0 == ini_get('allow_url_include')) {
-            $this->markTestSkipped('"data" URIs for includes are required.');
-        }
-        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
-        $tagPreReg = Tag::createInstance('@var mixed');
-        $this->assertInstanceOf(
-            $currentHandler,
-            $tagPreReg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPreReg
-        );
-
-        include 'data:text/plain;base64,'. base64_encode(
-<<<TAG_HANDLER
-<?php
-    class MyTagHandler extends \phpDocumentor\Reflection\DocBlock\Tag {}
-TAG_HANDLER
-        );
-
-        $this->assertTrue(Tag::registerTagHandler('var', '\MyTagHandler'));
-
-        $tagPostReg = Tag::createInstance('@var mixed');
-        $this->assertNotInstanceOf(
-            $currentHandler,
-            $tagPostReg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPostReg
-        );
-        $this->assertInstanceOf(
-            '\MyTagHandler',
-            $tagPostReg
-        );
-
-        $this->assertTrue(Tag::registerTagHandler('var', $currentHandler));
-    }
-    
-    /**
-     * @depends testTagHandlerCorrectRegistration
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::createInstance
-     * 
-     * @return void
-     */
-    public function testNamespacedTagHandlerCorrectRegistration()
-    {
-        $tagPreReg = Tag::createInstance('@T something');
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPreReg
-        );
-        $this->assertNotInstanceOf(
-            '\MyTagHandler',
-            $tagPreReg
-        );
-
-        $this->assertTrue(
-            Tag::registerTagHandler('\MyNamespace\MyTag', '\MyTagHandler')
-        );
-
-        $tagPostReg = Tag::createInstance(
-            '@T something',
-            new DocBlock(
-                '',
-                new Context('', array('T' => '\MyNamespace\MyTag'))
-            )
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPostReg
-        );
-        $this->assertInstanceOf(
-            '\MyTagHandler',
-            $tagPostReg
-        );
-
-        $this->assertTrue(
-            Tag::registerTagHandler('\MyNamespace\MyTag', null)
-        );
-    }
-    
-    /**
-     * @depends testTagHandlerCorrectRegistration
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::createInstance
-     * 
-     * @return void
-     */
-    public function testNamespacedTagHandlerIncorrectRegistration()
-    {
-        $tagPreReg = Tag::createInstance('@T something');
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPreReg
-        );
-        $this->assertNotInstanceOf(
-            '\MyTagHandler',
-            $tagPreReg
-        );
-
-        $this->assertFalse(
-            Tag::registerTagHandler('MyNamespace\MyTag', '\MyTagHandler')
-        );
-
-        $tagPostReg = Tag::createInstance(
-            '@T something',
-            new DocBlock(
-                '',
-                new Context('', array('T' => '\MyNamespace\MyTag'))
-            )
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPostReg
-        );
-        $this->assertNotInstanceOf(
-            '\MyTagHandler',
-            $tagPostReg
-        );
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
-     * 
-     * @return void
-     */
-    public function testNonExistentTagHandlerRegistration()
-    {
-        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
-        $tagPreReg = Tag::createInstance('@var mixed');
-        $this->assertInstanceOf(
-            $currentHandler,
-            $tagPreReg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPreReg
-        );
-
-        $this->assertFalse(Tag::registerTagHandler('var', 'Non existent'));
-
-        $tagPostReg = Tag::createInstance('@var mixed');
-        $this->assertInstanceOf(
-            $currentHandler,
-            $tagPostReg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPostReg
-        );
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
-     * 
-     * @return void
-     */
-    public function testIncompatibleTagHandlerRegistration()
-    {
-        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
-        $tagPreReg = Tag::createInstance('@var mixed');
-        $this->assertInstanceOf(
-            $currentHandler,
-            $tagPreReg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPreReg
-        );
-
-        $this->assertFalse(
-            Tag::registerTagHandler('var', __NAMESPACE__ . '\TagTest')
-        );
-
-        $tagPostReg = Tag::createInstance('@var mixed');
-        $this->assertInstanceOf(
-            $currentHandler,
-            $tagPostReg
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\Tag',
-            $tagPostReg
-        );
-    }
-
-    /**
-     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\VarTag can
-     * understand the @var doc block.
-     *
-     * @param string $type
-     * @param string $content
-     * @param string $exDescription
-     *
-     * @covers \phpDocumentor\Reflection\DocBlock\Tag
-     * @dataProvider provideDataForConstuctor
-     *
-     * @return void
-     */
-    public function testConstructorParesInputsIntoCorrectFields(
-        $type,
-        $content,
-        $exDescription
-    ) {
-        $tag = new Tag($type, $content);
-
-        $this->assertEquals($type, $tag->getName());
-        $this->assertEquals($content, $tag->getContent());
-        $this->assertEquals($exDescription, $tag->getDescription());
-    }
-
-    /**
-     * Data provider for testConstructorParesInputsIntoCorrectFields
-     *
-     * @return array
-     */
-    public function provideDataForConstuctor()
-    {
-        // $type, $content, $exDescription
-        return array(
-            array(
-                'unknown',
-                'some content',
-                'some content',
-            ),
-            array(
-                'unknown',
-                '',
-                '',
-            )
-        );
-    }
-}
+<?php
+/**
+ * phpDocumentor Var Tag Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock;
+
+use phpDocumentor\Reflection\DocBlock;
+use phpDocumentor\Reflection\DocBlock\Context;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Tag\VarTag
+ *
+ * @author    Daniel O'Connor <daniel.oconnor@gmail.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class TagTest extends \PHPUnit_Framework_TestCase
+{
+    
+    /**
+     * @expectedException \InvalidArgumentException
+     * 
+     * @return void
+     */
+    public function testInvalidTagLine()
+    {
+        Tag::createInstance('Invalid tag line');
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
+     * 
+     * @return void
+     */
+    public function testTagHandlerUnregistration()
+    {
+        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
+        $tagPreUnreg = Tag::createInstance('@var mixed');
+        $this->assertInstanceOf(
+            $currentHandler,
+            $tagPreUnreg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPreUnreg
+        );
+
+        Tag::registerTagHandler('var', null);
+
+        $tagPostUnreg = Tag::createInstance('@var mixed');
+        $this->assertNotInstanceOf(
+            $currentHandler,
+            $tagPostUnreg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPostUnreg
+        );
+
+        Tag::registerTagHandler('var', $currentHandler);
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
+     * 
+     * @return void
+     */
+    public function testTagHandlerCorrectRegistration()
+    {
+        if (0 == ini_get('allow_url_include')) {
+            $this->markTestSkipped('"data" URIs for includes are required.');
+        }
+        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
+        $tagPreReg = Tag::createInstance('@var mixed');
+        $this->assertInstanceOf(
+            $currentHandler,
+            $tagPreReg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPreReg
+        );
+
+        include 'data:text/plain;base64,'. base64_encode(
+<<<TAG_HANDLER
+<?php
+    class MyTagHandler extends \phpDocumentor\Reflection\DocBlock\Tag {}
+TAG_HANDLER
+        );
+
+        $this->assertTrue(Tag::registerTagHandler('var', '\MyTagHandler'));
+
+        $tagPostReg = Tag::createInstance('@var mixed');
+        $this->assertNotInstanceOf(
+            $currentHandler,
+            $tagPostReg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPostReg
+        );
+        $this->assertInstanceOf(
+            '\MyTagHandler',
+            $tagPostReg
+        );
+
+        $this->assertTrue(Tag::registerTagHandler('var', $currentHandler));
+    }
+    
+    /**
+     * @depends testTagHandlerCorrectRegistration
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::createInstance
+     * 
+     * @return void
+     */
+    public function testNamespacedTagHandlerCorrectRegistration()
+    {
+        $tagPreReg = Tag::createInstance('@T something');
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPreReg
+        );
+        $this->assertNotInstanceOf(
+            '\MyTagHandler',
+            $tagPreReg
+        );
+
+        $this->assertTrue(
+            Tag::registerTagHandler('\MyNamespace\MyTag', '\MyTagHandler')
+        );
+
+        $tagPostReg = Tag::createInstance(
+            '@T something',
+            new DocBlock(
+                '',
+                new Context('', array('T' => '\MyNamespace\MyTag'))
+            )
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPostReg
+        );
+        $this->assertInstanceOf(
+            '\MyTagHandler',
+            $tagPostReg
+        );
+
+        $this->assertTrue(
+            Tag::registerTagHandler('\MyNamespace\MyTag', null)
+        );
+    }
+    
+    /**
+     * @depends testTagHandlerCorrectRegistration
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::createInstance
+     * 
+     * @return void
+     */
+    public function testNamespacedTagHandlerIncorrectRegistration()
+    {
+        $tagPreReg = Tag::createInstance('@T something');
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPreReg
+        );
+        $this->assertNotInstanceOf(
+            '\MyTagHandler',
+            $tagPreReg
+        );
+
+        $this->assertFalse(
+            Tag::registerTagHandler('MyNamespace\MyTag', '\MyTagHandler')
+        );
+
+        $tagPostReg = Tag::createInstance(
+            '@T something',
+            new DocBlock(
+                '',
+                new Context('', array('T' => '\MyNamespace\MyTag'))
+            )
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPostReg
+        );
+        $this->assertNotInstanceOf(
+            '\MyTagHandler',
+            $tagPostReg
+        );
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
+     * 
+     * @return void
+     */
+    public function testNonExistentTagHandlerRegistration()
+    {
+        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
+        $tagPreReg = Tag::createInstance('@var mixed');
+        $this->assertInstanceOf(
+            $currentHandler,
+            $tagPreReg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPreReg
+        );
+
+        $this->assertFalse(Tag::registerTagHandler('var', 'Non existent'));
+
+        $tagPostReg = Tag::createInstance('@var mixed');
+        $this->assertInstanceOf(
+            $currentHandler,
+            $tagPostReg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPostReg
+        );
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag::registerTagHandler
+     * 
+     * @return void
+     */
+    public function testIncompatibleTagHandlerRegistration()
+    {
+        $currentHandler = __NAMESPACE__ . '\Tag\VarTag';
+        $tagPreReg = Tag::createInstance('@var mixed');
+        $this->assertInstanceOf(
+            $currentHandler,
+            $tagPreReg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPreReg
+        );
+
+        $this->assertFalse(
+            Tag::registerTagHandler('var', __NAMESPACE__ . '\TagTest')
+        );
+
+        $tagPostReg = Tag::createInstance('@var mixed');
+        $this->assertInstanceOf(
+            $currentHandler,
+            $tagPostReg
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\Tag',
+            $tagPostReg
+        );
+    }
+
+    /**
+     * Test that the \phpDocumentor\Reflection\DocBlock\Tag\VarTag can
+     * understand the @var doc block.
+     *
+     * @param string $type
+     * @param string $content
+     * @param string $exDescription
+     *
+     * @covers \phpDocumentor\Reflection\DocBlock\Tag
+     * @dataProvider provideDataForConstuctor
+     *
+     * @return void
+     */
+    public function testConstructorParesInputsIntoCorrectFields(
+        $type,
+        $content,
+        $exDescription
+    ) {
+        $tag = new Tag($type, $content);
+
+        $this->assertEquals($type, $tag->getName());
+        $this->assertEquals($content, $tag->getContent());
+        $this->assertEquals($exDescription, $tag->getDescription());
+    }
+
+    /**
+     * Data provider for testConstructorParesInputsIntoCorrectFields
+     *
+     * @return array
+     */
+    public function provideDataForConstuctor()
+    {
+        // $type, $content, $exDescription
+        return array(
+            array(
+                'unknown',
+                'some content',
+                'some content',
+            ),
+            array(
+                'unknown',
+                '',
+                '',
+            )
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Type/CollectionTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Type/CollectionTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlock/Type/CollectionTest.php	(revision 57)
@@ -1,195 +1,253 @@
-<?php
-/**
- * phpDocumentor Collection Test
- * 
- * PHP version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection\DocBlock\Type;
-
-use phpDocumentor\Reflection\DocBlock\Context;
-
-/**
- * Test class for \phpDocumentor\Reflection\DocBlock\Type\Collection
- * 
- * @covers phpDocumentor\Reflection\DocBlock\Type\Collection
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class CollectionTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::getContext
-     * 
-     * @return void
-     */
-    public function testConstruct()
-    {
-        $collection = new Collection();
-        $this->assertCount(0, $collection);
-        $this->assertEquals('', $collection->getContext()->getNamespace());
-        $this->assertCount(0, $collection->getContext()->getNamespaceAliases());
-    }
-
-    /**
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
-     * 
-     * @return void
-     */
-    public function testConstructWithTypes()
-    {
-        $collection = new Collection(array('integer', 'string'));
-        $this->assertCount(2, $collection);
-    }
-
-    /**
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
-     * 
-     * @return void
-     */
-    public function testConstructWithNamespace()
-    {
-        $collection = new Collection(array(), new Context('\My\Space'));
-        $this->assertEquals('My\Space', $collection->getContext()->getNamespace());
-
-        $collection = new Collection(array(), new Context('My\Space'));
-        $this->assertEquals('My\Space', $collection->getContext()->getNamespace());
-
-        $collection = new Collection(array(), null);
-        $this->assertEquals('', $collection->getContext()->getNamespace());
-    }
-
-    /**
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
-     * 
-     * @return void
-     */
-    public function testConstructWithNamespaceAliases()
-    {
-        $fixture = array('a' => 'b');
-        $collection = new Collection(array(), new Context(null, $fixture));
-        $this->assertEquals(
-            array('a' => '\b'),
-            $collection->getContext()->getNamespaceAliases()
-        );
-    }
-
-    /**
-     * @param string $fixture
-     * @param array  $expected
-     *
-     * @dataProvider provideTypesToExpand
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
-     * 
-     * @return void
-     */
-    public function testAdd($fixture, $expected)
-    {
-        $collection = new Collection(
-            array(),
-            new Context('\My\Space', array('Alias' => '\My\Space\Aliasing'))
-        );
-        $collection->add($fixture);
-
-        $this->assertSame($expected, $collection->getArrayCopy());
-    }
-
-    /**
-     * @param string $fixture
-     * @param array  $expected
-     *
-     * @dataProvider provideTypesToExpandWithoutNamespace
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
-     * 
-     * @return void
-     */
-    public function testAddWithoutNamespace($fixture, $expected)
-    {
-        $collection = new Collection(
-            array(),
-            new Context(null, array('Alias' => '\My\Space\Aliasing'))
-        );
-        $collection->add($fixture);
-
-        $this->assertSame($expected, $collection->getArrayCopy());
-    }
-
-    /**
-     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
-     * @expectedException InvalidArgumentException
-     * 
-     * @return void
-     */
-    public function testAddWithInvalidArgument()
-    {
-        $collection = new Collection();
-        $collection->add(array());
-    }
-
-    /**
-     * Returns the types and their expected values to test the retrieval of
-     * types.
-     *
-     * @param string $method    Name of the method consuming this data provider.
-     * @param string $namespace Name of the namespace to user as basis.
-     *
-     * @return string[]
-     */
-    public function provideTypesToExpand($method, $namespace = '\My\Space\\')
-    {
-        return array(
-            array('', array()),
-            array(' ', array()),
-            array('int', array('int')),
-            array('int ', array('int')),
-            array('string', array('string')),
-            array('DocBlock', array($namespace.'DocBlock')),
-            array('DocBlock[]', array($namespace.'DocBlock[]')),
-            array(' DocBlock ', array($namespace.'DocBlock')),
-            array('\My\Space\DocBlock', array('\My\Space\DocBlock')),
-            array('Alias\DocBlock', array('\My\Space\Aliasing\DocBlock')),
-            array(
-                'DocBlock|Tag',
-                array($namespace .'DocBlock', $namespace .'Tag')
-            ),
-            array(
-                'DocBlock|null',
-                array($namespace.'DocBlock', 'null')
-            ),
-            array(
-                '\My\Space\DocBlock|Tag',
-                array('\My\Space\DocBlock', $namespace.'Tag')
-            ),
-            array(
-                'DocBlock[]|null',
-                array($namespace.'DocBlock[]', 'null')
-            ),
-            array(
-                'DocBlock[]|int[]',
-                array($namespace.'DocBlock[]', 'int[]')
-            ),
-        );
-    }
-
-    /**
-     * Returns the types and their expected values to test the retrieval of
-     * types when no namespace is available.
-     *
-     * @param string $method Name of the method consuming this data provider.
-     *
-     * @return string[]
-     */
-    public function provideTypesToExpandWithoutNamespace($method)
-    {
-        return $this->provideTypesToExpand($method, '\\');
-    }
-}
+<?php
+/**
+ * phpDocumentor Collection Test
+ * 
+ * PHP version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection\DocBlock\Type;
+
+use phpDocumentor\Reflection\DocBlock\Context;
+
+/**
+ * Test class for \phpDocumentor\Reflection\DocBlock\Type\Collection
+ * 
+ * @covers phpDocumentor\Reflection\DocBlock\Type\Collection
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class CollectionTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::getContext
+     * 
+     * @return void
+     */
+    public function testConstruct()
+    {
+        $collection = new Collection();
+        $this->assertCount(0, $collection);
+        $this->assertEquals('', $collection->getContext()->getNamespace());
+        $this->assertCount(0, $collection->getContext()->getNamespaceAliases());
+    }
+
+    /**
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
+     * 
+     * @return void
+     */
+    public function testConstructWithTypes()
+    {
+        $collection = new Collection(array('integer', 'string'));
+        $this->assertCount(2, $collection);
+    }
+
+    /**
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
+     * 
+     * @return void
+     */
+    public function testConstructWithNamespace()
+    {
+        $collection = new Collection(array(), new Context('\My\Space'));
+        $this->assertEquals('My\Space', $collection->getContext()->getNamespace());
+
+        $collection = new Collection(array(), new Context('My\Space'));
+        $this->assertEquals('My\Space', $collection->getContext()->getNamespace());
+
+        $collection = new Collection(array(), null);
+        $this->assertEquals('', $collection->getContext()->getNamespace());
+    }
+
+    /**
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::__construct
+     * 
+     * @return void
+     */
+    public function testConstructWithNamespaceAliases()
+    {
+        $fixture = array('a' => 'b');
+        $collection = new Collection(array(), new Context(null, $fixture));
+        $this->assertEquals(
+            array('a' => '\b'),
+            $collection->getContext()->getNamespaceAliases()
+        );
+    }
+
+    /**
+     * @param string $fixture
+     * @param array  $expected
+     *
+     * @dataProvider provideTypesToExpand
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
+     * 
+     * @return void
+     */
+    public function testAdd($fixture, $expected)
+    {
+        $collection = new Collection(
+            array(),
+            new Context('\My\Space', array('Alias' => '\My\Space\Aliasing'))
+        );
+        $collection->add($fixture);
+
+        $this->assertSame($expected, $collection->getArrayCopy());
+    }
+
+    /**
+     * @param string $fixture
+     * @param array  $expected
+     *
+     * @dataProvider provideTypesToExpandWithoutNamespace
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
+     * 
+     * @return void
+     */
+    public function testAddWithoutNamespace($fixture, $expected)
+    {
+        $collection = new Collection(
+            array(),
+            new Context(null, array('Alias' => '\My\Space\Aliasing'))
+        );
+        $collection->add($fixture);
+
+        $this->assertSame($expected, $collection->getArrayCopy());
+    }
+
+    /**
+     * @param string $fixture
+     * @param array  $expected
+     *
+     * @dataProvider provideTypesToExpandWithPropertyOrMethod
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
+     *
+     * @return void
+     */
+    public function testAddMethodsAndProperties($fixture, $expected)
+    {
+        $collection = new Collection(
+            array(),
+            new Context(null, array('LinkDescriptor' => '\phpDocumentor\LinkDescriptor'))
+        );
+        $collection->add($fixture);
+
+        $this->assertSame($expected, $collection->getArrayCopy());
+    }
+
+    /**
+     * @covers phpDocumentor\Reflection\DocBlock\Type\Collection::add
+     * @expectedException InvalidArgumentException
+     * 
+     * @return void
+     */
+    public function testAddWithInvalidArgument()
+    {
+        $collection = new Collection();
+        $collection->add(array());
+    }
+
+    /**
+     * Returns the types and their expected values to test the retrieval of
+     * types.
+     *
+     * @param string $method    Name of the method consuming this data provider.
+     * @param string $namespace Name of the namespace to user as basis.
+     *
+     * @return string[]
+     */
+    public function provideTypesToExpand($method, $namespace = '\My\Space\\')
+    {
+        return array(
+            array('', array()),
+            array(' ', array()),
+            array('int', array('int')),
+            array('int ', array('int')),
+            array('string', array('string')),
+            array('DocBlock', array($namespace.'DocBlock')),
+            array('DocBlock[]', array($namespace.'DocBlock[]')),
+            array(' DocBlock ', array($namespace.'DocBlock')),
+            array('\My\Space\DocBlock', array('\My\Space\DocBlock')),
+            array('Alias\DocBlock', array('\My\Space\Aliasing\DocBlock')),
+            array(
+                'DocBlock|Tag',
+                array($namespace .'DocBlock', $namespace .'Tag')
+            ),
+            array(
+                'DocBlock|null',
+                array($namespace.'DocBlock', 'null')
+            ),
+            array(
+                '\My\Space\DocBlock|Tag',
+                array('\My\Space\DocBlock', $namespace.'Tag')
+            ),
+            array(
+                'DocBlock[]|null',
+                array($namespace.'DocBlock[]', 'null')
+            ),
+            array(
+                'DocBlock[]|int[]',
+                array($namespace.'DocBlock[]', 'int[]')
+            ),
+            array(
+                'LinkDescriptor::setLink()',
+                array($namespace.'LinkDescriptor::setLink()')
+            ),
+            array(
+                'Alias\LinkDescriptor::setLink()',
+                array('\My\Space\Aliasing\LinkDescriptor::setLink()')
+            ),
+        );
+    }
+
+    /**
+     * Returns the types and their expected values to test the retrieval of
+     * types when no namespace is available.
+     *
+     * @param string $method Name of the method consuming this data provider.
+     *
+     * @return string[]
+     */
+    public function provideTypesToExpandWithoutNamespace($method)
+    {
+        return $this->provideTypesToExpand($method, '\\');
+    }
+
+    /**
+     * Returns the method and property types and their expected values to test
+     * the retrieval of types.
+     *
+     * @param string $method Name of the method consuming this data provider.
+     *
+     * @return string[]
+     */
+    public function provideTypesToExpandWithPropertyOrMethod($method)
+    {
+        return array(
+            array(
+                'LinkDescriptor::setLink()',
+                array('\phpDocumentor\LinkDescriptor::setLink()')
+            ),
+            array(
+                'phpDocumentor\LinkDescriptor::setLink()',
+                array('\phpDocumentor\LinkDescriptor::setLink()')
+            ),
+            array(
+                'LinkDescriptor::$link',
+                array('\phpDocumentor\LinkDescriptor::$link')
+            ),
+            array(
+                'phpDocumentor\LinkDescriptor::$link',
+                array('\phpDocumentor\LinkDescriptor::$link')
+            ),
+        );
+    }
+}
Index: vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlockTest.php
===================================================================
--- vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlockTest.php	(revision 55)
+++ vendor/phpdocumentor/reflection-docblock/tests/phpDocumentor/Reflection/DocBlockTest.php	(revision 57)
@@ -1,337 +1,337 @@
-<?php
-/**
- * phpDocumentor DocBlock Test
- *
- * PHP Version 5.3
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-
-namespace phpDocumentor\Reflection;
-
-use phpDocumentor\Reflection\DocBlock\Context;
-use phpDocumentor\Reflection\DocBlock\Location;
-use phpDocumentor\Reflection\DocBlock\Tag\ReturnTag;
-
-/**
- * Test class for phpDocumentor\Reflection\DocBlock
- *
- * @author    Mike van Riel <mike.vanriel@naenius.com>
- * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
- * @license   http://www.opensource.org/licenses/mit-license.php MIT
- * @link      http://phpdoc.org
- */
-class DocBlockTest extends \PHPUnit_Framework_TestCase
-{
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock
-     * 
-     * @return void
-     */
-    public function testConstruct()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * This is a short description
- *
- * This is a long description
- *
- * @see \MyClass
- * @return void
- */
-DOCBLOCK;
-        $object = new DocBlock(
-            $fixture,
-            new Context('\MyNamespace', array('PHPDoc' => '\phpDocumentor')),
-            new Location(2)
-        );
-        $this->assertEquals(
-            'This is a short description',
-            $object->getShortDescription()
-        );
-        $this->assertEquals(
-            'This is a long description',
-            $object->getLongDescription()->getContents()
-        );
-        $this->assertCount(2, $object->getTags());
-        $this->assertTrue($object->hasTag('see'));
-        $this->assertTrue($object->hasTag('return'));
-        $this->assertFalse($object->hasTag('category'));
-        
-        $this->assertSame('MyNamespace', $object->getContext()->getNamespace());
-        $this->assertSame(
-            array('PHPDoc' => '\phpDocumentor'),
-            $object->getContext()->getNamespaceAliases()
-        );
-        $this->assertSame(2, $object->getLocation()->getLineNumber());
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock::splitDocBlock
-     *
-     * @return void
-     */
-    public function testConstructWithTagsOnly()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * @see \MyClass
- * @return void
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertEquals('', $object->getShortDescription());
-        $this->assertEquals('', $object->getLongDescription()->getContents());
-        $this->assertCount(2, $object->getTags());
-        $this->assertTrue($object->hasTag('see'));
-        $this->assertTrue($object->hasTag('return'));
-        $this->assertFalse($object->hasTag('category'));
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock::isTemplateStart
-     */
-    public function testIfStartOfTemplateIsDiscovered()
-    {
-        $fixture = <<<DOCBLOCK
-/**#@+
- * @see \MyClass
- * @return void
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertEquals('', $object->getShortDescription());
-        $this->assertEquals('', $object->getLongDescription()->getContents());
-        $this->assertCount(2, $object->getTags());
-        $this->assertTrue($object->hasTag('see'));
-        $this->assertTrue($object->hasTag('return'));
-        $this->assertFalse($object->hasTag('category'));
-        $this->assertTrue($object->isTemplateStart());
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock::isTemplateEnd
-     */
-    public function testIfEndOfTemplateIsDiscovered()
-    {
-        $fixture = <<<DOCBLOCK
-/**#@-*/
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertEquals('', $object->getShortDescription());
-        $this->assertEquals('', $object->getLongDescription()->getContents());
-        $this->assertTrue($object->isTemplateEnd());
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock::cleanInput
-     * 
-     * @return void
-     */
-    public function testConstructOneLiner()
-    {
-        $fixture = '/** Short description and nothing more. */';
-        $object = new DocBlock($fixture);
-        $this->assertEquals(
-            'Short description and nothing more.',
-            $object->getShortDescription()
-        );
-        $this->assertEquals('', $object->getLongDescription()->getContents());
-        $this->assertCount(0, $object->getTags());
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock::__construct
-     * 
-     * @return void
-     */
-    public function testConstructFromReflector()
-    {
-        $object = new DocBlock(new \ReflectionClass($this));
-        $this->assertEquals(
-            'Test class for phpDocumentor\Reflection\DocBlock',
-            $object->getShortDescription()
-        );
-        $this->assertEquals('', $object->getLongDescription()->getContents());
-        $this->assertCount(4, $object->getTags());
-        $this->assertTrue($object->hasTag('author'));
-        $this->assertTrue($object->hasTag('copyright'));
-        $this->assertTrue($object->hasTag('license'));
-        $this->assertTrue($object->hasTag('link'));
-        $this->assertFalse($object->hasTag('category'));
-    }
-
-    /**
-     * @expectedException \InvalidArgumentException
-     * 
-     * @return void
-     */
-    public function testExceptionOnInvalidObject()
-    {
-        new DocBlock($this);
-    }
-
-    public function testDotSeperation()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * This is a short description.
- * This is a long description.
- * This is a continuation of the long description.
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertEquals(
-            'This is a short description.',
-            $object->getShortDescription()
-        );
-        $this->assertEquals(
-            "This is a long description.\nThis is a continuation of the long "
-            ."description.",
-            $object->getLongDescription()->getContents()
-        );
-    }
-
-    /**
-     * @covers \phpDocumentor\Reflection\DocBlock::parseTags
-     * @expectedException \LogicException
-     * 
-     * @return void
-     */
-    public function testInvalidTagBlock()
-    {
-        if (0 == ini_get('allow_url_include')) {
-            $this->markTestSkipped('"data" URIs for includes are required.');
-        }
-
-        include 'data:text/plain;base64,'. base64_encode(
-            <<<DOCBLOCK_EXTENSION
-<?php
-class MyReflectionDocBlock extends \phpDocumentor\Reflection\DocBlock {
-    protected function splitDocBlock(\$comment) {
-        return array('', '', 'Invalid tag block');
-    }
-}
-DOCBLOCK_EXTENSION
-        );
-        new \MyReflectionDocBlock('');
-        
-    }
-
-    public function testTagCaseSensitivity()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * This is a short description.
- *
- * This is a long description.
- *
- * @method null something()
- * @Method({"GET", "POST"})
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertEquals(
-            'This is a short description.',
-            $object->getShortDescription()
-        );
-        $this->assertEquals(
-            'This is a long description.',
-            $object->getLongDescription()->getContents()
-        );
-        $tags = $object->getTags();
-        $this->assertCount(2, $tags);
-        $this->assertTrue($object->hasTag('method'));
-        $this->assertTrue($object->hasTag('Method'));
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\DocBlock\Tag\MethodTag',
-            $tags[0]
-        );
-        $this->assertInstanceOf(
-            __NAMESPACE__ . '\DocBlock\Tag',
-            $tags[1]
-        );
-        $this->assertNotInstanceOf(
-            __NAMESPACE__ . '\DocBlock\Tag\MethodTag',
-            $tags[1]
-        );
-    }
-
-    /**
-     * @depends testConstructFromReflector
-     * @covers \phpDocumentor\Reflection\DocBlock::getTagsByName
-     * 
-     * @return void
-     */
-    public function testGetTagsByNameZeroAndOneMatch()
-    {
-        $object = new DocBlock(new \ReflectionClass($this));
-        $this->assertEmpty($object->getTagsByName('category'));
-        $this->assertCount(1, $object->getTagsByName('author'));
-    }
-
-    /**
-     * @depends testConstructWithTagsOnly
-     * @covers \phpDocumentor\Reflection\DocBlock::parseTags
-     * 
-     * @return void
-     */
-    public function testParseMultilineTag()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * @return void Content on
- *     multiple lines.
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertCount(1, $object->getTags());
-    }
-
-    /**
-     * @depends testConstructWithTagsOnly
-     * @covers \phpDocumentor\Reflection\DocBlock::parseTags
-     * 
-     * @return void
-     */
-    public function testParseMultilineTagWithLineBreaks()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * @return void Content on
- *     multiple lines.
- *
- *     One more, after the break.
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertCount(1, $tags = $object->getTags());
-	    /** @var ReturnTag $tag */
-	    $tag = reset($tags);
-	    $this->assertEquals("Content on\n    multiple lines.\n\n    One more, after the break.", $tag->getDescription());
-    }
-
-    /**
-     * @depends testConstructWithTagsOnly
-     * @covers \phpDocumentor\Reflection\DocBlock::getTagsByName
-     * 
-     * @return void
-     */
-    public function testGetTagsByNameMultipleMatch()
-    {
-        $fixture = <<<DOCBLOCK
-/**
- * @param string
- * @param int
- * @return void
- */
-DOCBLOCK;
-        $object = new DocBlock($fixture);
-        $this->assertEmpty($object->getTagsByName('category'));
-        $this->assertCount(1, $object->getTagsByName('return'));
-        $this->assertCount(2, $object->getTagsByName('param'));
-    }
-}
+<?php
+/**
+ * phpDocumentor DocBlock Test
+ *
+ * PHP Version 5.3
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+
+namespace phpDocumentor\Reflection;
+
+use phpDocumentor\Reflection\DocBlock\Context;
+use phpDocumentor\Reflection\DocBlock\Location;
+use phpDocumentor\Reflection\DocBlock\Tag\ReturnTag;
+
+/**
+ * Test class for phpDocumentor\Reflection\DocBlock
+ *
+ * @author    Mike van Riel <mike.vanriel@naenius.com>
+ * @copyright 2010-2011 Mike van Riel / Naenius. (http://www.naenius.com)
+ * @license   http://www.opensource.org/licenses/mit-license.php MIT
+ * @link      http://phpdoc.org
+ */
+class DocBlockTest extends \PHPUnit_Framework_TestCase
+{
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock
+     * 
+     * @return void
+     */
+    public function testConstruct()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * This is a short description
+ *
+ * This is a long description
+ *
+ * @see \MyClass
+ * @return void
+ */
+DOCBLOCK;
+        $object = new DocBlock(
+            $fixture,
+            new Context('\MyNamespace', array('PHPDoc' => '\phpDocumentor')),
+            new Location(2)
+        );
+        $this->assertEquals(
+            'This is a short description',
+            $object->getShortDescription()
+        );
+        $this->assertEquals(
+            'This is a long description',
+            $object->getLongDescription()->getContents()
+        );
+        $this->assertCount(2, $object->getTags());
+        $this->assertTrue($object->hasTag('see'));
+        $this->assertTrue($object->hasTag('return'));
+        $this->assertFalse($object->hasTag('category'));
+        
+        $this->assertSame('MyNamespace', $object->getContext()->getNamespace());
+        $this->assertSame(
+            array('PHPDoc' => '\phpDocumentor'),
+            $object->getContext()->getNamespaceAliases()
+        );
+        $this->assertSame(2, $object->getLocation()->getLineNumber());
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock::splitDocBlock
+     *
+     * @return void
+     */
+    public function testConstructWithTagsOnly()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * @see \MyClass
+ * @return void
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertEquals('', $object->getShortDescription());
+        $this->assertEquals('', $object->getLongDescription()->getContents());
+        $this->assertCount(2, $object->getTags());
+        $this->assertTrue($object->hasTag('see'));
+        $this->assertTrue($object->hasTag('return'));
+        $this->assertFalse($object->hasTag('category'));
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock::isTemplateStart
+     */
+    public function testIfStartOfTemplateIsDiscovered()
+    {
+        $fixture = <<<DOCBLOCK
+/**#@+
+ * @see \MyClass
+ * @return void
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertEquals('', $object->getShortDescription());
+        $this->assertEquals('', $object->getLongDescription()->getContents());
+        $this->assertCount(2, $object->getTags());
+        $this->assertTrue($object->hasTag('see'));
+        $this->assertTrue($object->hasTag('return'));
+        $this->assertFalse($object->hasTag('category'));
+        $this->assertTrue($object->isTemplateStart());
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock::isTemplateEnd
+     */
+    public function testIfEndOfTemplateIsDiscovered()
+    {
+        $fixture = <<<DOCBLOCK
+/**#@-*/
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertEquals('', $object->getShortDescription());
+        $this->assertEquals('', $object->getLongDescription()->getContents());
+        $this->assertTrue($object->isTemplateEnd());
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock::cleanInput
+     * 
+     * @return void
+     */
+    public function testConstructOneLiner()
+    {
+        $fixture = '/** Short description and nothing more. */';
+        $object = new DocBlock($fixture);
+        $this->assertEquals(
+            'Short description and nothing more.',
+            $object->getShortDescription()
+        );
+        $this->assertEquals('', $object->getLongDescription()->getContents());
+        $this->assertCount(0, $object->getTags());
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock::__construct
+     * 
+     * @return void
+     */
+    public function testConstructFromReflector()
+    {
+        $object = new DocBlock(new \ReflectionClass($this));
+        $this->assertEquals(
+            'Test class for phpDocumentor\Reflection\DocBlock',
+            $object->getShortDescription()
+        );
+        $this->assertEquals('', $object->getLongDescription()->getContents());
+        $this->assertCount(4, $object->getTags());
+        $this->assertTrue($object->hasTag('author'));
+        $this->assertTrue($object->hasTag('copyright'));
+        $this->assertTrue($object->hasTag('license'));
+        $this->assertTrue($object->hasTag('link'));
+        $this->assertFalse($object->hasTag('category'));
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     * 
+     * @return void
+     */
+    public function testExceptionOnInvalidObject()
+    {
+        new DocBlock($this);
+    }
+
+    public function testDotSeperation()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * This is a short description.
+ * This is a long description.
+ * This is a continuation of the long description.
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertEquals(
+            'This is a short description.',
+            $object->getShortDescription()
+        );
+        $this->assertEquals(
+            "This is a long description.\nThis is a continuation of the long "
+            ."description.",
+            $object->getLongDescription()->getContents()
+        );
+    }
+
+    /**
+     * @covers \phpDocumentor\Reflection\DocBlock::parseTags
+     * @expectedException \LogicException
+     * 
+     * @return void
+     */
+    public function testInvalidTagBlock()
+    {
+        if (0 == ini_get('allow_url_include')) {
+            $this->markTestSkipped('"data" URIs for includes are required.');
+        }
+
+        include 'data:text/plain;base64,'. base64_encode(
+            <<<DOCBLOCK_EXTENSION
+<?php
+class MyReflectionDocBlock extends \phpDocumentor\Reflection\DocBlock {
+    protected function splitDocBlock(\$comment) {
+        return array('', '', 'Invalid tag block');
+    }
+}
+DOCBLOCK_EXTENSION
+        );
+        new \MyReflectionDocBlock('');
+        
+    }
+
+    public function testTagCaseSensitivity()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * This is a short description.
+ *
+ * This is a long description.
+ *
+ * @method null something()
+ * @Method({"GET", "POST"})
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertEquals(
+            'This is a short description.',
+            $object->getShortDescription()
+        );
+        $this->assertEquals(
+            'This is a long description.',
+            $object->getLongDescription()->getContents()
+        );
+        $tags = $object->getTags();
+        $this->assertCount(2, $tags);
+        $this->assertTrue($object->hasTag('method'));
+        $this->assertTrue($object->hasTag('Method'));
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\DocBlock\Tag\MethodTag',
+            $tags[0]
+        );
+        $this->assertInstanceOf(
+            __NAMESPACE__ . '\DocBlock\Tag',
+            $tags[1]
+        );
+        $this->assertNotInstanceOf(
+            __NAMESPACE__ . '\DocBlock\Tag\MethodTag',
+            $tags[1]
+        );
+    }
+
+    /**
+     * @depends testConstructFromReflector
+     * @covers \phpDocumentor\Reflection\DocBlock::getTagsByName
+     * 
+     * @return void
+     */
+    public function testGetTagsByNameZeroAndOneMatch()
+    {
+        $object = new DocBlock(new \ReflectionClass($this));
+        $this->assertEmpty($object->getTagsByName('category'));
+        $this->assertCount(1, $object->getTagsByName('author'));
+    }
+
+    /**
+     * @depends testConstructWithTagsOnly
+     * @covers \phpDocumentor\Reflection\DocBlock::parseTags
+     * 
+     * @return void
+     */
+    public function testParseMultilineTag()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * @return void Content on
+ *     multiple lines.
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertCount(1, $object->getTags());
+    }
+
+    /**
+     * @depends testConstructWithTagsOnly
+     * @covers \phpDocumentor\Reflection\DocBlock::parseTags
+     * 
+     * @return void
+     */
+    public function testParseMultilineTagWithLineBreaks()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * @return void Content on
+ *     multiple lines.
+ *
+ *     One more, after the break.
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertCount(1, $tags = $object->getTags());
+	    /** @var ReturnTag $tag */
+	    $tag = reset($tags);
+	    $this->assertEquals("Content on\n    multiple lines.\n\n    One more, after the break.", $tag->getDescription());
+    }
+
+    /**
+     * @depends testConstructWithTagsOnly
+     * @covers \phpDocumentor\Reflection\DocBlock::getTagsByName
+     * 
+     * @return void
+     */
+    public function testGetTagsByNameMultipleMatch()
+    {
+        $fixture = <<<DOCBLOCK
+/**
+ * @param string
+ * @param int
+ * @return void
+ */
+DOCBLOCK;
+        $object = new DocBlock($fixture);
+        $this->assertEmpty($object->getTagsByName('category'));
+        $this->assertCount(1, $object->getTagsByName('return'));
+        $this->assertCount(2, $object->getTagsByName('param'));
+    }
+}
Index: vendor/phpunit/phpunit/ChangeLog-4.8.md
===================================================================
--- vendor/phpunit/phpunit/ChangeLog-4.8.md	(revision 55)
+++ vendor/phpunit/phpunit/ChangeLog-4.8.md	(revision 57)
@@ -2,6 +2,12 @@
 
 All notable changes of the PHPUnit 4.8 release series are documented in this file using the [Keep a CHANGELOG](http://keepachangelog.com/) principles.
 
+## [4.8.36] - 2017-06-21
+
+### Added
+
+* Added `PHPUnit\Framework\AssertionFailedError`, `PHPUnit\Framework\Test`, and `PHPUnit\Framework\TestSuite` to the forward compatibility layer for PHPUnit 6
+
 ## [4.8.35] - 2017-02-06
 
 ### Added
@@ -247,6 +253,7 @@
 * Made the argument check of `assertContains()` and `assertNotContains()` more strict to prevent undefined behavior such as [#1808](https://github.com/sebastianbergmann/phpunit/issues/1808)
 * Changed the name of the default group from `__nogroup__` to `default`
 
+[4.8.36]: https://github.com/sebastianbergmann/phpunit/compare/4.8.35...4.8.36
 [4.8.35]: https://github.com/sebastianbergmann/phpunit/compare/4.8.34...4.8.35
 [4.8.34]: https://github.com/sebastianbergmann/phpunit/compare/4.8.33...4.8.34
 [4.8.33]: https://github.com/sebastianbergmann/phpunit/compare/4.8.32...4.8.33
Index: vendor/phpunit/phpunit/README.md
===================================================================
--- vendor/phpunit/phpunit/README.md	(revision 55)
+++ vendor/phpunit/phpunit/README.md	(revision 57)
@@ -4,7 +4,7 @@
 
 [![Latest Stable Version](https://img.shields.io/packagist/v/phpunit/phpunit.svg?style=flat-square)](https://packagist.org/packages/phpunit/phpunit)
 [![Minimum PHP Version](https://img.shields.io/badge/php-%3E%3D%205.3.3-8892BF.svg?style=flat-square)](https://php.net/)
-[![Build Status](https://img.shields.io/travis/sebastianbergmann/phpunit/4.8.svg?style=flat-square)](https://travis-ci.org/sebastianbergmann/phpunit)
+[![Build Status](https://img.shields.io/travis/sebastianbergmann/phpunit/4.8.svg?style=flat-square)](https://phpunit.de/build-status.html)
 
 ## Installation
 
Index: vendor/phpunit/phpunit/src/ForwardCompatibility/AssertionFailedError.php
===================================================================
--- vendor/phpunit/phpunit/src/ForwardCompatibility/AssertionFailedError.php	(nonexistent)
+++ vendor/phpunit/phpunit/src/ForwardCompatibility/AssertionFailedError.php	(revision 57)
@@ -0,0 +1,17 @@
+<?php
+/*
+ * This file is part of PHPUnit.
+ *
+ * (c) Sebastian Bergmann <sebastian@phpunit.de>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PHPUnit\Framework;
+
+use PHPUnit_Framework_AssertionFailedError;
+
+class AssertionFailedError extends PHPUnit_Framework_AssertionFailedError
+{
+}
Index: vendor/phpunit/phpunit/src/ForwardCompatibility/Test.php
===================================================================
--- vendor/phpunit/phpunit/src/ForwardCompatibility/Test.php	(nonexistent)
+++ vendor/phpunit/phpunit/src/ForwardCompatibility/Test.php	(revision 57)
@@ -0,0 +1,17 @@
+<?php
+/*
+ * This file is part of PHPUnit.
+ *
+ * (c) Sebastian Bergmann <sebastian@phpunit.de>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PHPUnit\Framework;
+
+use PHPUnit_Framework_Test;
+
+interface Test extends PHPUnit_Framework_Test
+{
+}
Index: vendor/phpunit/phpunit/src/ForwardCompatibility/TestSuite.php
===================================================================
--- vendor/phpunit/phpunit/src/ForwardCompatibility/TestSuite.php	(nonexistent)
+++ vendor/phpunit/phpunit/src/ForwardCompatibility/TestSuite.php	(revision 57)
@@ -0,0 +1,17 @@
+<?php
+/*
+ * This file is part of PHPUnit.
+ *
+ * (c) Sebastian Bergmann <sebastian@phpunit.de>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace PHPUnit\Framework;
+
+use PHPUnit_Framework_TestSuite;
+
+class TestSuite extends PHPUnit_Framework_TestSuite
+{
+}
Index: vendor/phpunit/phpunit/src/Runner/Version.php
===================================================================
--- vendor/phpunit/phpunit/src/Runner/Version.php	(revision 55)
+++ vendor/phpunit/phpunit/src/Runner/Version.php	(revision 57)
@@ -32,7 +32,7 @@
         }
 
         if (self::$version === null) {
-            $version       = new Version('4.8.35', dirname(dirname(__DIR__)));
+            $version       = new Version('4.8.36', dirname(dirname(__DIR__)));
             self::$version = $version->getVersion();
         }
 
Index: vendor/sebastian/diff/src/Differ.php
===================================================================
--- vendor/sebastian/diff/src/Differ.php	(revision 55)
+++ vendor/sebastian/diff/src/Differ.php	(revision 57)
@@ -135,7 +135,7 @@
         for ($i = $start; $i < $end; $i++) {
             if (isset($old[$i])) {
                 $i      = $old[$i];
-                $buffer = $this->getDiffBufferElementNew($diff, "\n" . $buffer, $i);
+                $buffer = $this->getDiffBufferElementNew($diff, $buffer, $i);
             } else {
                 $buffer = $this->getDiffBufferElement($diff, $buffer, $i);
             }
Index: vendor/sebastian/diff/tests/DifferTest.php
===================================================================
--- vendor/sebastian/diff/tests/DifferTest.php	(revision 55)
+++ vendor/sebastian/diff/tests/DifferTest.php	(revision 57)
@@ -306,6 +306,44 @@
                 "A\nB",
                 "A1\nB",
             ),
+            array(
+                <<<EOF
+--- Original
++++ New
+@@ @@
+ a
+-b
++p
+@@ @@
+ i
+-j
++w
+ k
+
+EOF
+            ,
+                "a\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk",
+                "a\np\nc\nd\ne\nf\ng\nh\ni\nw\nk",
+            ),
+            array(
+                <<<EOF
+--- Original
++++ New
+@@ @@
+ a
+-b
++p
+@@ @@
+ i
+-j
++w
+ k
+
+EOF
+                ,
+                "a\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk",
+                "a\np\nc\nd\ne\nf\ng\nh\ni\nw\nk",
+            ),
         );
     }
 
Index: vendor/sngrl/sphinxsearch/.gitignore
===================================================================
--- vendor/sngrl/sphinxsearch/.gitignore	(nonexistent)
+++ vendor/sngrl/sphinxsearch/.gitignore	(revision 57)
@@ -0,0 +1,12 @@
+# IntelliJ project files
+.idea
+*.iml
+out
+gen
+
+vendor/
+node_modules/
+bootstrap/cache/
+.env.*.php
+.env.php
+.env
Index: vendor/sngrl/sphinxsearch/LICENSE
===================================================================
--- vendor/sngrl/sphinxsearch/LICENSE	(nonexistent)
+++ vendor/sngrl/sphinxsearch/LICENSE	(revision 57)
@@ -0,0 +1,20 @@
+The MIT License (MIT)
+
+Copyright (c) 2014 Terre Porter
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
+the Software, and to permit persons to whom the Software is furnished to do so,
+subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
+FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
+COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Index: vendor/sngrl/sphinxsearch/composer.json
===================================================================
--- vendor/sngrl/sphinxsearch/composer.json	(nonexistent)
+++ vendor/sngrl/sphinxsearch/composer.json	(revision 57)
@@ -0,0 +1,28 @@
+{
+  "name": "sngrl/sphinxsearch",
+  "description": "Laravel package to query Sphinxsearch in Laravel 5",
+  "keywords": [
+    "sphinx",
+    "sphinxsearch",
+    "laravel",
+    "laravel 5"
+  ],
+  "homepage": "http://github.com/sngrl/sphinxsearch",
+  "license": "Apache-2.0",
+  "authors": [
+    {
+      "name": "sngrl",
+      "email": "reserved@mail.ru"
+    }
+  ],
+  "require": {
+    "php": ">=5.3.0",
+    "illuminate/support": "~5.0",
+    "gigablah/sphinxphp": "2.0.8"
+  },
+  "autoload": {
+    "psr-0": {
+      "sngrl\\SphinxSearch": "src/"
+    }
+  }
+}
\ No newline at end of file
Index: vendor/sngrl/sphinxsearch/config/sphinxsearch.php
===================================================================
--- vendor/sngrl/sphinxsearch/config/sphinxsearch.php	(nonexistent)
+++ vendor/sngrl/sphinxsearch/config/sphinxsearch.php	(revision 57)
@@ -0,0 +1,13 @@
+<?php
+return array(
+    'host'    => '127.0.0.1',
+    'port'    => 9312,
+    'timeout' => 30,
+    'indexes' => array(
+        'my_index_name' => array('table' => 'keywords', 'column' => 'id'),
+    ),
+    'mysql_server' => array(
+        'host' => '127.0.0.1',
+        'port' => 9306
+    )
+);
Index: vendor/sngrl/sphinxsearch/readme.md
===================================================================
--- vendor/sngrl/sphinxsearch/readme.md	(nonexistent)
+++ vendor/sngrl/sphinxsearch/readme.md	(revision 57)
@@ -0,0 +1,118 @@
+Sphinx Search for Laravel 5 - Custom build with snippets support 
+=======================
+Simple Laravel 5 package for make queries to Sphinx Search.
+Inspired by scalia/sphinxsearch package for Laravel 4.
+
+This package was created to import to the site packagist.org and allow installation through Composer (https://getcomposer.org/).
+
+Installation
+=======================
+
+Require this package in your composer.json:
+ 
+```php
+	"require": {
+        /*** Some others packages ***/
+		"sngrl/sphinxsearch": "dev-master",
+	},
+```
+
+Run in your console `composer update` command to pull down the latest version of Sphinx Search.
+
+
+Or just run this in console:
+
+```php
+composer require sngrl/sphinxsearch:dev-master
+```
+
+After updating composer, add the ServiceProvider to the "providers" array in config/app.php:
+
+```php
+	'providers' => array(
+        /*** Some others providers ***/
+        'sngrl\SphinxSearch\SphinxSearchServiceProvider',
+    ),
+```
+
+You can add this line to the files, where you may use SphinxSearch:
+
+```php
+use sngrl\SphinxSearch\SphinxSearch;
+```
+
+Configuration
+=======================
+
+To use Sphinx Search, you need to configure your indexes and what model it should query. To do so, publish the configuration into your app.
+
+```php
+php artisan vendor:publish --provider=sngrl\SphinxSearch\SphinxSearchServiceProvider --force
+```
+
+This will create the file `config/sphinxsearch.php`. Modify as needed the host and port, and configure the indexes, binding them to a table and id column.
+
+```php
+return array (
+	'host'    => '127.0.0.1',
+	'port'    => 9312,
+	'indexes' => array (
+		'my_index_name' => array ( 'table' => 'my_keywords_table', 'column' => 'id' ),
+	)
+);
+```
+Or disable the model querying to just get a list of result id's.
+```php
+return array (
+	'host'    => '127.0.0.1',
+	'port'    => 9312,
+	'indexes' => array (
+		'my_index_name' => FALSE,
+	)
+);
+```
+
+
+Usage
+=======================
+
+Basic query (raw sphinx results)
+```php
+$sphinx = new SphinxSearch();
+$results = $sphinx->search('my query', 'index_name')->query();
+```
+
+Basic query (with Eloquent)
+```php
+$results = $sphinx->search('my query', 'index_name')->get();
+```
+
+Query another Sphinx index with limit and filters.
+```php
+$results = $sphinx->search('my query', 'index_name')
+	->limit(30)
+	->filter('attribute', array(1, 2))
+	->range('int_attribute', 1, 10)
+	->get();
+```
+
+Query with match and sort type specified.
+```php
+$result = $sphinx->search('my query', 'index_name')
+	->setFieldWeights(
+		array(
+			'partno'  => 10,
+			'name'    => 8,
+			'details' => 1
+		)
+	)
+	->setMatchMode(\Sphinx\SphinxClient::SPH_MATCH_EXTENDED)
+	->setSortMode(\Sphinx\SphinxClient::SPH_SORT_EXTENDED, "@weight DESC")
+	->get(true);  //passing true causes get() to respect returned sort order
+```
+
+
+License
+=======================
+
+Sngrl Sphinx Search is open-sourced software licensed under the MIT license
Index: vendor/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearch.php
===================================================================
--- vendor/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearch.php	(nonexistent)
+++ vendor/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearch.php	(revision 57)
@@ -0,0 +1,292 @@
+<?php 
+namespace sngrl\SphinxSearch;
+
+class SphinxSearch
+{
+    protected $_connection;
+    protected $_index_name;
+    protected $_search_string;
+    protected $_config;
+    protected $_total_count;
+    protected $_time;
+    protected $_eager_loads;
+	protected $_raw_mysql_connection;
+
+    public function __construct()
+    {
+        $host = \Config::get('sphinxsearch.host');
+        $port = \Config::get('sphinxsearch.port');
+        $timeout = \Config::get('sphinxsearch.timeout');
+        $this->_connection = new \Sphinx\SphinxClient();
+        $this->_connection->setServer($host, $port);
+        $this->_connection->setConnectTimeout($timeout);
+        $this->_connection->setMatchMode(\Sphinx\SphinxClient::SPH_MATCH_ANY);
+        $this->_connection->setSortMode(\Sphinx\SphinxClient::SPH_SORT_RELEVANCE);
+        if (extension_loaded('mysqli') && \Config::get('sphinxsearch.mysql_server')) {
+            $this->_raw_mysql_connection = mysqli_connect(\Config::get('sphinxsearch.mysql_server.host'), '', '', '', \Config::get('sphinxsearch.mysql_server.port'));
+        }
+        $this->_config = \Config::get('sphinxsearch.indexes');
+        reset($this->_config);
+        $this->_index_name = isset($this->_config['name']) ? implode(',', $this->_config['name']) : key($this->_config);
+        $this->_eager_loads = array();
+    }
+
+	/**
+	 * @param $docs
+	 * @param $index_name
+	 * @param $query
+	 * @param array $extra, in this format: array('option_name' => option_value, 'limit' => 100, ...)
+	 * @return array
+	 */
+	public function getSnippetsQL($docs, $index_name, $query, $extra = [])
+	{
+		// $extra = [];
+		if (is_array($docs) === FALSE)
+		{
+			$docs = [$docs];
+		}
+		foreach ($docs as &$doc)
+		{
+			$doc = "'".mysqli_real_escape_string($this->_raw_mysql_connection, strip_tags($doc))."'";
+		}
+
+		$extra_ql = '';
+		if ($extra)
+		{
+			foreach ($extra as $key => $value)
+			{
+				$extra_ql[] = $value.' AS '.$key;
+			}
+			$extra_ql = implode(',', $extra_ql);
+			if ($extra_ql)
+			{
+				$extra_ql = ','.$extra_ql;
+			}
+		}
+
+		$query = "CALL SNIPPETS((".implode(',',$docs)."),'".$index_name."','".mysqli_real_escape_string($this->_raw_mysql_connection, $query)."' ".$extra_ql.")";
+		// die($query);
+		$result = mysqli_query($this->_raw_mysql_connection, $query);
+		// ddd($result);
+		$reply = array();
+		if ($result)
+		{
+			while ($row = mysqli_fetch_array($result, MYSQLI_ASSOC))
+			{
+				$reply[] = $row['snippet'];
+			}
+		}
+		return $reply;
+	}
+
+    public function search($string, $index_name = null)
+    {
+        $this->_search_string = $string;
+        if (null !== $index_name) {
+            // if index name contains , or ' ', multiple index search
+            if (strpos($index_name, ' ') || strpos($index_name, ',')) {
+                if (!isset($this->_config['mapping'])) {
+                    $this->_config['mapping'] = false;
+                }
+            }
+            $this->_index_name = $index_name;
+        }
+        $this->_connection->resetFilters();
+        $this->_connection->resetGroupBy();
+        return $this;
+    }
+
+    public function setFieldWeights($weights)
+    {
+        $this->_connection->setFieldWeights($weights);
+        return $this;
+    }
+
+    public function setMatchMode($mode)
+    {
+        $this->_connection->setMatchMode($mode);
+        return $this;
+    }
+
+    public function setRankingMode($mode)
+    {
+        $this->_connection->setRankingMode($mode);
+        return $this;
+    }
+
+    public function setSortMode($mode, $sortby = null)
+    {
+        $this->_connection->setSortMode($mode, $sortby);
+        return $this;
+    }
+
+    public function setFilterFloatRange($attribute, $min, $max, $exclude = false)
+    {
+        $this->_connection->setFilterFloatRange($attribute, $min, $max, $exclude);
+        return $this;
+    }
+
+    public function setGeoAnchor($attrlat, $attrlong, $lat = null, $long = null)
+    {
+        $this->_connection->setGeoAnchor($attrlat, $attrlong, $lat, $long);
+        return $this;
+    }
+
+    public function setGroupBy($attribute, $func, $groupsort = '@group desc')
+    {
+        $this->_connection->setGroupBy($attribute, $func, $groupsort);
+        return $this;
+    }
+
+    public function setSelect($select)
+    {
+        $this->_connection->setSelect($select);
+        return $this;
+    }
+
+    public function limit($limit, $offset = 0, $max_matches = 1000000, $cutoff = 1000000)
+    {
+        $this->_connection->setLimits($offset, $limit, $max_matches, $cutoff);
+        return $this;
+    }
+
+    public function filter($attribute, $values, $exclude = false)
+    {
+        if (is_array($values)) {
+            $val = array();
+            foreach ($values as $v) {
+                $val[] = (int)$v;
+            }
+        } else {
+            $val = array((int)$values);
+        }
+        $this->_connection->setFilter($attribute, $val, $exclude);
+        return $this;
+    }
+
+    public function range($attribute, $min, $max, $exclude = false)
+    {
+        $this->_connection->setFilterRange($attribute, $min, $max, $exclude);
+        return $this;
+    }
+
+    public function query()
+    {
+        return $this->_connection->query($this->_search_string, $this->_index_name);
+    }
+
+    public function excerpt($content, $opts = array())
+    {
+        return $this->_connection->buildExcerpts(array($content), $this->_index_name, $this->_search_string, $opts);
+    }
+
+    public function excerpts($contents, $opts = array())
+    {
+        return $this->_connection->buildExcerpts($contents, $this->_index_name, $this->_search_string, $opts);
+    }
+
+    public function get($respect_sort_order = false)
+    {
+        $this->_total_count = 0;
+        $result = $this->_connection->query($this->_search_string, $this->_index_name);
+//        dd($result);
+        // Process results.
+        if ($result) {
+            // Get total count of existing results.
+            $this->_total_count = (int)$result['total_found'];
+            // Get time taken for search.
+            $this->_time = $result['time'];
+            if ($result['total'] && isset($result['matches'])) {
+                // Get results' id's and query the database.
+                $matchids = array_keys($result['matches']);
+                $idString = implode(',', $matchids);
+//                dd($this->_config);
+                $config = isset($this->_config['mapping']) ? $this->_config['mapping']
+                    : $this->_config[$this->_index_name];
+                if ($config) {
+                    if (isset($config['modelname'])) {
+                        if ($this->_eager_loads) {
+                            $result = call_user_func_array($config['modelname'] . "::whereIn",
+                                array($config['column'], $matchids))->orderByRaw(\DB::raw("FIELD(id, $idString)"))
+                                ->with($this->_eager_loads)->get();
+                        } else {
+                            $result = call_user_func_array($config['modelname'] . "::whereIn",
+                                array($config['column'], $matchids))->orderByRaw(\DB::raw("FIELD(id, $idString)"))
+                                ->get();
+                        }
+                    } else {
+                        $result = \DB::table($config['table'])->whereIn($config['column'], $matchids)
+                            ->orderByRaw(\DB::raw("FIELD(id, $idString)"))->get();
+                    }
+                }
+            } else {
+                $result = array();
+            }
+        }
+        if ($respect_sort_order) {
+            if (isset($matchids)) {
+                $return_val = array();
+                foreach ($matchids as $matchid) {
+                    $key = self::getResultKeyByID($matchid, $result);
+                    if (false !== $key) {
+                        $return_val[] = $result[$key];
+                    }
+                }
+                return $return_val;
+            }
+        }
+        // important: reset the array of eager loads prior to making next call
+        $this->_eager_loads = array();
+        return $result;
+    }
+
+    public function with()
+    {
+        // Allow multiple with-calls
+        if (false === isset($this->_eager_loads)) {
+            $this->_eager_loads = array();
+        }
+        foreach (func_get_args() as $a) {
+            // Add closures as name=>function()
+            if (is_array($a)) {
+                $this->_eager_loads = array_merge($this->_eager_loads, $a);
+            } else {
+                $this->_eager_loads[] = $a;
+            }
+        }
+        return $this;
+    }
+
+    public function getTotalCount()
+    {
+        return $this->_total_count;
+    }
+
+    public function getTime()
+    {
+        return $this->_time;
+    }
+
+    public function getErrorMessage()
+    {
+        return $this->_connection->getLastError();
+    }
+
+    private function getResultKeyByID($id, $result)
+    {
+        if (count($result) > 0) {
+            foreach ($result as $k => $result_item) {
+                if ($result_item->id == $id) {
+                    return $k;
+                }
+            }
+        }
+        return false;
+    }
+
+    public function escapeStringQL($string)
+    {
+        return $this->_connection->escapeString($string);
+    }
+
+}
Index: vendor/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearchServiceProvider.php
===================================================================
--- vendor/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearchServiceProvider.php	(nonexistent)
+++ vendor/sngrl/sphinxsearch/src/sngrl/SphinxSearch/SphinxSearchServiceProvider.php	(revision 57)
@@ -0,0 +1,27 @@
+<?php 
+namespace sngrl\SphinxSearch;
+
+use Illuminate\Support\ServiceProvider;
+
+class SphinxSearchServiceProvider extends ServiceProvider
+{
+    public function register()
+    {
+        $this->app['sphinxsearch'] = $this->app->share(function ($app) {
+            return new SphinxSearch;
+        });
+    }
+
+
+    public function boot()
+    {
+        $this->publishes([
+            ## Original
+            #__DIR__.'../../../../config/sphinxsearch.php' => config_path('sphinxsearch.php'),
+
+            ## https://github.com/sngrl/sphinxsearch/issues/3
+            __DIR__.'/../../../config/sphinxsearch.php' => config_path('sphinxsearch.php'),
+        ]);
+    }
+
+}
\ No newline at end of file
Index: vendor/symfony/browser-kit/CHANGELOG.md
===================================================================
--- vendor/symfony/browser-kit/CHANGELOG.md	(revision 55)
+++ vendor/symfony/browser-kit/CHANGELOG.md	(revision 57)
@@ -1,6 +1,12 @@
 CHANGELOG
 =========
 
+3.3.0
+-----
+
+ * [BC BREAK] The request method is dropped from POST to GET when the response
+   status code is 301.
+
 3.2.0
 -----
 
Index: vendor/symfony/browser-kit/Client.php
===================================================================
--- vendor/symfony/browser-kit/Client.php	(revision 55)
+++ vendor/symfony/browser-kit/Client.php	(revision 57)
@@ -468,13 +468,14 @@
 
         if (-1 !== $this->maxRedirects) {
             if ($this->redirectCount > $this->maxRedirects) {
+                $this->redirectCount = 0;
                 throw new \LogicException(sprintf('The maximum number (%d) of redirections was reached.', $this->maxRedirects));
             }
         }
 
         $request = $this->internalRequest;
 
-        if (in_array($this->internalResponse->getStatus(), array(302, 303))) {
+        if (in_array($this->internalResponse->getStatus(), array(301, 302, 303))) {
             $method = 'GET';
             $files = array();
             $content = null;
Index: vendor/symfony/browser-kit/Tests/ClientTest.php
===================================================================
--- vendor/symfony/browser-kit/Tests/ClientTest.php	(revision 55)
+++ vendor/symfony/browser-kit/Tests/ClientTest.php	(revision 57)
@@ -510,6 +510,28 @@
         $this->assertEquals('POST', $client->getRequest()->getMethod(), '->followRedirect() keeps request method');
     }
 
+    public function testFollowRedirectDropPostMethod()
+    {
+        $parameters = array('foo' => 'bar');
+        $files = array('myfile.foo' => 'baz');
+        $server = array('X_TEST_FOO' => 'bazbar');
+        $content = 'foobarbaz';
+
+        $client = new TestClient();
+
+        foreach (array(301, 302, 303) as $code) {
+            $client->setNextResponse(new Response('', $code, array('Location' => 'http://www.example.com/redirected')));
+            $client->request('POST', 'http://www.example.com/foo/foobar', $parameters, $files, $server, $content);
+
+            $this->assertEquals('http://www.example.com/redirected', $client->getRequest()->getUri(), '->followRedirect() follows a redirect with POST method on response code: '.$code.'.');
+            $this->assertEmpty($client->getRequest()->getParameters(), '->followRedirect() drops parameters with POST method on response code: '.$code.'.');
+            $this->assertEmpty($client->getRequest()->getFiles(), '->followRedirect() drops files with POST method on response code: '.$code.'.');
+            $this->assertArrayHasKey('X_TEST_FOO', $client->getRequest()->getServer(), '->followRedirect() keeps $_SERVER with POST method on response code: '.$code.'.');
+            $this->assertEmpty($client->getRequest()->getContent(), '->followRedirect() drops content with POST method on response code: '.$code.'.');
+            $this->assertEquals('GET', $client->getRequest()->getMethod(), '->followRedirect() drops request method to GET on response code: '.$code.'.');
+        }
+    }
+
     public function testBack()
     {
         $client = new TestClient();
Index: vendor/symfony/browser-kit/composer.json
===================================================================
--- vendor/symfony/browser-kit/composer.json	(revision 55)
+++ vendor/symfony/browser-kit/composer.json	(revision 57)
@@ -35,7 +35,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "3.2-dev"
+            "dev-master": "3.3-dev"
         }
     }
 }
Index: vendor/symfony/class-loader/ApcClassLoader.php
===================================================================
--- vendor/symfony/class-loader/ApcClassLoader.php	(revision 55)
+++ vendor/symfony/class-loader/ApcClassLoader.php	(revision 57)
@@ -11,6 +11,8 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\ApcClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use `composer install --apcu-autoloader` instead.', E_USER_DEPRECATED);
+
 /**
  * ApcClassLoader implements a wrapping autoloader cached in APC for PHP 5.3.
  *
@@ -44,6 +46,8 @@
  *
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Kris Wallsmith <kris@symfony.com>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0. Use `composer install --apcu-autoloader` instead.
  */
 class ApcClassLoader
 {
Index: vendor/symfony/class-loader/CHANGELOG.md
===================================================================
--- vendor/symfony/class-loader/CHANGELOG.md	(revision 55)
+++ vendor/symfony/class-loader/CHANGELOG.md	(revision 57)
@@ -1,6 +1,11 @@
 CHANGELOG
 =========
 
+3.3.0
+-----
+
+ * deprecated the component: use Composer instead
+
 3.0.0
 -----
 
Index: vendor/symfony/class-loader/ClassCollectionLoader.php
===================================================================
--- vendor/symfony/class-loader/ClassCollectionLoader.php	(revision 55)
+++ vendor/symfony/class-loader/ClassCollectionLoader.php	(revision 57)
@@ -11,10 +11,16 @@
 
 namespace Symfony\Component\ClassLoader;
 
+if (\PHP_VERSION_ID >= 70000) {
+    @trigger_error('The '.__NAMESPACE__.'\ClassCollectionLoader class is deprecated since version 3.3 and will be removed in 4.0.', E_USER_DEPRECATED);
+}
+
 /**
  * ClassCollectionLoader.
  *
  * @author Fabien Potencier <fabien@symfony.com>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0.
  */
 class ClassCollectionLoader
 {
@@ -256,7 +262,7 @@
 
         $output .= self::compressCode($rawChunk);
 
-        if (PHP_VERSION_ID >= 70000) {
+        if (\PHP_VERSION_ID >= 70000) {
             // PHP 7 memory manager will not release after token_get_all(), see https://bugs.php.net/70098
             unset($tokens, $rawChunk);
             gc_mem_caches();
Index: vendor/symfony/class-loader/ClassLoader.php
===================================================================
--- vendor/symfony/class-loader/ClassLoader.php	(revision 55)
+++ vendor/symfony/class-loader/ClassLoader.php	(revision 57)
@@ -11,6 +11,8 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\ClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use Composer instead.', E_USER_DEPRECATED);
+
 /**
  * ClassLoader implements an PSR-0 class loader.
  *
@@ -36,6 +38,8 @@
  *
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Jordi Boggiano <j.boggiano@seld.be>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0.
  */
 class ClassLoader
 {
Index: vendor/symfony/class-loader/ClassMapGenerator.php
===================================================================
--- vendor/symfony/class-loader/ClassMapGenerator.php	(revision 55)
+++ vendor/symfony/class-loader/ClassMapGenerator.php	(revision 57)
@@ -11,10 +11,14 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\ClassMapGenerator class is deprecated since version 3.3 and will be removed in 4.0. Use Composer instead.', E_USER_DEPRECATED);
+
 /**
  * ClassMapGenerator.
  *
  * @author Gyula Sallai <salla016@gmail.com>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0.
  */
 class ClassMapGenerator
 {
@@ -64,7 +68,7 @@
 
             $classes = self::findClasses($path);
 
-            if (PHP_VERSION_ID >= 70000) {
+            if (\PHP_VERSION_ID >= 70000) {
                 // PHP 7 memory manager will not release after token_get_all(), see https://bugs.php.net/70098
                 gc_mem_caches();
             }
Index: vendor/symfony/class-loader/MapClassLoader.php
===================================================================
--- vendor/symfony/class-loader/MapClassLoader.php	(revision 55)
+++ vendor/symfony/class-loader/MapClassLoader.php	(revision 57)
@@ -11,10 +11,14 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\MapClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use Composer instead.', E_USER_DEPRECATED);
+
 /**
  * A class loader that uses a mapping file to look up paths.
  *
  * @author Fabien Potencier <fabien@symfony.com>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0.
  */
 class MapClassLoader
 {
Index: vendor/symfony/class-loader/Psr4ClassLoader.php
===================================================================
--- vendor/symfony/class-loader/Psr4ClassLoader.php	(revision 55)
+++ vendor/symfony/class-loader/Psr4ClassLoader.php	(revision 57)
@@ -11,12 +11,16 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\Psr4ClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use Composer instead.', E_USER_DEPRECATED);
+
 /**
  * A PSR-4 compatible class loader.
  *
  * See http://www.php-fig.org/psr/psr-4/
  *
  * @author Alexander M. Turek <me@derrabus.de>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0.
  */
 class Psr4ClassLoader
 {
Index: vendor/symfony/class-loader/Tests/ApcClassLoaderTest.php
===================================================================
--- vendor/symfony/class-loader/Tests/ApcClassLoaderTest.php	(revision 55)
+++ vendor/symfony/class-loader/Tests/ApcClassLoaderTest.php	(revision 57)
@@ -15,6 +15,9 @@
 use Symfony\Component\ClassLoader\ApcClassLoader;
 use Symfony\Component\ClassLoader\ClassLoader;
 
+/**
+ * @group legacy
+ */
 class ApcClassLoaderTest extends TestCase
 {
     protected function setUp()
Index: vendor/symfony/class-loader/Tests/ClassCollectionLoaderTest.php
===================================================================
--- vendor/symfony/class-loader/Tests/ClassCollectionLoaderTest.php	(revision 55)
+++ vendor/symfony/class-loader/Tests/ClassCollectionLoaderTest.php	(revision 57)
@@ -21,6 +21,9 @@
 require_once __DIR__.'/Fixtures/ClassesWithParents/B.php';
 require_once __DIR__.'/Fixtures/ClassesWithParents/A.php';
 
+/**
+ * @group legacy
+ */
 class ClassCollectionLoaderTest extends TestCase
 {
     public function testTraitDependencies()
Index: vendor/symfony/class-loader/Tests/ClassLoaderTest.php
===================================================================
--- vendor/symfony/class-loader/Tests/ClassLoaderTest.php	(revision 55)
+++ vendor/symfony/class-loader/Tests/ClassLoaderTest.php	(revision 57)
@@ -14,6 +14,9 @@
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\ClassLoader\ClassLoader;
 
+/**
+ * @group legacy
+ */
 class ClassLoaderTest extends TestCase
 {
     public function testGetPrefixes()
Index: vendor/symfony/class-loader/Tests/ClassMapGeneratorTest.php
===================================================================
--- vendor/symfony/class-loader/Tests/ClassMapGeneratorTest.php	(revision 55)
+++ vendor/symfony/class-loader/Tests/ClassMapGeneratorTest.php	(revision 57)
@@ -14,6 +14,9 @@
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\ClassLoader\ClassMapGenerator;
 
+/**
+ * @group legacy
+ */
 class ClassMapGeneratorTest extends TestCase
 {
     /**
Index: vendor/symfony/class-loader/Tests/Psr4ClassLoaderTest.php
===================================================================
--- vendor/symfony/class-loader/Tests/Psr4ClassLoaderTest.php	(revision 55)
+++ vendor/symfony/class-loader/Tests/Psr4ClassLoaderTest.php	(revision 57)
@@ -14,6 +14,9 @@
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\ClassLoader\Psr4ClassLoader;
 
+/**
+ * @group legacy
+ */
 class Psr4ClassLoaderTest extends TestCase
 {
     /**
Index: vendor/symfony/class-loader/WinCacheClassLoader.php
===================================================================
--- vendor/symfony/class-loader/WinCacheClassLoader.php	(revision 55)
+++ vendor/symfony/class-loader/WinCacheClassLoader.php	(revision 57)
@@ -11,6 +11,8 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\WinCacheClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use `composer install --apcu-autoloader` instead.', E_USER_DEPRECATED);
+
 /**
  * WinCacheClassLoader implements a wrapping autoloader cached in WinCache.
  *
@@ -43,6 +45,8 @@
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Kris Wallsmith <kris@symfony.com>
  * @author Artem Ryzhkov <artem@smart-core.org>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0. Use `composer install --apcu-autoloader` instead.
  */
 class WinCacheClassLoader
 {
Index: vendor/symfony/class-loader/XcacheClassLoader.php
===================================================================
--- vendor/symfony/class-loader/XcacheClassLoader.php	(revision 55)
+++ vendor/symfony/class-loader/XcacheClassLoader.php	(revision 57)
@@ -11,6 +11,8 @@
 
 namespace Symfony\Component\ClassLoader;
 
+@trigger_error('The '.__NAMESPACE__.'\XcacheClassLoader class is deprecated since version 3.3 and will be removed in 4.0. Use `composer install --apcu-autoloader` instead.', E_USER_DEPRECATED);
+
 /**
  * XcacheClassLoader implements a wrapping autoloader cached in XCache for PHP 5.3.
  *
@@ -43,6 +45,8 @@
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Kris Wallsmith <kris@symfony.com>
  * @author Kim Hemsø Rasmussen <kimhemsoe@gmail.com>
+ *
+ * @deprecated since version 3.3, to be removed in 4.0. Use `composer install --apcu-autoloader` instead.
  */
 class XcacheClassLoader
 {
Index: vendor/symfony/class-loader/composer.json
===================================================================
--- vendor/symfony/class-loader/composer.json	(revision 55)
+++ vendor/symfony/class-loader/composer.json	(revision 57)
@@ -34,7 +34,7 @@
     },
     "extra": {
         "branch-alias": {
-            "dev-master": "3.2-dev"
+            "dev-master": "3.3-dev"
         }
     }
 }
Index: vendor/symfony/event-dispatcher/CHANGELOG.md
===================================================================
--- vendor/symfony/event-dispatcher/CHANGELOG.md	(revision 55)
+++ vendor/symfony/event-dispatcher/CHANGELOG.md	(revision 57)
@@ -1,6 +1,11 @@
 CHANGELOG
 =========
 
+3.3.0
+-----
+
+  * The ContainerAwareEventDispatcher class has been deprecated. Use EventDispatcher with closure factories instead.
+
 3.0.0
 -----
 
Index: vendor/symfony/event-dispatcher/ContainerAwareEventDispatcher.php
===================================================================
--- vendor/symfony/event-dispatcher/ContainerAwareEventDispatcher.php	(revision 55)
+++ vendor/symfony/event-dispatcher/ContainerAwareEventDispatcher.php	(revision 57)
@@ -20,6 +20,8 @@
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Bernhard Schussek <bschussek@gmail.com>
  * @author Jordan Alliot <jordan.alliot@gmail.com>
+ *
+ * @deprecated since 3.3, to be removed in 4.0. Use EventDispatcher with closure factories instead.
  */
 class ContainerAwareEventDispatcher extends EventDispatcher
 {
@@ -52,6 +54,14 @@
     public function __construct(ContainerInterface $container)
     {
         $this->container = $container;
+
+        $class = get_class($this);
+        if ($this instanceof \PHPUnit_Framework_MockObject_MockObject || $this instanceof \Prophecy\Doubler\DoubleInterface) {
+            $class = get_parent_class($class);
+        }
+        if (__CLASS__ !== $class) {
+            @trigger_error(sprintf('The %s class is deprecated since version 3.3 and will be removed in 4.0. Use EventDispatcher with closure factories instead.', __CLASS__), E_USER_DEPRECATED);
+        }
     }
 
     /**
@@ -68,6 +78,8 @@
      */
     public function addListenerService($eventName, $callback, $priority = 0)
     {
+        @trigger_error(sprintf('The %s class is deprecated since version 3.3 and will be removed in 4.0. Use EventDispatcher with closure factories instead.', __CLASS__), E_USER_DEPRECATED);
+
         if (!is_array($callback) || 2 !== count($callback)) {
             throw new \InvalidArgumentException('Expected an array("service", "method") argument');
         }
@@ -104,7 +116,7 @@
     public function hasListeners($eventName = null)
     {
         if (null === $eventName) {
-            return (bool) count($this->listenerIds) || (bool) count($this->listeners);
+            return $this->listenerIds || $this->listeners || parent::hasListeners();
         }
 
         if (isset($this->listenerIds[$eventName])) {
@@ -148,6 +160,8 @@
      */
     public function addSubscriberService($serviceId, $class)
     {
+        @trigger_error(sprintf('The %s class is deprecated since version 3.3 and will be removed in 4.0. Use EventDispatcher with closure factories instead.', __CLASS__), E_USER_DEPRECATED);
+
         foreach ($class::getSubscribedEvents() as $eventName => $params) {
             if (is_string($params)) {
                 $this->listenerIds[$eventName][] = array($serviceId, $params, 0);
@@ -163,6 +177,8 @@
 
     public function getContainer()
     {
+        @trigger_error('The '.__METHOD__.'() method is deprecated since version 3.3 as its class will be removed in 4.0. Inject the container or the services you need in your listeners/subscribers instead.', E_USER_DEPRECATED);
+
         return $this->container;
     }
 
Index: vendor/symfony/event-dispatcher/Debug/WrappedListener.php
===================================================================
--- vendor/symfony/event-dispatcher/Debug/WrappedListener.php	(revision 55)
+++ vendor/symfony/event-dispatcher/Debug/WrappedListener.php	(revision 57)
@@ -15,7 +15,6 @@
 use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\VarDumper\Caster\ClassStub;
-use Symfony\Component\VarDumper\Cloner\VarCloner;
 
 /**
  * @author Fabien Potencier <fabien@symfony.com>
@@ -29,9 +28,8 @@
     private $stopwatch;
     private $dispatcher;
     private $pretty;
-    private $data;
-
-    private static $cloner;
+    private $stub;
+    private static $hasClassStub;
 
     public function __construct($listener, $name, Stopwatch $stopwatch, EventDispatcherInterface $dispatcher = null)
     {
@@ -58,8 +56,8 @@
             $this->name = $name;
         }
 
-        if (null === self::$cloner) {
-            self::$cloner = class_exists(ClassStub::class) ? new VarCloner() : false;
+        if (null === self::$hasClassStub) {
+            self::$hasClassStub = class_exists(ClassStub::class);
         }
     }
 
@@ -85,15 +83,15 @@
 
     public function getInfo($eventName)
     {
-        if (null === $this->data) {
-            $this->data = false !== self::$cloner ? self::$cloner->cloneVar(array(new ClassStub($this->pretty.'()', $this->listener)))->seek(0) : $this->pretty;
+        if (null === $this->stub) {
+            $this->stub = self::$hasClassStub ? new ClassStub($this->pretty.'()', $this->listener) : $this->pretty.'()';
         }
 
         return array(
             'event' => $eventName,
             'priority' => null !== $this->dispatcher ? $this->dispatcher->getListenerPriority($eventName, $this->listener) : null,
             'pretty' => $this->pretty,
-            'data' => $this->data,
+            'stub' => $this->stub,
         );
     }
 
Index: vendor/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php
===================================================================
--- vendor/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php	(revision 55)
+++ vendor/symfony/event-dispatcher/DependencyInjection/RegisterListenersPass.php	(revision 57)
@@ -11,9 +11,13 @@
 
 namespace Symfony\Component\EventDispatcher\DependencyInjection;
 
+use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
 use Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface;
 use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
+use Symfony\Component\DependencyInjection\Reference;
+use Symfony\Component\EventDispatcher\EventDispatcher;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
  * Compiler pass to register tagged services for an event dispatcher.
@@ -57,15 +61,8 @@
 
         $definition = $container->findDefinition($this->dispatcherService);
 
-        foreach ($container->findTaggedServiceIds($this->listenerTag) as $id => $events) {
+        foreach ($container->findTaggedServiceIds($this->listenerTag, true) as $id => $events) {
             $def = $container->getDefinition($id);
-            if (!$def->isPublic()) {
-                throw new InvalidArgumentException(sprintf('The service "%s" must be public as event listeners are lazy-loaded.', $id));
-            }
-
-            if ($def->isAbstract()) {
-                throw new InvalidArgumentException(sprintf('The service "%s" must not be abstract as event listeners are lazy-loaded.', $id));
-            }
 
             foreach ($events as $event) {
                 $priority = isset($event['priority']) ? $event['priority'] : 0;
@@ -82,19 +79,14 @@
                     $event['method'] = preg_replace('/[^a-z0-9]/i', '', $event['method']);
                 }
 
-                $definition->addMethodCall('addListenerService', array($event['event'], array($id, $event['method']), $priority));
+                $definition->addMethodCall('addListener', array($event['event'], array(new ServiceClosureArgument(new Reference($id)), $event['method']), $priority));
             }
         }
 
-        foreach ($container->findTaggedServiceIds($this->subscriberTag) as $id => $attributes) {
-            $def = $container->getDefinition($id);
-            if (!$def->isPublic()) {
-                throw new InvalidArgumentException(sprintf('The service "%s" must be public as event subscribers are lazy-loaded.', $id));
-            }
+        $extractingDispatcher = new ExtractingEventDispatcher();
 
-            if ($def->isAbstract()) {
-                throw new InvalidArgumentException(sprintf('The service "%s" must not be abstract as event subscribers are lazy-loaded.', $id));
-            }
+        foreach ($container->findTaggedServiceIds($this->subscriberTag, true) as $id => $attributes) {
+            $def = $container->getDefinition($id);
 
             // We must assume that the class value has been correctly filled, even if the service is created by a factory
             $class = $container->getParameterBag()->resolveValue($def->getClass());
@@ -107,8 +99,37 @@
 
                 throw new InvalidArgumentException(sprintf('Service "%s" must implement interface "%s".', $id, $interface));
             }
+            $container->addObjectResource($class);
 
-            $definition->addMethodCall('addSubscriberService', array($id, $class));
+            ExtractingEventDispatcher::$subscriber = $class;
+            $extractingDispatcher->addSubscriber($extractingDispatcher);
+            foreach ($extractingDispatcher->listeners as $args) {
+                $args[1] = array(new ServiceClosureArgument(new Reference($id)), $args[1]);
+                $definition->addMethodCall('addListener', $args);
+            }
+            $extractingDispatcher->listeners = array();
         }
     }
 }
+
+/**
+ * @internal
+ */
+class ExtractingEventDispatcher extends EventDispatcher implements EventSubscriberInterface
+{
+    public $listeners = array();
+
+    public static $subscriber;
+
+    public function addListener($eventName, $listener, $priority = 0)
+    {
+        $this->listeners[] = array($eventName, $listener[1], $priority);
+    }
+
+    public static function getSubscribedEvents()
+    {
+        $callback = array(self::$subscriber, 'getSubscribedEvents');
+
+        return $callback();
+    }
+}
Index: vendor/symfony/event-dispatcher/EventDispatcher.php
===================================================================
--- vendor/symfony/event-dispatcher/EventDispatcher.php	(revision 55)
+++ vendor/symfony/event-dispatcher/EventDispatcher.php	(revision 57)
@@ -24,6 +24,7 @@
  * @author Fabien Potencier <fabien@symfony.com>
  * @author Jordi Boggiano <j.boggiano@seld.be>
  * @author Jordan Alliot <jordan.alliot@gmail.com>
+ * @author Nicolas Grekas <p@tchwork.com>
  */
 class EventDispatcher implements EventDispatcherInterface
 {
@@ -52,7 +53,7 @@
     public function getListeners($eventName = null)
     {
         if (null !== $eventName) {
-            if (!isset($this->listeners[$eventName])) {
+            if (empty($this->listeners[$eventName])) {
                 return array();
             }
 
@@ -77,13 +78,23 @@
      */
     public function getListenerPriority($eventName, $listener)
     {
-        if (!isset($this->listeners[$eventName])) {
+        if (empty($this->listeners[$eventName])) {
             return;
         }
 
+        if (is_array($listener) && isset($listener[0]) && $listener[0] instanceof \Closure) {
+            $listener[0] = $listener[0]();
+        }
+
         foreach ($this->listeners[$eventName] as $priority => $listeners) {
-            if (false !== in_array($listener, $listeners, true)) {
-                return $priority;
+            foreach ($listeners as $k => $v) {
+                if ($v !== $listener && is_array($v) && isset($v[0]) && $v[0] instanceof \Closure) {
+                    $v[0] = $v[0]();
+                    $this->listeners[$eventName][$priority][$k] = $v;
+                }
+                if ($v === $listener) {
+                    return $priority;
+                }
             }
         }
     }
@@ -93,7 +104,17 @@
      */
     public function hasListeners($eventName = null)
     {
-        return (bool) $this->getListeners($eventName);
+        if (null !== $eventName) {
+            return !empty($this->listeners[$eventName]);
+        }
+
+        foreach ($this->listeners as $eventListeners) {
+            if ($eventListeners) {
+                return true;
+            }
+        }
+
+        return false;
     }
 
     /**
@@ -110,13 +131,30 @@
      */
     public function removeListener($eventName, $listener)
     {
-        if (!isset($this->listeners[$eventName])) {
+        if (empty($this->listeners[$eventName])) {
             return;
         }
 
+        if (is_array($listener) && isset($listener[0]) && $listener[0] instanceof \Closure) {
+            $listener[0] = $listener[0]();
+        }
+
         foreach ($this->listeners[$eventName] as $priority => $listeners) {
-            if (false !== ($key = array_search($listener, $listeners, true))) {
-                unset($this->listeners[$eventName][$priority][$key], $this->sorted[$eventName]);
+            foreach ($listeners as $k => $v) {
+                if ($v !== $listener && is_array($v) && isset($v[0]) && $v[0] instanceof \Closure) {
+                    $v[0] = $v[0]();
+                }
+                if ($v === $listener) {
+                    unset($listeners[$k], $this->sorted[$eventName]);
+                } else {
+                    $listeners[$k] = $v;
+                }
+            }
+
+            if ($listeners) {
+                $this->listeners[$eventName][$priority] = $listeners;
+            } else {
+                unset($this->listeners[$eventName][$priority]);
             }
         }
     }
@@ -183,6 +221,16 @@
     private function sortListeners($eventName)
     {
         krsort($this->listeners[$eventName]);
-        $this->sorted[$eventName] = call_user_func_array('array_merge', $this->listeners[$eventName]);
+        $this->sorted[$eventName] = array();
+
+        foreach ($this->listeners[$eventName] as $priority => $listeners) {
+            foreach ($listeners as $k => $listener) {
+                if (is_array($listener) && isset($listener[0]) && $listener[0] instanceof \Closure) {
+                    $listener[0] = $listener[0]();
+                    $this->listeners[$eventName][$priority][$k] = $listener;
+                }
+                $this->sorted[$eventName][] = $listener;
+            }
+        }
     }
 }
Index: vendor/symfony/event-dispatcher/Tests/AbstractEventDispatcherTest.php
===================================================================
--- vendor/symfony/event-dispatcher/Tests/AbstractEventDispatcherTest.php	(revision 55)
+++ vendor/symfony/event-dispatcher/Tests/AbstractEventDispatcherTest.php	(revision 57)
@@ -56,6 +56,7 @@
     {
         $this->dispatcher->addListener('pre.foo', array($this->listener, 'preFoo'));
         $this->dispatcher->addListener('post.foo', array($this->listener, 'postFoo'));
+        $this->assertTrue($this->dispatcher->hasListeners());
         $this->assertTrue($this->dispatcher->hasListeners(self::preFoo));
         $this->assertTrue($this->dispatcher->hasListeners(self::postFoo));
         $this->assertCount(1, $this->dispatcher->getListeners(self::preFoo));
@@ -302,6 +303,73 @@
         $this->assertFalse($this->dispatcher->hasListeners('foo'));
         $this->assertFalse($this->dispatcher->hasListeners());
     }
+
+    public function testHasListenersIsLazy()
+    {
+        $called = 0;
+        $listener = array(function () use (&$called) { ++$called; }, 'onFoo');
+        $this->dispatcher->addListener('foo', $listener);
+        $this->assertTrue($this->dispatcher->hasListeners());
+        $this->assertTrue($this->dispatcher->hasListeners('foo'));
+        $this->assertSame(0, $called);
+    }
+
+    public function testDispatchLazyListener()
+    {
+        $called = 0;
+        $factory = function () use (&$called) {
+            ++$called;
+
+            return new TestWithDispatcher();
+        };
+        $this->dispatcher->addListener('foo', array($factory, 'foo'));
+        $this->assertSame(0, $called);
+        $this->dispatcher->dispatch('foo', new Event());
+        $this->dispatcher->dispatch('foo', new Event());
+        $this->assertSame(1, $called);
+    }
+
+    public function testRemoveFindsLazyListeners()
+    {
+        $test = new TestWithDispatcher();
+        $factory = function () use ($test) { return $test; };
+
+        $this->dispatcher->addListener('foo', array($factory, 'foo'));
+        $this->assertTrue($this->dispatcher->hasListeners('foo'));
+        $this->dispatcher->removeListener('foo', array($test, 'foo'));
+        $this->assertFalse($this->dispatcher->hasListeners('foo'));
+
+        $this->dispatcher->addListener('foo', array($test, 'foo'));
+        $this->assertTrue($this->dispatcher->hasListeners('foo'));
+        $this->dispatcher->removeListener('foo', array($factory, 'foo'));
+        $this->assertFalse($this->dispatcher->hasListeners('foo'));
+    }
+
+    public function testPriorityFindsLazyListeners()
+    {
+        $test = new TestWithDispatcher();
+        $factory = function () use ($test) { return $test; };
+
+        $this->dispatcher->addListener('foo', array($factory, 'foo'), 3);
+        $this->assertSame(3, $this->dispatcher->getListenerPriority('foo', array($test, 'foo')));
+        $this->dispatcher->removeListener('foo', array($factory, 'foo'));
+
+        $this->dispatcher->addListener('foo', array($test, 'foo'), 5);
+        $this->assertSame(5, $this->dispatcher->getListenerPriority('foo', array($factory, 'foo')));
+    }
+
+    public function testGetLazyListeners()
+    {
+        $test = new TestWithDispatcher();
+        $factory = function () use ($test) { return $test; };
+
+        $this->dispatcher->addListener('foo', array($factory, 'foo'), 3);
+        $this->assertSame(array(array($test, 'foo')), $this->dispatcher->getListeners('foo'));
+
+        $this->dispatcher->removeListener('foo', array($test, 'foo'));
+        $this->dispatcher->addListener('bar', array($factory, 'foo'), 3);
+        $this->assertSame(array('bar' => array(array($test, 'foo'))), $this->dispatcher->getListeners());
+    }
 }
 
 class CallableClass
Index: vendor/symfony/event-dispatcher/Tests/ContainerAwareEventDispatcherTest.php
===================================================================
--- vendor/symfony/event-dispatcher/Tests/ContainerAwareEventDispatcherTest.php	(revision 55)
+++ vendor/symfony/event-dispatcher/Tests/ContainerAwareEventDispatcherTest.php	(revision 57)
@@ -16,6 +16,9 @@
 use Symfony\Component\EventDispatcher\Event;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
+/**
+ * @group legacy
+ */
 class ContainerAwareEventDispatcherTest extends AbstractEventDispatcherTest
 {
     protected function createEventDispatcher()
Index: vendor/symfony/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php
===================================================================
--- vendor/symfony/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php	(revision 55)
+++ vendor/symfony/event-dispatcher/Tests/Debug/TraceableEventDispatcherTest.php	(revision 57)
@@ -13,7 +13,6 @@
 
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\EventDispatcher\Debug\TraceableEventDispatcher;
-use Symfony\Component\EventDispatcher\Debug\WrappedListener;
 use Symfony\Component\EventDispatcher\EventDispatcherInterface;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\EventDispatcher\EventDispatcher;
@@ -105,43 +104,26 @@
         $this->assertCount(0, $dispatcher->getListeners('foo'));
     }
 
-    /**
-     * @dataProvider isWrappedDataProvider
-     *
-     * @param bool $isWrapped
-     */
-    public function testGetCalledListeners($isWrapped)
+    public function testGetCalledListeners()
     {
-        $dispatcher = new EventDispatcher();
-        $stopWatch = new Stopwatch();
-        $tdispatcher = new TraceableEventDispatcher($dispatcher, $stopWatch);
-
-        $listener = function () {};
-
-        $tdispatcher->addListener('foo', $listener, 5);
+        $tdispatcher = new TraceableEventDispatcher(new EventDispatcher(), new Stopwatch());
+        $tdispatcher->addListener('foo', function () {}, 5);
 
         $listeners = $tdispatcher->getNotCalledListeners();
-        $this->assertArrayHasKey('data', $listeners['foo.closure']);
-        unset($listeners['foo.closure']['data']);
+        $this->assertArrayHasKey('stub', $listeners['foo.closure']);
+        unset($listeners['foo.closure']['stub']);
         $this->assertEquals(array(), $tdispatcher->getCalledListeners());
         $this->assertEquals(array('foo.closure' => array('event' => 'foo', 'pretty' => 'closure', 'priority' => 5)), $listeners);
 
         $tdispatcher->dispatch('foo');
 
         $listeners = $tdispatcher->getCalledListeners();
-        unset($listeners['foo.closure']['data']);
+        $this->assertArrayHasKey('stub', $listeners['foo.closure']);
+        unset($listeners['foo.closure']['stub']);
         $this->assertEquals(array('foo.closure' => array('event' => 'foo', 'pretty' => 'closure', 'priority' => 5)), $listeners);
         $this->assertEquals(array(), $tdispatcher->getNotCalledListeners());
     }
 
-    public function isWrappedDataProvider()
-    {
-        return array(
-            array(false),
-            array(true),
-        );
-    }
-
     public function testGetCalledListenersNested()
     {
         $tdispatcher = null;
Index: vendor/symfony/event-dispatcher/Tests/DependencyInjection/RegisterListenersPassTest.php
===================================================================
--- vendor/symfony/event-dispatcher/Tests/DependencyInjection/RegisterListenersPassTest.php	(revision 55)
+++ vendor/symfony/event-dispatcher/Tests/DependencyInjection/RegisterListenersPassTest.php	(revision 57)
@@ -12,7 +12,9 @@
 namespace Symfony\Component\EventDispatcher\Tests\DependencyInjection;
 
 use PHPUnit\Framework\TestCase;
+use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
+use Symfony\Component\DependencyInjection\Reference;
 use Symfony\Component\EventDispatcher\DependencyInjection\RegisterListenersPass;
 
 class RegisterListenersPassTest extends TestCase
@@ -32,9 +34,6 @@
 
         $definition = $this->getMockBuilder('Symfony\Component\DependencyInjection\Definition')->getMock();
         $definition->expects($this->atLeastOnce())
-            ->method('isPublic')
-            ->will($this->returnValue(true));
-        $definition->expects($this->atLeastOnce())
             ->method('getClass')
             ->will($this->returnValue('stdClass'));
 
@@ -64,9 +63,6 @@
 
         $definition = $this->getMockBuilder('Symfony\Component\DependencyInjection\Definition')->getMock();
         $definition->expects($this->atLeastOnce())
-            ->method('isPublic')
-            ->will($this->returnValue(true));
-        $definition->expects($this->atLeastOnce())
             ->method('getClass')
             ->will($this->returnValue('Symfony\Component\EventDispatcher\Tests\DependencyInjection\SubscriberService'));
 
@@ -94,35 +90,7 @@
 
     /**
      * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage The service "foo" must be public as event listeners are lazy-loaded.
-     */
-    public function testPrivateEventListener()
-    {
-        $container = new ContainerBuilder();
-        $container->register('foo', 'stdClass')->setPublic(false)->addTag('kernel.event_listener', array());
-        $container->register('event_dispatcher', 'stdClass');
-
-        $registerListenersPass = new RegisterListenersPass();
-        $registerListenersPass->process($container);
-    }
-
-    /**
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage The service "foo" must be public as event subscribers are lazy-loaded.
-     */
-    public function testPrivateEventSubscriber()
-    {
-        $container = new ContainerBuilder();
-        $container->register('foo', 'stdClass')->setPublic(false)->addTag('kernel.event_subscriber', array());
-        $container->register('event_dispatcher', 'stdClass');
-
-        $registerListenersPass = new RegisterListenersPass();
-        $registerListenersPass->process($container);
-    }
-
-    /**
-     * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage The service "foo" must not be abstract as event listeners are lazy-loaded.
+     * @expectedExceptionMessage The service "foo" tagged "kernel.event_listener" must not be abstract.
      */
     public function testAbstractEventListener()
     {
@@ -136,7 +104,7 @@
 
     /**
      * @expectedException \InvalidArgumentException
-     * @expectedExceptionMessage The service "foo" must not be abstract as event subscribers are lazy-loaded.
+     * @expectedExceptionMessage The service "foo" tagged "kernel.event_subscriber" must not be abstract.
      */
     public function testAbstractEventSubscriber()
     {
@@ -160,16 +128,17 @@
         $registerListenersPass->process($container);
 
         $definition = $container->getDefinition('event_dispatcher');
-        $expected_calls = array(
+        $expectedCalls = array(
             array(
-                'addSubscriberService',
+                'addListener',
                 array(
-                    'foo',
-                    'Symfony\Component\EventDispatcher\Tests\DependencyInjection\SubscriberService',
+                    'event',
+                    array(new ServiceClosureArgument(new Reference('foo')), 'onEvent'),
+                    0,
                 ),
             ),
         );
-        $this->assertSame($expected_calls, $definition->getMethodCalls());
+        $this->assertEquals($expectedCalls, $definition->getMethodCalls());
     }
 
     /**
@@ -191,5 +160,8 @@
 {
     public static function getSubscribedEvents()
     {
+        return array(
+            'event' => 'onEvent',
+        );
     }
 }
Index: vendor/symfony/event-dispatcher/composer.json
===================================================================
--- vendor/symfony/event-dispatcher/composer.json	(revision 55)
+++ vendor/symfony/event-dispatcher/composer.json	(revision 57)
@@ -19,12 +19,15 @@
         "php": ">=5.5.9"
     },
     "require-dev": {
-        "symfony/dependency-injection": "~2.8|~3.0",
+        "symfony/dependency-injection": "~3.3",
         "symfony/expression-language": "~2.8|~3.0",
         "symfony/config": "~2.8|~3.0",
         "symfony/stopwatch": "~2.8|~3.0",
         "psr/log": "~1.0"
     },
+    "conflict": {
+        "symfony/dependency-injection": "<3.3"
+    },
     "suggest": {
         "symfony/dependency-injection": "",
         "symfony/http-kernel": ""
@@ -38,7 +41,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "3.2-dev"
+            "dev-master": "3.3-dev"
         }
     }
 }
Index: vendor/symfony/polyfill-mbstring/Mbstring.php
===================================================================
--- vendor/symfony/polyfill-mbstring/Mbstring.php	(revision 55)
+++ vendor/symfony/polyfill-mbstring/Mbstring.php	(revision 57)
@@ -147,6 +147,9 @@
 
         if ('UTF-8' === $encoding) {
             $encoding = null;
+            if (!preg_match('//u', $s)) {
+                $s = @iconv('UTF-8', 'UTF-8//IGNORE', $s);
+            }
         } else {
             $s = iconv($encoding, 'UTF-8//IGNORE', $s);
         }
@@ -336,10 +339,9 @@
 
     public static function mb_strlen($s, $encoding = null)
     {
-        switch ($encoding = self::getEncoding($encoding)) {
-            case 'ASCII':
-            case 'CP850':
-                return strlen($s);
+        $encoding = self::getEncoding($encoding);
+        if ('CP850' === $encoding || 'ASCII' === $encoding) {
+            return strlen($s);
         }
 
         return @iconv_strlen($s, $encoding);
@@ -348,6 +350,9 @@
     public static function mb_strpos($haystack, $needle, $offset = 0, $encoding = null)
     {
         $encoding = self::getEncoding($encoding);
+        if ('CP850' === $encoding || 'ASCII' === $encoding) {
+            return strpos($haystack, $needle, $offset);
+        }
 
         if ('' === $needle .= '') {
             trigger_error(__METHOD__.': Empty delimiter', E_USER_WARNING);
@@ -361,6 +366,9 @@
     public static function mb_strrpos($haystack, $needle, $offset = 0, $encoding = null)
     {
         $encoding = self::getEncoding($encoding);
+        if ('CP850' === $encoding || 'ASCII' === $encoding) {
+            return strrpos($haystack, $needle, $offset);
+        }
 
         if ($offset != (int) $offset) {
             $offset = 0;
@@ -400,6 +408,9 @@
     public static function mb_substr($s, $start, $length = null, $encoding = null)
     {
         $encoding = self::getEncoding($encoding);
+        if ('CP850' === $encoding || 'ASCII' === $encoding) {
+            return substr($s, $start, null === $length ? 2147483647 : $length);
+        }
 
         if ($start < 0) {
             $start = iconv_strlen($s, $encoding) + $start;
@@ -438,6 +449,9 @@
     public static function mb_strrchr($haystack, $needle, $part = false, $encoding = null)
     {
         $encoding = self::getEncoding($encoding);
+        if ('CP850' === $encoding || 'ASCII' === $encoding) {
+            return strrchr($haystack, $needle, $part);
+        }
         $needle = self::mb_substr($needle, 0, 1, $encoding);
         $pos = iconv_strrpos($haystack, $needle, $encoding);
 
Index: vendor/symfony/polyfill-mbstring/composer.json
===================================================================
--- vendor/symfony/polyfill-mbstring/composer.json	(revision 55)
+++ vendor/symfony/polyfill-mbstring/composer.json	(revision 57)
@@ -28,7 +28,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "1.3-dev"
+            "dev-master": "1.4-dev"
         }
     }
 }
Index: vendor/symfony/polyfill-php56/composer.json
===================================================================
--- vendor/symfony/polyfill-php56/composer.json	(revision 55)
+++ vendor/symfony/polyfill-php56/composer.json	(revision 57)
@@ -26,7 +26,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "1.3-dev"
+            "dev-master": "1.4-dev"
         }
     }
 }
Index: vendor/symfony/polyfill-util/composer.json
===================================================================
--- vendor/symfony/polyfill-util/composer.json	(revision 55)
+++ vendor/symfony/polyfill-util/composer.json	(revision 57)
@@ -24,7 +24,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "1.3-dev"
+            "dev-master": "1.4-dev"
         }
     }
 }
Index: vendor/symfony/yaml/CHANGELOG.md
===================================================================
--- vendor/symfony/yaml/CHANGELOG.md	(revision 55)
+++ vendor/symfony/yaml/CHANGELOG.md	(revision 57)
@@ -1,12 +1,60 @@
 CHANGELOG
 =========
 
+3.3.0
+-----
+
+ * Starting an unquoted string with a question mark followed by a space is
+   deprecated and will throw a `ParseException` in Symfony 4.0.
+
+ * Deprecated support for implicitly parsing non-string mapping keys as strings.
+   Mapping keys that are no strings will lead to a `ParseException` in Symfony
+   4.0. Use the `PARSE_KEYS_AS_STRINGS` flag to opt-in for keys to be parsed as
+   strings.
+
+   Before:
+
+   ```php
+   $yaml = <<<YAML
+   null: null key
+   true: boolean true
+   1: integer key
+   2.0: float key
+   YAML;
+
+   Yaml::parse($yaml);
+   ```
+
+   After:
+
+   ```php
+
+   $yaml = <<<YAML
+   null: null key
+   true: boolean true
+   1: integer key
+   2.0: float key
+   YAML;
+
+   Yaml::parse($yaml, Yaml::PARSE_KEYS_AS_STRINGS);
+   ```
+
+ * Omitted mapping values will be parsed as `null`.
+
+ * Omitting the key of a mapping is deprecated and will throw a `ParseException` in Symfony 4.0.
+
+ * Added support for dumping empty PHP arrays as YAML sequences:
+
+   ```php
+   Yaml::dump([], 0, 0, Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE);
+   ```
+
 3.2.0
 -----
 
  * Mappings with a colon (`:`) that is not followed by a whitespace are deprecated
-   and will lead to a `ParseException` in Symfony 4.0 (e.g. `foo:bar` must be
-   `foo: bar`).
+   when the mapping key is not quoted and will lead to a `ParseException` in
+   Symfony 4.0 (e.g. `foo:bar` must be `foo: bar`).
 
  * Added support for parsing PHP constants:
 
Index: vendor/symfony/yaml/Command/LintCommand.php
===================================================================
--- vendor/symfony/yaml/Command/LintCommand.php	(revision 55)
+++ vendor/symfony/yaml/Command/LintCommand.php	(revision 57)
@@ -18,6 +18,7 @@
 use Symfony\Component\Console\Style\SymfonyStyle;
 use Symfony\Component\Yaml\Exception\ParseException;
 use Symfony\Component\Yaml\Parser;
+use Symfony\Component\Yaml\Yaml;
 
 /**
  * Validates YAML files syntax and outputs encountered errors.
@@ -102,10 +103,20 @@
 
     private function validate($content, $file = null)
     {
+        $prevErrorHandler = set_error_handler(function ($level, $message, $file, $line) use (&$prevErrorHandler) {
+            if (E_USER_DEPRECATED === $level) {
+                throw new ParseException($message);
+            }
+
+            return $prevErrorHandler ? $prevErrorHandler($level, $message, $file, $line) : false;
+        });
+
         try {
-            $this->getParser()->parse($content);
+            $this->getParser()->parse($content, Yaml::PARSE_CONSTANT);
         } catch (ParseException $e) {
             return array('file' => $file, 'valid' => false, 'message' => $e->getMessage());
+        } finally {
+            restore_error_handler();
         }
 
         return array('file' => $file, 'valid' => true);
Index: vendor/symfony/yaml/Dumper.php
===================================================================
--- vendor/symfony/yaml/Dumper.php	(revision 55)
+++ vendor/symfony/yaml/Dumper.php	(revision 57)
@@ -41,6 +41,8 @@
      * Sets the indentation.
      *
      * @param int $num The amount of spaces to use for indentation of nested nodes
+     *
+     * @deprecated since version 3.1, to be removed in 4.0. Pass the indentation to the constructor instead.
      */
     public function setIndentation($num)
     {
@@ -81,15 +83,20 @@
 
         $output = '';
         $prefix = $indent ? str_repeat(' ', $indent) : '';
+        $dumpObjectAsInlineMap = true;
+
+        if (Yaml::DUMP_OBJECT_AS_MAP & $flags && ($input instanceof \ArrayObject || $input instanceof \stdClass)) {
+            $dumpObjectAsInlineMap = empty((array) $input);
+        }
 
-        if ($inline <= 0 || !is_array($input) || empty($input)) {
+        if ($inline <= 0 || (!is_array($input) && $dumpObjectAsInlineMap) || empty($input)) {
             $output .= $prefix.Inline::dump($input, $flags);
         } else {
-            $isAHash = Inline::isHash($input);
+            $dumpAsMap = Inline::isHash($input);
 
             foreach ($input as $key => $value) {
                 if ($inline >= 1 && Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK & $flags && is_string($value) && false !== strpos($value, "\n")) {
-                    $output .= sprintf("%s%s%s |\n", $prefix, $isAHash ? Inline::dump($key, $flags).':' : '-', '');
+                    $output .= sprintf("%s%s%s |\n", $prefix, $dumpAsMap ? Inline::dump($key, $flags).':' : '-', '');
 
                     foreach (preg_split('/\n|\r\n/', $value) as $row) {
                         $output .= sprintf("%s%s%s\n", $prefix, str_repeat(' ', $this->indentation), $row);
@@ -98,11 +105,17 @@
                     continue;
                 }
 
-                $willBeInlined = $inline - 1 <= 0 || !is_array($value) || empty($value);
+                $dumpObjectAsInlineMap = true;
+
+                if (Yaml::DUMP_OBJECT_AS_MAP & $flags && ($value instanceof \ArrayObject || $value instanceof \stdClass)) {
+                    $dumpObjectAsInlineMap = empty((array) $value);
+                }
+
+                $willBeInlined = $inline - 1 <= 0 || !is_array($value) && $dumpObjectAsInlineMap || empty($value);
 
                 $output .= sprintf('%s%s%s%s',
                     $prefix,
-                    $isAHash ? Inline::dump($key, $flags).':' : '-',
+                    $dumpAsMap ? Inline::dump($key, $flags).':' : '-',
                     $willBeInlined ? ' ' : "\n",
                     $this->dump($value, $inline - 1, $willBeInlined ? 0 : $indent + $this->indentation, $flags)
                 ).($willBeInlined ? "\n" : '');
Index: vendor/symfony/yaml/Inline.php
===================================================================
--- vendor/symfony/yaml/Inline.php	(revision 55)
+++ vendor/symfony/yaml/Inline.php	(revision 57)
@@ -13,6 +13,7 @@
 
 use Symfony\Component\Yaml\Exception\ParseException;
 use Symfony\Component\Yaml\Exception\DumpException;
+use Symfony\Component\Yaml\Tag\TaggedValue;
 
 /**
  * Inline implements a YAML parser/dumper for the YAML inline syntax.
@@ -94,7 +95,8 @@
         }
 
         $i = 0;
-        switch ($value[0]) {
+        $tag = self::parseTag($value, $i, $flags);
+        switch ($value[$i]) {
             case '[':
                 $result = self::parseSequence($value, $flags, $i, $references);
                 ++$i;
@@ -104,7 +106,11 @@
                 ++$i;
                 break;
             default:
-                $result = self::parseScalar($value, $flags, null, array('"', "'"), $i, true, $references);
+                $result = self::parseScalar($value, $flags, null, $i, null === $tag, $references);
+        }
+
+        if (null !== $tag) {
+            return new TaggedValue($tag, $result);
         }
 
         // some comments are allowed at the end
@@ -159,12 +165,16 @@
             case $value instanceof \DateTimeInterface:
                 return $value->format('c');
             case is_object($value):
+                if ($value instanceof TaggedValue) {
+                    return '!'.$value->getTag().' '.self::dump($value->getValue(), $flags);
+                }
+
                 if (Yaml::DUMP_OBJECT & $flags) {
                     return '!php/object:'.serialize($value);
                 }
 
                 if (Yaml::DUMP_OBJECT_AS_MAP & $flags && ($value instanceof \stdClass || $value instanceof \ArrayObject)) {
-                    return self::dumpArray((array) $value, $flags);
+                    return self::dumpArray($value, $flags & ~Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE);
                 }
 
                 if (Yaml::DUMP_EXCEPTION_ON_INVALID_TYPE & $flags) {
@@ -224,12 +234,16 @@
      *
      * @internal
      *
-     * @param array $value The PHP array to check
+     * @param array|\ArrayObject|\stdClass $value The PHP array or array-like object to check
      *
      * @return bool true if value is hash array, false otherwise
      */
-    public static function isHash(array $value)
+    public static function isHash($value)
     {
+        if ($value instanceof \stdClass || $value instanceof \ArrayObject) {
+            return true;
+        }
+
         $expectedKey = 0;
 
         foreach ($value as $key => $val) {
@@ -252,7 +266,7 @@
     private static function dumpArray($value, $flags)
     {
         // array
-        if ($value && !self::isHash($value)) {
+        if (($value || Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE & $flags) && !self::isHash($value)) {
             $output = array();
             foreach ($value as $val) {
                 $output[] = self::dump($val, $flags);
@@ -276,7 +290,6 @@
      * @param string   $scalar
      * @param int      $flags
      * @param string[] $delimiters
-     * @param string[] $stringDelimiters
      * @param int      &$i
      * @param bool     $evaluate
      * @param array    $references
@@ -287,9 +300,9 @@
      *
      * @internal
      */
-    public static function parseScalar($scalar, $flags = 0, $delimiters = null, $stringDelimiters = array('"', "'"), &$i = 0, $evaluate = true, $references = array())
+    public static function parseScalar($scalar, $flags = 0, $delimiters = null, &$i = 0, $evaluate = true, $references = array(), $legacyOmittedKeySupport = false)
     {
-        if (in_array($scalar[$i], $stringDelimiters)) {
+        if (in_array($scalar[$i], array('"', "'"))) {
             // quoted scalar
             $output = self::parseQuotedScalar($scalar, $i);
 
@@ -309,7 +322,7 @@
                 if (Parser::preg_match('/[ \t]+#/', $output, $match, PREG_OFFSET_CAPTURE)) {
                     $output = substr($output, 0, $match[0][1]);
                 }
-            } elseif (Parser::preg_match('/^(.+?)('.implode('|', $delimiters).')/', substr($scalar, $i), $match)) {
+            } elseif (Parser::preg_match('/^(.'.($legacyOmittedKeySupport ? '+' : '*').'?)('.implode('|', $delimiters).')/', substr($scalar, $i), $match)) {
                 $output = $match[1];
                 $i += strlen($output);
             } else {
@@ -383,23 +396,28 @@
 
         // [foo, bar, ...]
         while ($i < $len) {
+            if (']' === $sequence[$i]) {
+                return $output;
+            }
+            if (',' === $sequence[$i] || ' ' === $sequence[$i]) {
+                ++$i;
+
+                continue;
+            }
+
+            $tag = self::parseTag($sequence, $i, $flags);
             switch ($sequence[$i]) {
                 case '[':
                     // nested sequence
-                    $output[] = self::parseSequence($sequence, $flags, $i, $references);
+                    $value = self::parseSequence($sequence, $flags, $i, $references);
                     break;
                 case '{':
                     // nested mapping
-                    $output[] = self::parseMapping($sequence, $flags, $i, $references);
-                    break;
-                case ']':
-                    return $output;
-                case ',':
-                case ' ':
+                    $value = self::parseMapping($sequence, $flags, $i, $references);
                     break;
                 default:
                     $isQuoted = in_array($sequence[$i], array('"', "'"));
-                    $value = self::parseScalar($sequence, $flags, array(',', ']'), array('"', "'"), $i, true, $references);
+                    $value = self::parseScalar($sequence, $flags, array(',', ']'), $i, null === $tag, $references);
 
                     // the value can be an array if a reference has been resolved to an array var
                     if (is_string($value) && !$isQuoted && false !== strpos($value, ': ')) {
@@ -412,11 +430,15 @@
                         }
                     }
 
-                    $output[] = $value;
-
                     --$i;
             }
 
+            if (null !== $tag) {
+                $value = new TaggedValue($tag, $value);
+            }
+
+            $output[] = $value;
+
             ++$i;
         }
 
@@ -457,20 +479,38 @@
             }
 
             // key
-            $key = self::parseScalar($mapping, $flags, array(':', ' '), array('"', "'"), $i, false);
+            $isKeyQuoted = in_array($mapping[$i], array('"', "'"), true);
+            $key = self::parseScalar($mapping, $flags, array(':', ' '), $i, false, array(), true);
 
             if (':' !== $key && false === $i = strpos($mapping, ':', $i)) {
                 break;
             }
 
-            if (':' !== $key && (!isset($mapping[$i + 1]) || !in_array($mapping[$i + 1], array(' ', ',', '[', ']', '{', '}'), true))) {
-                @trigger_error('Using a colon that is not followed by an indication character (i.e. " ", ",", "[", "]", "{", "}" is deprecated since version 3.2 and will throw a ParseException in 4.0.', E_USER_DEPRECATED);
+            if (':' === $key) {
+                @trigger_error('Omitting the key of a mapping is deprecated and will throw a ParseException in 4.0.', E_USER_DEPRECATED);
+            }
+
+            if (!(Yaml::PARSE_KEYS_AS_STRINGS & $flags)) {
+                $evaluatedKey = self::evaluateScalar($key, $flags, $references);
+
+                if ('' !== $key && $evaluatedKey !== $key && !is_string($evaluatedKey) && !is_int($evaluatedKey)) {
+                    @trigger_error('Implicit casting of incompatible mapping keys to strings is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0. Pass the PARSE_KEYS_AS_STRINGS flag to explicitly enable the type casts.', E_USER_DEPRECATED);
+                }
             }
 
-            // value
-            $done = false;
+            if (':' !== $key && !$isKeyQuoted && (!isset($mapping[$i + 1]) || !in_array($mapping[$i + 1], array(' ', ',', '[', ']', '{', '}'), true))) {
+                @trigger_error('Using a colon after an unquoted mapping key that is not followed by an indication character (i.e. " ", ",", "[", "]", "{", "}") is deprecated since version 3.2 and will throw a ParseException in 4.0.', E_USER_DEPRECATED);
+            }
 
             while ($i < $len) {
+                if (':' === $mapping[$i] || ' ' === $mapping[$i]) {
+                    ++$i;
+
+                    continue;
+                }
+
+                $tag = self::parseTag($mapping, $i, $flags);
+                $duplicate = false;
                 switch ($mapping[$i]) {
                     case '[':
                         // nested sequence
@@ -478,12 +518,10 @@
                         // Spec: Keys MUST be unique; first one wins.
                         // Parser cannot abort this mapping earlier, since lines
                         // are processed sequentially.
-                        if (!isset($output[$key])) {
-                            $output[$key] = $value;
-                        } else {
-                            @trigger_error(sprintf('Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key, self::$parsedLineNumber + 1), E_USER_DEPRECATED);
+                        if (isset($output[$key])) {
+                            @trigger_error(sprintf('Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key), E_USER_DEPRECATED);
+                            $duplicate = true;
                         }
-                        $done = true;
                         break;
                     case '{':
                         // nested mapping
@@ -491,35 +529,33 @@
                         // Spec: Keys MUST be unique; first one wins.
                         // Parser cannot abort this mapping earlier, since lines
                         // are processed sequentially.
-                        if (!isset($output[$key])) {
-                            $output[$key] = $value;
-                        } else {
-                            @trigger_error(sprintf('Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key, self::$parsedLineNumber + 1), E_USER_DEPRECATED);
+                        if (isset($output[$key])) {
+                            @trigger_error(sprintf('Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key), E_USER_DEPRECATED);
+                            $duplicate = true;
                         }
-                        $done = true;
-                        break;
-                    case ':':
-                    case ' ':
                         break;
                     default:
-                        $value = self::parseScalar($mapping, $flags, array(',', '}'), array('"', "'"), $i, true, $references);
+                        $value = self::parseScalar($mapping, $flags, array(',', '}'), $i, null === $tag, $references);
                         // Spec: Keys MUST be unique; first one wins.
                         // Parser cannot abort this mapping earlier, since lines
                         // are processed sequentially.
-                        if (!isset($output[$key])) {
-                            $output[$key] = $value;
-                        } else {
-                            @trigger_error(sprintf('Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key, self::$parsedLineNumber + 1), E_USER_DEPRECATED);
+                        if (isset($output[$key])) {
+                            @trigger_error(sprintf('Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key), E_USER_DEPRECATED);
+                            $duplicate = true;
                         }
-                        $done = true;
                         --$i;
                 }
 
+                if (!$duplicate) {
+                    if (null !== $tag) {
+                        $output[$key] = new TaggedValue($tag, $value);
+                    } else {
+                        $output[$key] = $value;
+                    }
+                }
                 ++$i;
 
-                if ($done) {
-                    continue 2;
-                }
+                continue 2;
             }
         }
 
@@ -570,8 +606,7 @@
                 return true;
             case 'false' === $scalarLower:
                 return false;
-            // Optimise for returning strings.
-            case $scalar[0] === '+' || $scalar[0] === '-' || $scalar[0] === '.' || $scalar[0] === '!' || is_numeric($scalar[0]):
+            case $scalar[0] === '!':
                 switch (true) {
                     case 0 === strpos($scalar, '!str'):
                         return (string) substr($scalar, 5);
@@ -614,6 +649,15 @@
                         return;
                     case 0 === strpos($scalar, '!!float '):
                         return (float) substr($scalar, 8);
+                    case 0 === strpos($scalar, '!!binary '):
+                        return self::evaluateBinaryScalar(substr($scalar, 9));
+                    default:
+                        @trigger_error(sprintf('Using the unquoted scalar value "%s" is deprecated since version 3.3 and will be considered as a tagged value in 4.0. You must quote it.', $scalar), E_USER_DEPRECATED);
+                }
+
+            // Optimize for returning strings.
+            case $scalar[0] === '+' || $scalar[0] === '-' || $scalar[0] === '.' || is_numeric($scalar[0]):
+                switch (true) {
                     case Parser::preg_match('{^[+-]?[0-9][0-9_]*$}', $scalar):
                         $scalar = str_replace('_', '', (string) $scalar);
                         // omitting the break / return as integers are handled in the next case
@@ -637,8 +681,6 @@
                         return -log(0);
                     case '-.inf' === $scalarLower:
                         return log(0);
-                    case 0 === strpos($scalar, '!!binary '):
-                        return self::evaluateBinaryScalar(substr($scalar, 9));
                     case Parser::preg_match('/^(-|\+)?[0-9][0-9,]*(\.[0-9_]+)?$/', $scalar):
                     case Parser::preg_match('/^(-|\+)?[0-9][0-9_]*(\.[0-9_]+)?$/', $scalar):
                         if (false !== strpos($scalar, ',')) {
@@ -659,9 +701,48 @@
 
                         return $time;
                 }
-            default:
-                return (string) $scalar;
         }
+
+        return (string) $scalar;
+    }
+
+    /**
+     * @param string $value
+     * @param int    &$i
+     * @param int    $flags
+     *
+     * @return null|string
+     */
+    private static function parseTag($value, &$i, $flags)
+    {
+        if ('!' !== $value[$i]) {
+            return;
+        }
+
+        $tagLength = strcspn($value, " \t\n", $i + 1);
+        $tag = substr($value, $i + 1, $tagLength);
+
+        $nextOffset = $i + $tagLength + 1;
+        $nextOffset += strspn($value, ' ', $nextOffset);
+
+        // Is followed by a scalar
+        if (!isset($value[$nextOffset]) || !in_array($value[$nextOffset], array('[', '{'), true)) {
+            // Manage scalars in {@link self::evaluateScalar()}
+            return;
+        }
+
+        // Built-in tags
+        if ($tag && '!' === $tag[0]) {
+            throw new ParseException(sprintf('The built-in tag "!%s" is not implemented.', $tag));
+        }
+
+        if (Yaml::PARSE_CUSTOM_TAGS & $flags) {
+            $i = $nextOffset;
+
+            return $tag;
+        }
+
+        throw new ParseException(sprintf('Tags support is not enabled. Enable the `Yaml::PARSE_CUSTOM_TAGS` flag to use "!%s".', $tag));
     }
 
     /**
Index: vendor/symfony/yaml/Parser.php
===================================================================
--- vendor/symfony/yaml/Parser.php	(revision 55)
+++ vendor/symfony/yaml/Parser.php	(revision 57)
@@ -12,6 +12,7 @@
 namespace Symfony\Component\Yaml;
 
 use Symfony\Component\Yaml\Exception\ParseException;
+use Symfony\Component\Yaml\Tag\TaggedValue;
 
 /**
  * Parser parses YAML strings to convert them to PHP arrays.
@@ -20,7 +21,7 @@
  */
 class Parser
 {
-    const TAG_PATTERN = '((?P<tag>![\w!.\/:-]+) +)?';
+    const TAG_PATTERN = '(?P<tag>![\w!.\/:-]+)';
     const BLOCK_SCALAR_HEADER_PATTERN = '(?P<separator>\||>)(?P<modifiers>\+|\-|\d+|\+\d+|\-\d+|\d+\+|\d+\-)?(?P<comments> +#.*)?';
 
     private $offset = 0;
@@ -32,18 +33,19 @@
     private $skippedLineNumbers = array();
     private $locallySkippedLineNumbers = array();
 
-    /**
-     * Constructor.
-     *
-     * @param int      $offset             The offset of YAML document (used for line numbers in error messages)
-     * @param int|null $totalNumberOfLines The overall number of lines being parsed
-     * @param int[]    $skippedLineNumbers Number of comment lines that have been skipped by the parser
-     */
-    public function __construct($offset = 0, $totalNumberOfLines = null, array $skippedLineNumbers = array())
+    public function __construct()
     {
-        $this->offset = $offset;
-        $this->totalNumberOfLines = $totalNumberOfLines;
-        $this->skippedLineNumbers = $skippedLineNumbers;
+        if (func_num_args() > 0) {
+            @trigger_error(sprintf('The constructor arguments $offset, $totalNumberOfLines, $skippedLineNumbers of %s are deprecated and will be removed in 4.0', self::class), E_USER_DEPRECATED);
+
+            $this->offset = func_get_arg(0);
+            if (func_num_args() > 1) {
+                $this->totalNumberOfLines = func_get_arg(1);
+            }
+            if (func_num_args() > 2) {
+                $this->skippedLineNumbers = func_get_arg(2);
+            }
+        }
     }
 
     /**
@@ -134,11 +136,26 @@
             $this->totalNumberOfLines = count($this->lines);
         }
 
+        if (!$this->moveToNextLine()) {
+            return null;
+        }
+
         $data = array();
         $context = null;
         $allowOverwrite = false;
 
-        while ($this->moveToNextLine()) {
+        while ($this->isCurrentLineEmpty()) {
+            if (!$this->moveToNextLine()) {
+                return null;
+            }
+        }
+
+        // Resolves the tag and returns if end of the document
+        if (null !== ($tag = $this->getLineTag($this->currentLine, $flags, false)) && !$this->moveToNextLine()) {
+            return new TaggedValue($tag, '');
+        }
+
+        do {
             if ($this->isCurrentLineEmpty()) {
                 continue;
             }
@@ -160,12 +177,21 @@
                     $values['value'] = $matches['value'];
                 }
 
+                if (isset($values['value'][1]) && '?' === $values['value'][0] && ' ' === $values['value'][1]) {
+                    @trigger_error('Starting an unquoted string with a question mark followed by a space is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', E_USER_DEPRECATED);
+                }
+
                 // array
                 if (!isset($values['value']) || '' == trim($values['value'], ' ') || 0 === strpos(ltrim($values['value'], ' '), '#')) {
                     $data[] = $this->parseBlock($this->getRealCurrentLineNb() + 1, $this->getNextEmbedBlock(null, true), $flags);
+                } elseif (null !== $subTag = $this->getLineTag(ltrim($values['value'], ' '), $flags)) {
+                    $data[] = new TaggedValue(
+                        $subTag,
+                        $this->parseBlock($this->getRealCurrentLineNb() + 1, $this->getNextEmbedBlock(null, true), $flags)
+                    );
                 } else {
                     if (isset($values['leadspaces'])
-                        && self::preg_match('#^(?P<key>'.Inline::REGEX_QUOTED_STRING.'|[^ \'"\{\[].*?) *\:(\s+(?P<value>.+))?$#u', rtrim($values['value']), $matches)
+                        && self::preg_match('#^(?P<key>'.Inline::REGEX_QUOTED_STRING.'|[^ \'"\{\[].*?) *\:(\s+(?P<value>.+?))?\s*$#u', $this->trimTag($values['value']), $matches)
                     ) {
                         // this is a compact notation element, add to next block and parse
                         $block = $values['value'];
@@ -182,7 +208,7 @@
                     $this->refs[$isRef] = end($data);
                 }
             } elseif (
-                self::preg_match('#^(?P<key>'.Inline::REGEX_QUOTED_STRING.'|[^ \'"\[\{].*?) *\:(\s+(?P<value>.+))?$#u', rtrim($this->currentLine), $values)
+                self::preg_match('#^(?P<key>'.Inline::REGEX_QUOTED_STRING.'|(?:!?!php/const:)?(?:![^\s]++\s++)?[^ \'"\[\{!].*?) *\:(\s++(?P<value>.+))?$#u', rtrim($this->currentLine), $values)
                 && (false === strpos($values['key'], ' #') || in_array($values['key'][0], array('"', "'")))
             ) {
                 if ($context && 'sequence' == $context) {
@@ -194,7 +220,15 @@
                 Inline::parse(null, $flags, $this->refs);
                 try {
                     Inline::$parsedLineNumber = $this->getRealCurrentLineNb();
-                    $key = Inline::parseScalar($values['key']);
+                    $i = 0;
+                    $evaluateKey = !(Yaml::PARSE_KEYS_AS_STRINGS & $flags);
+
+                    // constants in key will be evaluated anyway
+                    if (isset($values['key'][0]) && '!' === $values['key'][0] && Yaml::PARSE_CONSTANT & $flags) {
+                        $evaluateKey = true;
+                    }
+
+                    $key = Inline::parseScalar($values['key'], 0, null, $i, $evaluateKey);
                 } catch (ParseException $e) {
                     $e->setParsedLine($this->getRealCurrentLineNb() + 1);
                     $e->setSnippet($this->currentLine);
@@ -202,6 +236,11 @@
                     throw $e;
                 }
 
+                if (!(Yaml::PARSE_KEYS_AS_STRINGS & $flags) && !is_string($key) && !is_int($key)) {
+                    $keyType = is_numeric($key) ? 'numeric key' : 'non-string key';
+                    @trigger_error(sprintf('Implicit casting of %s to string is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0. Pass the PARSE_KEYS_AS_STRINGS flag to explicitly enable the type casts.', $keyType), E_USER_DEPRECATED);
+                }
+
                 // Convert float keys to strings, to avoid being converted to integers by PHP
                 if (is_float($key)) {
                     $key = (string) $key;
@@ -211,7 +250,7 @@
                     $mergeNode = true;
                     $allowOverwrite = true;
                     if (isset($values['value']) && 0 === strpos($values['value'], '*')) {
-                        $refName = substr($values['value'], 1);
+                        $refName = substr(rtrim($values['value']), 1);
                         if (!array_key_exists($refName, $this->refs)) {
                             throw new ParseException(sprintf('Reference "%s" does not exist.', $refName), $this->getRealCurrentLineNb() + 1, $this->currentLine);
                         }
@@ -252,23 +291,28 @@
                             $data += $parsed; // array union
                         }
                     }
-                } elseif (isset($values['value']) && self::preg_match('#^&(?P<ref>[^ ]+) *(?P<value>.*)#u', $values['value'], $matches)) {
+                } elseif (isset($values['value']) && self::preg_match('#^&(?P<ref>[^ ]++) *+(?P<value>.*)#u', $values['value'], $matches)) {
                     $isRef = $matches['ref'];
                     $values['value'] = $matches['value'];
                 }
 
+                $subTag = null;
                 if ($mergeNode) {
                     // Merge keys
-                } elseif (!isset($values['value']) || '' == trim($values['value'], ' ') || 0 === strpos(ltrim($values['value'], ' '), '#')) {
+                } elseif (!isset($values['value']) || '' === $values['value'] || 0 === strpos($values['value'], '#') || (null !== $subTag = $this->getLineTag($values['value'], $flags))) {
                     // hash
                     // if next line is less indented or equal, then it means that the current value is null
                     if (!$this->isNextLineIndented() && !$this->isNextLineUnIndentedCollection()) {
                         // Spec: Keys MUST be unique; first one wins.
                         // But overwriting is allowed when a merge node is used in current block.
                         if ($allowOverwrite || !isset($data[$key])) {
-                            $data[$key] = null;
+                            if (null !== $subTag) {
+                                $data[$key] = new TaggedValue($subTag, '');
+                            } else {
+                                $data[$key] = null;
+                            }
                         } else {
-                            @trigger_error(sprintf('Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key, $this->getRealCurrentLineNb() + 1), E_USER_DEPRECATED);
+                            @trigger_error(sprintf('Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key), E_USER_DEPRECATED);
                         }
                     } else {
                         // remember the parsed line number here in case we need it to provide some contexts in error messages below
@@ -277,19 +321,23 @@
                         // Spec: Keys MUST be unique; first one wins.
                         // But overwriting is allowed when a merge node is used in current block.
                         if ($allowOverwrite || !isset($data[$key])) {
-                            $data[$key] = $value;
+                            if (null !== $subTag) {
+                                $data[$key] = new TaggedValue($subTag, $value);
+                            } else {
+                                $data[$key] = $value;
+                            }
                         } else {
-                            @trigger_error(sprintf('Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key, $realCurrentLineNbKey + 1), E_USER_DEPRECATED);
+                            @trigger_error(sprintf('Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key), E_USER_DEPRECATED);
                         }
                     }
                 } else {
-                    $value = $this->parseValue($values['value'], $flags, $context);
+                    $value = $this->parseValue(rtrim($values['value']), $flags, $context);
                     // Spec: Keys MUST be unique; first one wins.
                     // But overwriting is allowed when a merge node is used in current block.
                     if ($allowOverwrite || !isset($data[$key])) {
                         $data[$key] = $value;
                     } else {
-                        @trigger_error(sprintf('Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key, $this->getRealCurrentLineNb() + 1), E_USER_DEPRECATED);
+                        @trigger_error(sprintf('Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated since version 3.2 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', $key), E_USER_DEPRECATED);
                     }
                 }
                 if ($isRef) {
@@ -301,6 +349,10 @@
                     throw new ParseException('Multiple documents are not supported.', $this->currentLineNb + 1, $this->currentLine);
                 }
 
+                if (isset($this->currentLine[1]) && '?' === $this->currentLine[0] && ' ' === $this->currentLine[1]) {
+                    @trigger_error('Starting an unquoted string with a question mark followed by a space is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.', E_USER_DEPRECATED);
+                }
+
                 // 1-liner optionally followed by newline(s)
                 if (is_string($value) && $this->lines[0] === trim($value)) {
                     try {
@@ -316,8 +368,52 @@
                     return $value;
                 }
 
+                // try to parse the value as a multi-line string as a last resort
+                if (0 === $this->currentLineNb) {
+                    $parseError = false;
+                    $previousLineWasNewline = false;
+                    $value = '';
+
+                    foreach ($this->lines as $line) {
+                        try {
+                            if (isset($line[0]) && ('"' === $line[0] || "'" === $line[0])) {
+                                $parsedLine = $line;
+                            } else {
+                                $parsedLine = Inline::parse($line, $flags, $this->refs);
+                            }
+
+                            if (!is_string($parsedLine)) {
+                                $parseError = true;
+                                break;
+                            }
+
+                            if ('' === trim($parsedLine)) {
+                                $value .= "\n";
+                                $previousLineWasNewline = true;
+                            } elseif ($previousLineWasNewline) {
+                                $value .= trim($parsedLine);
+                                $previousLineWasNewline = false;
+                            } else {
+                                $value .= ' '.trim($parsedLine);
+                                $previousLineWasNewline = false;
+                            }
+                        } catch (ParseException $e) {
+                            $parseError = true;
+                            break;
+                        }
+                    }
+
+                    if (!$parseError) {
+                        return trim($value);
+                    }
+                }
+
                 throw new ParseException('Unable to parse.', $this->getRealCurrentLineNb() + 1, $this->currentLine);
             }
+        } while ($this->moveToNextLine());
+
+        if (null !== $tag) {
+            $data = new TaggedValue($tag, $data);
         }
 
         if (Yaml::PARSE_OBJECT_FOR_MAP & $flags && !is_object($data) && 'mapping' === $context) {
@@ -345,7 +441,10 @@
             $skippedLineNumbers[] = $lineNumber;
         }
 
-        $parser = new self($offset, $this->totalNumberOfLines, $skippedLineNumbers);
+        $parser = new self();
+        $parser->offset = $offset;
+        $parser->totalNumberOfLines = $this->totalNumberOfLines;
+        $parser->skippedLineNumbers = $skippedLineNumbers;
         $parser->refs = &$this->refs;
 
         return $parser->doParse($yaml, $flags);
@@ -397,7 +496,7 @@
         $blockScalarIndentations = array();
 
         if ($this->isBlockScalarHeader()) {
-            $blockScalarIndentations[] = $this->getCurrentLineIndentation();
+            $blockScalarIndentations[] = $oldLineIndentation;
         }
 
         if (!$this->moveToNextLine()) {
@@ -447,14 +546,14 @@
             // terminate all block scalars that are more indented than the current line
             if (!empty($blockScalarIndentations) && $indent < $previousLineIndentation && trim($this->currentLine) !== '') {
                 foreach ($blockScalarIndentations as $key => $blockScalarIndentation) {
-                    if ($blockScalarIndentation >= $this->getCurrentLineIndentation()) {
+                    if ($blockScalarIndentation >= $indent) {
                         unset($blockScalarIndentations[$key]);
                     }
                 }
             }
 
             if (empty($blockScalarIndentations) && !$this->isCurrentLineComment() && $this->isBlockScalarHeader()) {
-                $blockScalarIndentations[] = $this->getCurrentLineIndentation();
+                $blockScalarIndentations[] = $indent;
             }
 
             $previousLineIndentation = $indent;
@@ -555,13 +654,17 @@
             return $this->refs[$value];
         }
 
-        if (self::preg_match('/^'.self::TAG_PATTERN.self::BLOCK_SCALAR_HEADER_PATTERN.'$/', $value, $matches)) {
+        if (self::preg_match('/^(?:'.self::TAG_PATTERN.' +)?'.self::BLOCK_SCALAR_HEADER_PATTERN.'$/', $value, $matches)) {
             $modifiers = isset($matches['modifiers']) ? $matches['modifiers'] : '';
 
             $data = $this->parseBlockScalar($matches['separator'], preg_replace('#\d+#', '', $modifiers), (int) abs($modifiers));
 
-            if (isset($matches['tag']) && '!!binary' === $matches['tag']) {
-                return Inline::evaluateBinaryScalar($data);
+            if ('' !== $matches['tag']) {
+                if ('!!binary' === $matches['tag']) {
+                    return Inline::evaluateBinaryScalar($data);
+                } elseif ('!' !== $matches['tag']) {
+                    @trigger_error(sprintf('Using the custom tag "%s" for the value "%s" is deprecated since version 3.3. It will be replaced by an instance of %s in 4.0.', $matches['tag'], $data, TaggedValue::class), E_USER_DEPRECATED);
+                }
             }
 
             return $data;
@@ -571,7 +674,7 @@
             $quotation = '' !== $value && ('"' === $value[0] || "'" === $value[0]) ? $value[0] : null;
 
             // do not take following lines into account when the current line is a quoted single line value
-            if (null !== $quotation && preg_match('/^'.$quotation.'.*'.$quotation.'(\s*#.*)?$/', $value)) {
+            if (null !== $quotation && self::preg_match('/^'.$quotation.'.*'.$quotation.'(\s*#.*)?$/', $value)) {
                 return Inline::parse($value, $flags, $this->refs);
             }
 
@@ -905,4 +1008,43 @@
 
         return $ret;
     }
+
+    /**
+     * Trim the tag on top of the value.
+     *
+     * Prevent values such as `!foo {quz: bar}` to be considered as
+     * a mapping block.
+     */
+    private function trimTag($value)
+    {
+        if ('!' === $value[0]) {
+            return ltrim(substr($value, 1, strcspn($value, " \r\n", 1)), ' ');
+        }
+
+        return $value;
+    }
+
+    private function getLineTag($value, $flags, $nextLineCheck = true)
+    {
+        if ('' === $value || '!' !== $value[0] || 1 !== self::preg_match('/^'.self::TAG_PATTERN.' *( +#.*)?$/', $value, $matches)) {
+            return;
+        }
+
+        if ($nextLineCheck && !$this->isNextLineIndented()) {
+            return;
+        }
+
+        $tag = substr($matches['tag'], 1);
+
+        // Built-in tags
+        if ($tag && '!' === $tag[0]) {
+            throw new ParseException(sprintf('The built-in tag "!%s" is not implemented.', $tag));
+        }
+
+        if (Yaml::PARSE_CUSTOM_TAGS & $flags) {
+            return $tag;
+        }
+
+        throw new ParseException(sprintf('Tags support is not enabled. You must use the flag `Yaml::PARSE_CUSTOM_TAGS` to use "%s".', $matches['tag']));
+    }
 }
Index: vendor/symfony/yaml/Tag/TaggedValue.php
===================================================================
--- vendor/symfony/yaml/Tag/TaggedValue.php	(nonexistent)
+++ vendor/symfony/yaml/Tag/TaggedValue.php	(revision 57)
@@ -0,0 +1,48 @@
+<?php
+
+/*
+ * This file is part of the Symfony package.
+ *
+ * (c) Fabien Potencier <fabien@symfony.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace Symfony\Component\Yaml\Tag;
+
+/**
+ * @author Nicolas Grekas <p@tchwork.com>
+ * @author Guilhem N. <egetick@gmail.com>
+ */
+final class TaggedValue
+{
+    private $tag;
+    private $value;
+
+    /**
+     * @param string $tag
+     * @param mixed  $value
+     */
+    public function __construct($tag, $value)
+    {
+        $this->tag = $tag;
+        $this->value = $value;
+    }
+
+    /**
+     * @return string
+     */
+    public function getTag()
+    {
+        return $this->tag;
+    }
+
+    /**
+     * @return mixed
+     */
+    public function getValue()
+    {
+        return $this->value;
+    }
+}
Index: vendor/symfony/yaml/Tests/Command/LintCommandTest.php
===================================================================
--- vendor/symfony/yaml/Tests/Command/LintCommandTest.php	(revision 55)
+++ vendor/symfony/yaml/Tests/Command/LintCommandTest.php	(revision 57)
@@ -51,6 +51,15 @@
         $this->assertContains('Unable to parse at line 3 (near "bar").', trim($tester->getDisplay()));
     }
 
+    public function testConstantAsKey()
+    {
+        $yaml = <<<YAML
+!php/const:Symfony\Component\Yaml\Tests\Command\Foo::TEST: bar
+YAML;
+        $ret = $this->createCommandTester()->execute(array('filename' => $this->createFile($yaml)), array('verbosity' => OutputInterface::VERBOSITY_VERBOSE, 'decorated' => false));
+        $this->assertSame(0, $ret, 'lint:yaml exits with code 0 in case of success');
+    }
+
     /**
      * @expectedException \RuntimeException
      */
@@ -105,3 +114,8 @@
         rmdir(sys_get_temp_dir().'/framework-yml-lint-test');
     }
 }
+
+class Foo
+{
+    const TEST = 'foo';
+}
Index: vendor/symfony/yaml/Tests/DumperTest.php
===================================================================
--- vendor/symfony/yaml/Tests/DumperTest.php	(revision 55)
+++ vendor/symfony/yaml/Tests/DumperTest.php	(revision 57)
@@ -125,7 +125,7 @@
                     // TODO
                 } else {
                     eval('$expected = '.trim($test['php']).';');
-                    $this->assertSame($expected, $this->parser->parse($this->dumper->dump($expected, 10)), $test['test']);
+                    $this->assertSame($expected, $this->parser->parse($this->dumper->dump($expected, 10), Yaml::PARSE_KEYS_AS_STRINGS), $test['test']);
                 }
             }
         }
@@ -247,6 +247,24 @@
         $this->dumper->dump(array('foo' => new A(), 'bar' => 1), 0, 0, true);
     }
 
+    public function testEmptyArray()
+    {
+        $dump = $this->dumper->dump(array());
+        $this->assertEquals('{  }', $dump);
+
+        $dump = $this->dumper->dump(array(), 0, 0, Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE);
+        $this->assertEquals('[]', $dump);
+
+        $dump = $this->dumper->dump(array(), 9, 0, Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE);
+        $this->assertEquals('[]', $dump);
+
+        $dump = $this->dumper->dump(new \ArrayObject(), 0, 0, Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE | Yaml::DUMP_OBJECT_AS_MAP);
+        $this->assertEquals('{  }', $dump);
+
+        $dump = $this->dumper->dump(new \stdClass(), 0, 0, Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE | Yaml::DUMP_OBJECT_AS_MAP);
+        $this->assertEquals('{  }', $dump);
+    }
+
     /**
      * @dataProvider getEscapeSequences
      */
@@ -333,6 +351,93 @@
         return $tests;
     }
 
+    public function testDumpingArrayObjectInstancesRespectsInlineLevel()
+    {
+        $deep = new \ArrayObject(array('deep1' => 'd', 'deep2' => 'e'));
+        $inner = new \ArrayObject(array('inner1' => 'b', 'inner2' => 'c', 'inner3' => $deep));
+        $outer = new \ArrayObject(array('outer1' => 'a', 'outer2' => $inner));
+
+        $yaml = $this->dumper->dump($outer, 2, 0, Yaml::DUMP_OBJECT_AS_MAP);
+
+        $expected = <<<YAML
+outer1: a
+outer2:
+    inner1: b
+    inner2: c
+    inner3: { deep1: d, deep2: e }
+
+YAML;
+        $this->assertSame($expected, $yaml);
+    }
+
+    public function testDumpingArrayObjectInstancesWithNumericKeysInlined()
+    {
+        $deep = new \ArrayObject(array('d', 'e'));
+        $inner = new \ArrayObject(array('b', 'c', $deep));
+        $outer = new \ArrayObject(array('a', $inner));
+
+        $yaml = $this->dumper->dump($outer, 0, 0, Yaml::DUMP_OBJECT_AS_MAP);
+        $expected = <<<YAML
+{ 0: a, 1: { 0: b, 1: c, 2: { 0: d, 1: e } } }
+YAML;
+        $this->assertSame($expected, $yaml);
+    }
+
+    public function testDumpingArrayObjectInstancesWithNumericKeysRespectsInlineLevel()
+    {
+        $deep = new \ArrayObject(array('d', 'e'));
+        $inner = new \ArrayObject(array('b', 'c', $deep));
+        $outer = new \ArrayObject(array('a', $inner));
+        $yaml = $this->dumper->dump($outer, 2, 0, Yaml::DUMP_OBJECT_AS_MAP);
+        $expected = <<<YAML
+0: a
+1:
+    0: b
+    1: c
+    2: { 0: d, 1: e }
+
+YAML;
+        $this->assertEquals($expected, $yaml);
+    }
+
+    public function testDumpEmptyArrayObjectInstanceAsMap()
+    {
+        $this->assertSame('{  }', $this->dumper->dump(new \ArrayObject(), 2, 0, Yaml::DUMP_OBJECT_AS_MAP));
+    }
+
+    public function testDumpEmptyStdClassInstanceAsMap()
+    {
+        $this->assertSame('{  }', $this->dumper->dump(new \stdClass(), 2, 0, Yaml::DUMP_OBJECT_AS_MAP));
+    }
+
+    public function testDumpingStdClassInstancesRespectsInlineLevel()
+    {
+        $deep = new \stdClass();
+        $deep->deep1 = 'd';
+        $deep->deep2 = 'e';
+
+        $inner = new \stdClass();
+        $inner->inner1 = 'b';
+        $inner->inner2 = 'c';
+        $inner->inner3 = $deep;
+
+        $outer = new \stdClass();
+        $outer->outer1 = 'a';
+        $outer->outer2 = $inner;
+
+        $yaml = $this->dumper->dump($outer, 2, 0, Yaml::DUMP_OBJECT_AS_MAP);
+
+        $expected = <<<YAML
+outer1: a
+outer2:
+    inner1: b
+    inner2: c
+    inner3: { deep1: d, deep2: e }
+
+YAML;
+        $this->assertSame($expected, $yaml);
+    }
+
     public function testDumpMultiLineStringAsScalarBlock()
     {
         $data = array(
Index: vendor/symfony/yaml/Tests/Fixtures/YtsSpecificationExamples.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/YtsSpecificationExamples.yml	(revision 55)
+++ vendor/symfony/yaml/Tests/Fixtures/YtsSpecificationExamples.yml	(revision 57)
@@ -556,21 +556,6 @@
     'fixed' => 1230.15,
   )
 ---
-test: Miscellaneous
-spec: 2.21
-yaml: |
-  null: ~
-  true: true
-  false: false
-  string: '12345'
-php: |
-  array(
-    '' => null,
-    1 => true,
-    0 => false,
-    'string' => '12345'
-  )
----
 test: Timestamps
 todo: true
 spec: 2.22
@@ -1533,18 +1518,6 @@
   }
 
 ---
-test: Boolean
-yaml: |
-   false: used as key
-   logical:  true
-   answer: false
-php: |
-   array(
-     false => 'used as key',
-     'logical' => true,
-     'answer' => false
-   )
----
 test: Integer
 yaml: |
    canonical: 12345
Index: vendor/symfony/yaml/Tests/Fixtures/YtsTypeTransfers.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/YtsTypeTransfers.yml	(revision 55)
+++ vendor/symfony/yaml/Tests/Fixtures/YtsTypeTransfers.yml	(revision 57)
@@ -210,20 +210,6 @@
       'negative one-thousand' => -1000.0
     )
 ---
-test: Integers as Map Keys
-brief: >
-    An integer can be used a dictionary key.
-yaml: |
-    1: one
-    2: two
-    3: three
-php: |
-    array(
-        1 => 'one',
-        2 => 'two',
-        3 => 'three'
-    )
----
 test: Floats
 dump_skip: true
 brief: >
Index: vendor/symfony/yaml/Tests/Fixtures/booleanMappingKeys.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/booleanMappingKeys.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/booleanMappingKeys.yml	(revision 57)
@@ -0,0 +1,11 @@
+--- %YAML:1.0
+test: Miscellaneous
+spec: 2.21
+yaml: |
+  true: true
+  false: false
+php: |
+  array(
+    'true' => true,
+    'false' => false,
+  )
Index: vendor/symfony/yaml/Tests/Fixtures/legacyBooleanMappingKeys.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/legacyBooleanMappingKeys.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/legacyBooleanMappingKeys.yml	(revision 57)
@@ -0,0 +1,23 @@
+--- %YAML:1.0
+test: Miscellaneous
+spec: 2.21
+yaml: |
+  true: true
+  false: false
+php: |
+  array(
+    1 => true,
+    0 => false,
+  )
+---
+test: Boolean
+yaml: |
+   false: used as key
+   logical:  true
+   answer: false
+php: |
+   array(
+     false => 'used as key',
+     'logical' => true,
+     'answer' => false
+   )
Index: vendor/symfony/yaml/Tests/Fixtures/legacyNonStringKeys.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/legacyNonStringKeys.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/legacyNonStringKeys.yml	(revision 57)
@@ -0,0 +1,2 @@
+- legacyBooleanMappingKeys
+- legacyNullMappingKey
Index: vendor/symfony/yaml/Tests/Fixtures/legacyNullMappingKey.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/legacyNullMappingKey.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/legacyNullMappingKey.yml	(revision 57)
@@ -0,0 +1,9 @@
+--- %YAML:1.0
+test: Miscellaneous
+spec: 2.21
+yaml: |
+  null: ~
+php: |
+  array(
+    '' => null,
+  )
Index: vendor/symfony/yaml/Tests/Fixtures/nonStringKeys.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/nonStringKeys.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/nonStringKeys.yml	(revision 57)
@@ -0,0 +1,3 @@
+- booleanMappingKeys
+- numericMappingKeys
+- nullMappingKey
Index: vendor/symfony/yaml/Tests/Fixtures/nullMappingKey.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/nullMappingKey.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/nullMappingKey.yml	(revision 57)
@@ -0,0 +1,9 @@
+--- %YAML:1.0
+test: Miscellaneous
+spec: 2.21
+yaml: |
+  null: ~
+php: |
+  array(
+    'null' => null,
+  )
Index: vendor/symfony/yaml/Tests/Fixtures/numericMappingKeys.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/numericMappingKeys.yml	(nonexistent)
+++ vendor/symfony/yaml/Tests/Fixtures/numericMappingKeys.yml	(revision 57)
@@ -0,0 +1,23 @@
+--- %YAML:1.0
+test: A sequence with an unordered array
+brief: >
+  A sequence with an unordered array
+yaml: |
+  1: foo
+  0: bar
+php: |
+  array(1 => 'foo', 0 => 'bar')
+---
+test: Integers as Map Keys
+brief: >
+    An integer can be used as dictionary key.
+yaml: |
+    1: one
+    2: two
+    3: three
+php: |
+    array(
+        1 => 'one',
+        2 => 'two',
+        3 => 'three'
+    )
Index: vendor/symfony/yaml/Tests/Fixtures/sfTests.yml
===================================================================
--- vendor/symfony/yaml/Tests/Fixtures/sfTests.yml	(revision 55)
+++ vendor/symfony/yaml/Tests/Fixtures/sfTests.yml	(revision 57)
@@ -96,15 +96,6 @@
 php: |
   array('foo', array('bar' => array('bar' => 'foo')))
 ---
-test: A sequence with an unordered array
-brief: >
-  A sequence with an unordered array
-yaml: |
-  1: foo
-  0: bar
-php: |
-  array(1 => 'foo', 0 => 'bar')
----
 test: Octal
 brief: as in spec example 2.19, octal value is converted
 yaml: |
Index: vendor/symfony/yaml/Tests/InlineTest.php
===================================================================
--- vendor/symfony/yaml/Tests/InlineTest.php	(revision 55)
+++ vendor/symfony/yaml/Tests/InlineTest.php	(revision 57)
@@ -21,17 +21,17 @@
     /**
      * @dataProvider getTestsForParse
      */
-    public function testParse($yaml, $value)
+    public function testParse($yaml, $value, $flags = 0)
     {
-        $this->assertSame($value, Inline::parse($yaml), sprintf('::parse() converts an inline YAML to a PHP structure (%s)', $yaml));
+        $this->assertSame($value, Inline::parse($yaml, $flags), sprintf('::parse() converts an inline YAML to a PHP structure (%s)', $yaml));
     }
 
     /**
      * @dataProvider getTestsForParseWithMapObjects
      */
-    public function testParseWithMapObjects($yaml, $value)
+    public function testParseWithMapObjects($yaml, $value, $flags = Yaml::PARSE_OBJECT_FOR_MAP)
     {
-        $actual = Inline::parse($yaml, Yaml::PARSE_OBJECT_FOR_MAP);
+        $actual = Inline::parse($yaml, $flags);
 
         $this->assertSame(serialize($value), serialize($actual));
     }
@@ -88,11 +88,11 @@
     /**
      * @dataProvider getTestsForDump
      */
-    public function testDump($yaml, $value)
+    public function testDump($yaml, $value, $parseFlags = 0)
     {
         $this->assertEquals($yaml, Inline::dump($value), sprintf('::dump() converts a PHP structure to an inline YAML (%s)', $yaml));
 
-        $this->assertSame($value, Inline::parse(Inline::dump($value)), 'check consistency');
+        $this->assertSame($value, Inline::parse(Inline::dump($value), $parseFlags), 'check consistency');
     }
 
     public function testDumpNumericValueWithLocale()
@@ -168,7 +168,7 @@
 
     /**
      * @group legacy
-     * @expectedDeprecation Using a colon that is not followed by an indication character (i.e. " ", ",", "[", "]", "{", "}" is deprecated since version 3.2 and will throw a ParseException in 4.0.
+     * @expectedDeprecation Using a colon after an unquoted mapping key that is not followed by an indication character (i.e. " ", ",", "[", "]", "{", "}") is deprecated since version 3.2 and will throw a ParseException in 4.0.
      * throws \Symfony\Component\Yaml\Exception\ParseException in 4.0
      */
     public function testParseMappingKeyWithColonNotFollowedBySpace()
@@ -385,12 +385,14 @@
             array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),
 
             // mappings
-            array('{foo: bar,bar: foo,false: false,null: null,integer: 12}', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
-            array('{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{foo: bar,bar: foo,false: false,null: null,integer: 12}', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12), Yaml::PARSE_KEYS_AS_STRINGS),
+            array('{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12), Yaml::PARSE_KEYS_AS_STRINGS),
             array('{foo: \'bar\', bar: \'foo: bar\'}', array('foo' => 'bar', 'bar' => 'foo: bar')),
             array('{\'foo\': \'bar\', "bar": \'foo: bar\'}', array('foo' => 'bar', 'bar' => 'foo: bar')),
             array('{\'foo\'\'\': \'bar\', "bar\"": \'foo: bar\'}', array('foo\'' => 'bar', 'bar"' => 'foo: bar')),
             array('{\'foo: \': \'bar\', "bar: ": \'foo: bar\'}', array('foo: ' => 'bar', 'bar: ' => 'foo: bar')),
+            array('{"foo:bar": "baz"}', array('foo:bar' => 'baz')),
+            array('{"foo":"bar"}', array('foo' => 'bar')),
 
             // nested sequences and mappings
             array('[foo, [bar, foo]]', array('foo', array('bar', 'foo'))),
@@ -454,12 +456,14 @@
             array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),
 
             // mappings
-            array('{foo: bar,bar: foo,false: false,null: null,integer: 12}', (object) array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
-            array('{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }', (object) array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{foo: bar,bar: foo,false: false,null: null,integer: 12}', (object) array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12), Yaml::PARSE_OBJECT_FOR_MAP | Yaml::PARSE_KEYS_AS_STRINGS),
+            array('{ foo  : bar, bar : foo,  false  :   false,  null  :   null,  integer :  12  }', (object) array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12), Yaml::PARSE_OBJECT_FOR_MAP | Yaml::PARSE_KEYS_AS_STRINGS),
             array('{foo: \'bar\', bar: \'foo: bar\'}', (object) array('foo' => 'bar', 'bar' => 'foo: bar')),
             array('{\'foo\': \'bar\', "bar": \'foo: bar\'}', (object) array('foo' => 'bar', 'bar' => 'foo: bar')),
             array('{\'foo\'\'\': \'bar\', "bar\"": \'foo: bar\'}', (object) array('foo\'' => 'bar', 'bar"' => 'foo: bar')),
             array('{\'foo: \': \'bar\', "bar: ": \'foo: bar\'}', (object) array('foo: ' => 'bar', 'bar: ' => 'foo: bar')),
+            array('{"foo:bar": "baz"}', (object) array('foo:bar' => 'baz')),
+            array('{"foo":"bar"}', (object) array('foo' => 'bar')),
 
             // nested sequences and mappings
             array('[foo, [bar, foo]]', array('foo', array('bar', 'foo'))),
@@ -534,7 +538,7 @@
             array('[\'foo,bar\', \'foo bar\']', array('foo,bar', 'foo bar')),
 
             // mappings
-            array('{ foo: bar, bar: foo, \'false\': false, \'null\': null, integer: 12 }', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12)),
+            array('{ foo: bar, bar: foo, \'false\': false, \'null\': null, integer: 12 }', array('foo' => 'bar', 'bar' => 'foo', 'false' => false, 'null' => null, 'integer' => 12), Yaml::PARSE_KEYS_AS_STRINGS),
             array('{ foo: bar, bar: \'foo: bar\' }', array('foo' => 'bar', 'bar' => 'foo: bar')),
 
             // nested sequences and mappings
@@ -550,7 +554,7 @@
 
             array('[foo, \'@foo.baz\', { \'%foo%\': \'foo is %foo%\', bar: \'%foo%\' }, true, \'@service_container\']', array('foo', '@foo.baz', array('%foo%' => 'foo is %foo%', 'bar' => '%foo%'), true, '@service_container')),
 
-            array('{ foo: { bar: { 1: 2, baz: 3 } } }', array('foo' => array('bar' => array(1 => 2, 'baz' => 3)))),
+            array('{ foo: { bar: { 1: 2, baz: 3 } } }', array('foo' => array('bar' => array(1 => 2, 'baz' => 3))), Yaml::PARSE_KEYS_AS_STRINGS),
         );
     }
 
@@ -571,7 +575,7 @@
         $expected->setTimeZone(new \DateTimeZone('UTC'));
         $expected->setDate($year, $month, $day);
 
-        if (PHP_VERSION_ID >= 70100) {
+        if (\PHP_VERSION_ID >= 70100) {
             $expected->setTime($hour, $minute, $second, 1000000 * ($second - (int) $second));
         } else {
             $expected->setTime($hour, $minute, $second);
@@ -600,7 +604,7 @@
         $expected = new \DateTime($yaml);
         $expected->setTimeZone(new \DateTimeZone('UTC'));
         $expected->setDate($year, $month, $day);
-        if (PHP_VERSION_ID >= 70100) {
+        if (\PHP_VERSION_ID >= 70100) {
             $expected->setTime($hour, $minute, $second, 1000000 * ($second - (int) $second));
         } else {
             $expected->setTime($hour, $minute, $second);
@@ -694,19 +698,61 @@
         $this->assertEquals($longStringWithQuotes, $arrayFromYaml['longStringWithQuotes']);
     }
 
+    /**
+     * @group legacy
+     * @expectedDeprecation Omitting the key of a mapping is deprecated and will throw a ParseException in 4.0.
+     */
     public function testOmittedMappingKeyIsParsedAsColon()
     {
         $this->assertSame(array(':' => 'foo'), Inline::parse('{: foo}'));
     }
 
-    public function testBooleanMappingKeysAreConvertedToStrings()
+    /**
+     * @dataProvider getTestsForNullValues
+     */
+    public function testParseMissingMappingValueAsNull($yaml, $expected)
     {
-        $this->assertSame(array('false' => 'foo'), Inline::parse('{false: foo}'));
-        $this->assertSame(array('true' => 'foo'), Inline::parse('{true: foo}'));
+        $this->assertSame($expected, Inline::parse($yaml));
+    }
+
+    public function getTestsForNullValues()
+    {
+        return array(
+            'null before closing curly brace' => array('{foo:}', array('foo' => null)),
+            'null before comma' => array('{foo:, bar: baz}', array('foo' => null, 'bar' => 'baz')),
+        );
     }
 
     public function testTheEmptyStringIsAValidMappingKey()
     {
         $this->assertSame(array('' => 'foo'), Inline::parse('{ "": foo }'));
     }
+
+    /**
+     * @group legacy
+     * @expectedDeprecation Implicit casting of incompatible mapping keys to strings is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0. Pass the PARSE_KEYS_AS_STRINGS flag to explicitly enable the type casts.
+     * @dataProvider getNotPhpCompatibleMappingKeyData
+     */
+    public function testImplicitStringCastingOfMappingKeysIsDeprecated($yaml, $expected)
+    {
+        $this->assertSame($expected, Inline::parse($yaml));
+    }
+
+    /**
+     * @dataProvider getNotPhpCompatibleMappingKeyData
+     */
+    public function testExplicitStringCastingOfMappingKeys($yaml, $expected)
+    {
+        $this->assertSame($expected, Inline::parse($yaml, Yaml::PARSE_KEYS_AS_STRINGS));
+    }
+
+    public function getNotPhpCompatibleMappingKeyData()
+    {
+        return array(
+            'boolean-true' => array('{true: "foo"}', array('true' => 'foo')),
+            'boolean-false' => array('{false: "foo"}', array('false' => 'foo')),
+            'null' => array('{null: "foo"}', array('null' => 'foo')),
+            'float' => array('{0.25: "foo"}', array('0.25' => 'foo')),
+        );
+    }
 }
Index: vendor/symfony/yaml/Tests/ParserTest.php
===================================================================
--- vendor/symfony/yaml/Tests/ParserTest.php	(revision 55)
+++ vendor/symfony/yaml/Tests/ParserTest.php	(revision 57)
@@ -15,6 +15,7 @@
 use Symfony\Component\Yaml\Exception\ParseException;
 use Symfony\Component\Yaml\Yaml;
 use Symfony\Component\Yaml\Parser;
+use Symfony\Component\Yaml\Tag\TaggedValue;
 
 class ParserTest extends TestCase
 {
@@ -34,7 +35,7 @@
     /**
      * @dataProvider getDataFormSpecifications
      */
-    public function testSpecifications($file, $expected, $yaml, $comment, $deprecated)
+    public function testSpecifications($expected, $yaml, $comment, $deprecated)
     {
         $deprecations = array();
 
@@ -66,32 +67,34 @@
 
     public function getDataFormSpecifications()
     {
-        $parser = new Parser();
-        $path = __DIR__.'/Fixtures';
-
-        $tests = array();
-        $files = $parser->parse(file_get_contents($path.'/index.yml'));
-        foreach ($files as $file) {
-            $yamls = file_get_contents($path.'/'.$file.'.yml');
+        return $this->loadTestsFromFixtureFiles('index.yml');
+    }
 
-            // split YAMLs documents
-            foreach (preg_split('/^---( %YAML\:1\.0)?/m', $yamls) as $yaml) {
-                if (!$yaml) {
-                    continue;
-                }
+    /**
+     * @dataProvider getNonStringMappingKeysData
+     */
+    public function testNonStringMappingKeys($expected, $yaml, $comment)
+    {
+        $this->assertSame($expected, var_export($this->parser->parse($yaml, Yaml::PARSE_KEYS_AS_STRINGS), true), $comment);
+    }
 
-                $test = $parser->parse($yaml);
-                if (isset($test['todo']) && $test['todo']) {
-                    // TODO
-                } else {
-                    eval('$expected = '.trim($test['php']).';');
+    public function getNonStringMappingKeysData()
+    {
+        return $this->loadTestsFromFixtureFiles('nonStringKeys.yml');
+    }
 
-                    $tests[] = array($file, var_export($expected, true), $test['yaml'], $test['test'], isset($test['deprecated']) ? $test['deprecated'] : false);
-                }
-            }
-        }
+    /**
+     * @group legacy
+     * @dataProvider getLegacyNonStringMappingKeysData
+     */
+    public function testLegacyNonStringMappingKeys($expected, $yaml, $comment)
+    {
+        $this->assertSame($expected, var_export($this->parser->parse($yaml), true), $comment);
+    }
 
-        return $tests;
+    public function getLegacyNonStringMappingKeysData()
+    {
+        return $this->loadTestsFromFixtureFiles('legacyNonStringKeys.yml');
     }
 
     public function testTabsInYaml()
@@ -507,9 +510,15 @@
     /**
      * @dataProvider getObjectForMapTests
      */
-    public function testObjectForMap($yaml, $expected)
+    public function testObjectForMap($yaml, $expected, $explicitlyParseKeysAsStrings = false)
     {
-        $this->assertEquals($expected, $this->parser->parse($yaml, Yaml::PARSE_OBJECT_FOR_MAP));
+        $flags = Yaml::PARSE_OBJECT_FOR_MAP;
+
+        if ($explicitlyParseKeysAsStrings) {
+            $flags |= Yaml::PARSE_KEYS_AS_STRINGS;
+        }
+
+        $this->assertEquals($expected, $this->parser->parse($yaml, $flags));
     }
 
     /**
@@ -568,7 +577,7 @@
         $expected->map = new \stdClass();
         $expected->map->{1} = 'one';
         $expected->map->{2} = 'two';
-        $tests['numeric-keys'] = array($yaml, $expected);
+        $tests['numeric-keys'] = array($yaml, $expected, true);
 
         $yaml = <<<'YAML'
 map:
@@ -579,7 +588,7 @@
         $expected->map = new \stdClass();
         $expected->map->{0} = 'one';
         $expected->map->{1} = 'two';
-        $tests['zero-indexed-numeric-keys'] = array($yaml, $expected);
+        $tests['zero-indexed-numeric-keys'] = array($yaml, $expected, true);
 
         return $tests;
     }
@@ -593,6 +602,17 @@
         $this->parser->parse($yaml, Yaml::PARSE_EXCEPTION_ON_INVALID_TYPE);
     }
 
+    public function testCanParseContentWithTrailingSpaces()
+    {
+        $yaml = "items:  \n  foo: bar";
+
+        $expected = array(
+            'items' => array('foo' => 'bar'),
+        );
+
+        $this->assertSame($expected, $this->parser->parse($yaml));
+    }
+
     /**
      * @group legacy
      * @dataProvider invalidDumpedObjectProvider
@@ -833,7 +853,7 @@
     /**
      * @group legacy
      * @dataProvider getParseExceptionOnDuplicateData
-     * @expectedDeprecation Duplicate key "%s" detected on line %d whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated %s.
+     * @expectedDeprecation Duplicate key "%s" detected whilst parsing YAML. Silent handling of duplicate mapping keys in YAML is deprecated %s.
      * throws \Symfony\Component\Yaml\Exception\ParseException in 4.0
      */
     public function testParseExceptionOnDuplicate($input, $duplicateKey, $lineNumber)
@@ -1059,6 +1079,10 @@
         $this->assertEquals(array('foo' => 1, 'bar' => 2), $this->parser->parse($yaml));
     }
 
+    /**
+     * @group legacy
+     * @expectedDeprecation Implicit casting of numeric key to string is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0. Pass the PARSE_KEYS_AS_STRINGS flag to explicitly enable the type casts.
+     */
     public function testFloatKeys()
     {
         $yaml = <<<'EOF'
@@ -1078,6 +1102,58 @@
     }
 
     /**
+     * @group legacy
+     * @expectedDeprecation Implicit casting of non-string key to string is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0. Pass the PARSE_KEYS_AS_STRINGS flag to explicitly enable the type casts.
+     */
+    public function testBooleanKeys()
+    {
+        $yaml = <<<'EOF'
+true: foo
+false: bar
+EOF;
+
+        $expected = array(
+            1 => 'foo',
+            0 => 'bar',
+        );
+
+        $this->assertEquals($expected, $this->parser->parse($yaml));
+    }
+
+    public function testExplicitStringCastingOfFloatKeys()
+    {
+        $yaml = <<<'EOF'
+foo:
+    1.2: "bar"
+    1.3: "baz"
+EOF;
+
+        $expected = array(
+            'foo' => array(
+                '1.2' => 'bar',
+                '1.3' => 'baz',
+            ),
+        );
+
+        $this->assertEquals($expected, $this->parser->parse($yaml, Yaml::PARSE_KEYS_AS_STRINGS));
+    }
+
+    public function testExplicitStringCastingOfBooleanKeys()
+    {
+        $yaml = <<<'EOF'
+true: foo
+false: bar
+EOF;
+
+        $expected = array(
+            'true' => 'foo',
+            'false' => 'bar',
+        );
+
+        $this->assertEquals($expected, $this->parser->parse($yaml, Yaml::PARSE_KEYS_AS_STRINGS));
+    }
+
+    /**
      * @expectedException \Symfony\Component\Yaml\Exception\ParseException
      * @expectedExceptionMessage A colon cannot be used in an unquoted mapping value
      */
@@ -1480,6 +1556,238 @@
         $this->assertSame(array('foo' => 'bar baz foobar foo', 'bar' => 'baz'), $this->parser->parse($yaml));
     }
 
+    public function testParseMultiLineString()
+    {
+        $this->assertEquals("foo bar\nbaz", $this->parser->parse("foo\nbar\n\nbaz"));
+    }
+
+    /**
+     * @dataProvider multiLineDataProvider
+     */
+    public function testParseMultiLineMappingValue($yaml, $expected, $parseError)
+    {
+        $this->assertEquals($expected, $this->parser->parse($yaml));
+    }
+
+    public function multiLineDataProvider()
+    {
+        $tests = array();
+
+        $yaml = <<<'EOF'
+foo:
+- bar:
+    one
+
+    two
+    three
+EOF;
+        $expected = array(
+            'foo' => array(
+                array(
+                    'bar' => "one\ntwo three",
+                ),
+            ),
+        );
+
+        $tests[] = array($yaml, $expected, false);
+
+        $yaml = <<<'EOF'
+bar
+"foo"
+EOF;
+        $expected = 'bar "foo"';
+
+        $tests[] = array($yaml, $expected, false);
+
+        $yaml = <<<'EOF'
+bar
+"foo
+EOF;
+        $expected = 'bar "foo';
+
+        $tests[] = array($yaml, $expected, false);
+
+        $yaml = <<<'EOF'
+bar
+
+'foo'
+EOF;
+        $expected = "bar\n'foo'";
+
+        $tests[] = array($yaml, $expected, false);
+
+        $yaml = <<<'EOF'
+bar
+
+foo'
+EOF;
+        $expected = "bar\nfoo'";
+
+        $tests[] = array($yaml, $expected, false);
+
+        return $tests;
+    }
+
+    public function testTaggedInlineMapping()
+    {
+        $this->assertEquals(new TaggedValue('foo', array('foo' => 'bar')), $this->parser->parse('!foo {foo: bar}', Yaml::PARSE_CUSTOM_TAGS));
+    }
+
+    /**
+     * @dataProvider taggedValuesProvider
+     */
+    public function testCustomTagSupport($expected, $yaml)
+    {
+        $this->assertEquals($expected, $this->parser->parse($yaml, Yaml::PARSE_CUSTOM_TAGS));
+    }
+
+    public function taggedValuesProvider()
+    {
+        return array(
+            'sequences' => array(
+                array(new TaggedValue('foo', array('yaml')), new TaggedValue('quz', array('bar'))),
+                <<<YAML
+- !foo
+    - yaml
+- !quz [bar]
+YAML
+            ),
+            'mappings' => array(
+                new TaggedValue('foo', array('foo' => new TaggedValue('quz', array('bar')), 'quz' => new TaggedValue('foo', array('quz' => 'bar')))),
+                <<<YAML
+!foo
+foo: !quz [bar]
+quz: !foo
+   quz: bar
+YAML
+            ),
+            'inline' => array(
+                array(new TaggedValue('foo', array('foo', 'bar')), new TaggedValue('quz', array('foo' => 'bar', 'quz' => new TaggedValue('bar', array('one' => 'bar'))))),
+                <<<YAML
+- !foo [foo, bar]
+- !quz {foo: bar, quz: !bar {one: bar}}
+YAML
+            ),
+        );
+    }
+
+    /**
+     * @expectedException \Symfony\Component\Yaml\Exception\ParseException
+     * @expectedExceptionMessage Tags support is not enabled. Enable the `Yaml::PARSE_CUSTOM_TAGS` flag to use "!iterator" at line 1 (near "!iterator [foo]").
+     */
+    public function testCustomTagsDisabled()
+    {
+        $this->parser->parse('!iterator [foo]');
+    }
+
+    /**
+     * @group legacy
+     * @expectedDeprecation Using the unquoted scalar value "!iterator foo" is deprecated since version 3.3 and will be considered as a tagged value in 4.0. You must quote it.
+     */
+    public function testUnsupportedTagWithScalar()
+    {
+        $this->assertEquals('!iterator foo', $this->parser->parse('!iterator foo'));
+    }
+
+    /**
+     * @expectedException \Symfony\Component\Yaml\Exception\ParseException
+     * @expectedExceptionMessage The built-in tag "!!foo" is not implemented.
+     */
+    public function testExceptionWhenUsingUnsuportedBuiltInTags()
+    {
+        $this->parser->parse('!!foo');
+    }
+
+    /**
+     * @group legacy
+     * @expectedDeprecation Starting an unquoted string with a question mark followed by a space is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.
+     */
+    public function testComplexMappingThrowsParseException()
+    {
+        $yaml = <<<YAML
+? "1"
+:
+  name: végétalien
+YAML;
+
+        $this->parser->parse($yaml);
+    }
+
+    /**
+     * @group legacy
+     * @expectedDeprecation Starting an unquoted string with a question mark followed by a space is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.
+     */
+    public function testComplexMappingNestedInMappingThrowsParseException()
+    {
+        $yaml = <<<YAML
+diet:
+  ? "1"
+  :
+    name: végétalien
+YAML;
+
+        $this->parser->parse($yaml);
+    }
+
+    /**
+     * @group legacy
+     * @expectedDeprecation Starting an unquoted string with a question mark followed by a space is deprecated since version 3.3 and will throw \Symfony\Component\Yaml\Exception\ParseException in 4.0.
+     */
+    public function testComplexMappingNestedInSequenceThrowsParseException()
+    {
+        $yaml = <<<YAML
+- ? "1"
+  :
+    name: végétalien
+YAML;
+
+        $this->parser->parse($yaml);
+    }
+
+    /**
+     * @expectedException        \Symfony\Component\Yaml\Exception\ParseException
+     * @expectedExceptionMessage Unable to parse at line 1 (near "[parameters]").
+     */
+    public function testParsingIniThrowsException()
+    {
+        $ini = <<<INI
+[parameters]
+  foo = bar
+  bar = %foo%
+INI;
+
+        $this->parser->parse($ini);
+    }
+
+    private function loadTestsFromFixtureFiles($testsFile)
+    {
+        $parser = new Parser();
+
+        $tests = array();
+        $files = $parser->parse(file_get_contents(__DIR__.'/Fixtures/'.$testsFile));
+        foreach ($files as $file) {
+            $yamls = file_get_contents(__DIR__.'/Fixtures/'.$file.'.yml');
+
+            // split YAMLs documents
+            foreach (preg_split('/^---( %YAML\:1\.0)?/m', $yamls) as $yaml) {
+                if (!$yaml) {
+                    continue;
+                }
+
+                $test = $parser->parse($yaml);
+                if (isset($test['todo']) && $test['todo']) {
+                    // TODO
+                } else {
+                    eval('$expected = '.trim($test['php']).';');
+
+                    $tests[] = array(var_export($expected, true), $test['yaml'], $test['test'], isset($test['deprecated']) ? $test['deprecated'] : false);
+                }
+            }
+        }
+
+        return $tests;
+    }
+
     public function testCanParseVeryLongValue()
     {
         $longStringWithSpaces = str_repeat('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ', 20000);
@@ -1511,9 +1819,59 @@
 YAML;
         $this->parser->parse($yaml);
     }
+
+    public function testPhpConstantTagMappingKey()
+    {
+        $yaml = <<<YAML
+transitions:
+    !php/const:Symfony\Component\Yaml\Tests\B::FOO:
+        from:
+            - !php/const:Symfony\Component\Yaml\Tests\B::BAR
+        to: !php/const:Symfony\Component\Yaml\Tests\B::BAZ
+YAML;
+        $expected = array(
+            'transitions' => array(
+                'foo' => array(
+                    'from' => array(
+                        'bar',
+                    ),
+                    'to' => 'baz',
+                ),
+            ),
+        );
+
+        $this->assertSame($expected, $this->parser->parse($yaml, Yaml::PARSE_CONSTANT));
+    }
+
+    public function testPhpConstantTagMappingKeyWithKeysCastToStrings()
+    {
+        $yaml = <<<YAML
+transitions:
+    !php/const:Symfony\Component\Yaml\Tests\B::FOO:
+        from:
+            - !php/const:Symfony\Component\Yaml\Tests\B::BAR
+        to: !php/const:Symfony\Component\Yaml\Tests\B::BAZ
+YAML;
+        $expected = array(
+            'transitions' => array(
+                'foo' => array(
+                    'from' => array(
+                        'bar',
+                    ),
+                    'to' => 'baz',
+                ),
+            ),
+        );
+
+        $this->assertSame($expected, $this->parser->parse($yaml, Yaml::PARSE_CONSTANT | Yaml::PARSE_KEYS_AS_STRINGS));
+    }
 }
 
 class B
 {
     public $b = 'foo';
+
+    const FOO = 'foo';
+    const BAR = 'bar';
+    const BAZ = 'baz';
 }
Index: vendor/symfony/yaml/Yaml.php
===================================================================
--- vendor/symfony/yaml/Yaml.php	(revision 55)
+++ vendor/symfony/yaml/Yaml.php	(revision 57)
@@ -29,6 +29,9 @@
     const DUMP_OBJECT_AS_MAP = 64;
     const DUMP_MULTI_LINE_LITERAL_BLOCK = 128;
     const PARSE_CONSTANT = 256;
+    const PARSE_CUSTOM_TAGS = 512;
+    const DUMP_EMPTY_ARRAY_AS_SEQUENCE = 1024;
+    const PARSE_KEYS_AS_STRINGS = 2048;
 
     /**
      * Parses YAML into a PHP value.
Index: vendor/symfony/yaml/composer.json
===================================================================
--- vendor/symfony/yaml/composer.json	(revision 55)
+++ vendor/symfony/yaml/composer.json	(revision 57)
@@ -33,7 +33,7 @@
     "minimum-stability": "dev",
     "extra": {
         "branch-alias": {
-            "dev-master": "3.2-dev"
+            "dev-master": "3.3-dev"
         }
     }
 }
